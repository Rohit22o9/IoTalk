<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= group.name %> | Group Chat</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="/style.css">
  <script>
    tailwind.config = {
      theme: {
        extend: {
          colors: {
            primary: {
              50: '#eff6ff', 100: '#dbeafe',
              500: '#3b82f6', 600: '#2563eb',
              700: '#1d4ed8', 800: '#1e40af', 900: '#1e3a8a',
            },
            secondary: {
              50: '#f8fafc', 100: '#f1f5f9',
              500: '#64748b', 600: '#475569',
              700: '#334155', 800: '#1e293b', 900: '#0f172a',
            }
          }
        }
      }
    }
  </script>
  <style>
    .message-container {
      position: relative;
    }
    .message-menu {
      opacity: 0;
      transition: opacity 0.2s ease;
      pointer-events: none;
    }
    .message-container:hover .message-menu {
      opacity: 1;
      pointer-events: all;
    }
    .dropdown-menu {
      position: absolute;
      right: 0;
      top: 100%;
      z-index: 50;
      min-width: 160px;
      transform: translateY(-10px);
      opacity: 0;
      visibility: hidden;
      transition: all 0.2s ease;
    }
    .dropdown-menu.show {
      transform: translateY(0);
      opacity: 1;
      visibility: visible;
    }
    .edit-input {
      background: rgba(255, 255, 255, 0.9);
      border: 1px solid #e2e8f0;
      border-radius: 0.5rem;
      padding: 0.5rem;
      width: 100%;
      font-size: 0.875rem;
    }
    .edit-buttons {
      margin-top: 0.5rem;
      display: flex;
      gap: 0.5rem;
    }
    .deleted-message {
      opacity: 0.5;
      font-style: italic;
      background: #f3f4f6 !important;
      color: #6b7280 !important;
    }
    body, html {
      overflow-x: hidden;
    }
    .chat-messages {
      overflow-x: hidden;
      word-wrap: break-word;
      word-break: break-word;
    }
    /* Voice message styles */
    .voice-message-container {
      display: flex;
      align-items: center;
      gap: 10px;
      background: rgba(255, 255, 255, 0.8);
      backdrop-filter: blur(5px);
      padding: 8px 12px;
      border-radius: 1rem;
      max-width: 70%;
      word-break: break-word;
    }
    .voice-play-btn {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 40px;
      height: 40px;
      border-radius: 50%;
      background-color: #3b82f6;
      color: white;
      cursor: pointer;
      transition: background-color 0.2s ease;
      flex-shrink: 0;
    }
    .voice-play-btn:hover {
      background-color: #2563eb;
    }
    .voice-progress-bar-container {
      flex-grow: 1;
      height: 6px;
      background-color: rgba(255, 255, 255, 0.5);
      border-radius: 3px;
      cursor: pointer;
      position: relative;
      overflow: hidden;
    }
    .voice-progress {
      height: 100%;
      background-color: #3b82f6;
      border-radius: 3px;
      width: 0%;
    }
    .voice-duration {
      font-size: 0.75rem;
      color: #64748b;
      min-width: 40px;
      text-align: right;
      flex-shrink: 0;
    }
    .voice-record-controls {
      display: flex;
      align-items: center;
      gap: 10px;
      padding: 10px;
      background-color: rgba(255, 255, 255, 0.8);
      backdrop-filter: blur(5px);
      border-radius: 1rem;
    }
    .voice-record-btn {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 50px;
      height: 50px;
      border-radius: 50%;
      background-image: linear-gradient(to right, #3b82f6, #2563eb);
      color: white;
      cursor: pointer;
      transition: all 0.2s ease;
    }
    .voice-record-btn:hover {
      background-image: linear-gradient(to right, #2563eb, #1d4ed8);
    }
    .voice-record-btn svg {
      width: 24px;
      height: 24px;
    }
    .voice-record-preview {
      display: flex;
      align-items: center;
      gap: 15px;
      padding: 10px;
      background-color: rgba(255, 255, 255, 0.8);
      backdrop-filter: blur(5px);
      border-radius: 1rem;
    }
    .voice-timer {
      font-family: 'Courier New', Courier, monospace;
      font-size: 0.875rem;
      color: #64748b;
    }
    .voice-action-btn {
      width: 36px;
      height: 36px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: background-color 0.2s ease;
    }
    .voice-delete-btn { background-color: #f87171; color: white; }
    .voice-delete-btn:hover { background-color: #ef4444; }
    .voice-play-pause-btn { background-color: #3b82f6; color: white; }
    .voice-play-pause-btn:hover { background-color: #2563eb; }
    .voice-send-btn { background-color: #3b82f6; color: white; }
    .voice-send-btn:hover { background-color: #2563eb; }
    #groupInfoPanel {
      width: 0;
      transition: width 0.3s ease;
      overflow: hidden;
    }
    #groupInfoPanel.open {
      width: 320px;
    }
  </style>
</head>

<body class="h-screen bg-gradient-to-br from-secondary-50 via-white to-primary-50 overflow-hidden">
  <div class="h-full flex flex-col">
    <!-- Header -->
    <header class="bg-white/90 backdrop-blur-lg border-b border-secondary-200 px-4 py-3 flex-shrink-0 fixed top-0 left-0 right-0 z-20">
      <div class="flex items-center space-x-4">
        <form action="/dashboard" method="GET" class="inline">
          <button type="submit" class="p-2 rounded-lg hover:bg-secondary-100 transition-colors duration-200">
            <svg class="h-5 w-5 text-secondary-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
            </svg>
          </button>
        </form>
        <div class="flex items-center space-x-3 cursor-pointer group-header flex-1" id="groupHeader" data-group-id="<%= group._id %>" onclick="toggleGroupInfo()">
          <img src="<%= group.icon || '/group_icons/default.png' %>"
               alt="<%= group.name %>"
               class="w-10 h-10 rounded-full object-cover border-2 border-white shadow-md">
          <div>
            <h1 class="text-lg font-semibold text-secondary-900"><%= group.name %></h1>
            <p class="text-xs font-medium text-gray-500"><%= group.members.length %> members</p>
          </div>
        </div>
        <!-- Call buttons will be added here by JavaScript -->
        <div id="group-call-buttons-container"></div>
      </div>
    </header>

    <!-- Main Container -->
    <div class="flex flex-1 overflow-hidden pt-16">
      <!-- Chat Messages -->
      <main class="flex-1 overflow-y-auto p-4 pb-32 space-y-4 chat-messages" id="chatBox">
        <!-- Group Typing Indicator -->
        <div id="groupTypingIndicator" class="hidden flex justify-start">
          <div class="bg-white/80 backdrop-blur-lg px-4 py-2 rounded-2xl rounded-bl-md border border-white/20 shadow-lg">
            <div class="flex items-center space-x-2">
              <div class="flex space-x-1">
                <div class="w-2 h-2 bg-secondary-400 rounded-full animate-bounce"></div>
                <div class="w-2 h-2 bg-secondary-400 rounded-full animate-bounce" style="animation-delay: 0.1s"></div>
                <div class="w-2 h-2 bg-secondary-400 rounded-full animate-bounce" style="animation-delay: 0.2s"></div>
              </div>
              <span class="text-xs text-secondary-500" id="groupTypingText">Someone is typing...</span>
            </div>
          </div>
        </div>
        <% chats.forEach(chat => { %>
          <div class="flex <%= chat.from._id.toString() === currentUser._id.toString() ? 'justify-end' : 'justify-start' %>" data-id="<%= chat._id %>">
            <div class="message-container relative">
              <div class="max-w-xs lg:max-w-md px-4 py-3 rounded-2xl
                          <%= chat.from._id.toString() === currentUser._id.toString()
                              ? 'bg-gradient-to-r from-primary-500 to-primary-600 text-white rounded-br-md'
                              : 'bg-white/80 backdrop-blur-lg text-secondary-900 rounded-bl-md border border-white/20' %> shadow-lg">
                <% if (chat.media) {
                  const ext = chat.media ? chat.media.split('.').pop().toLowerCase() : '';
                  const isImage = ['png','jpg','jpeg','gif','webp'].includes(ext);
                  const isVoice = ['webm','ogg','mp3','m4a','wav'].includes(ext) || (chat.originalName && chat.originalName.startsWith('voice_')) || (chat.media && chat.media.includes('voice_'));
                %>
                  <% if (isImage) { %>
                    <div class="mb-2">
                      <img src="<%= chat.media.startsWith('/') ? chat.media : '/' + chat.media %>"
                           alt="Media"
                           class="rounded-md max-h-60 shadow cursor-pointer hover:opacity-90 transition-opacity"
                           onclick="openMediaPreview(this.src, 'image', '<%= chat.originalName || chat.media.split('/').pop() %>')">
                    </div>
                  <% } else if (['mp4','avi','mov','wmv','flv','mkv'].includes(ext)) { %>
                    <div class="mb-2">
                      <div class="relative cursor-pointer group"
                           onclick="openMediaPreview('<%= chat.media.startsWith('/') ? chat.media : '/' + chat.media %>', 'video', '<%= chat.originalName || chat.media.split('/').pop() %>')">
                          <video class="rounded-md max-h-60 shadow w-full" style="max-width: 100%;" preload="metadata">
                              <source src="<%= chat.media.startsWith('/') ? chat.media : '/' + chat.media %>" type="video/<%= ext %>">
                              Your browser does not support the video tag.
                          </video>
                          <div class="absolute inset-0 flex items-center justify-center bg-black bg-opacity-30 opacity-0 group-hover:opacity-100 transition-opacity rounded-md">
                              <div class="bg-white bg-opacity-80 rounded-full p-3">
                                  <svg class="h-8 w-8 text-primary-600" fill="currentColor" viewBox="0 0 24 24">
                                      <path d="M8 5v14l11-7z"/>
                                  </svg>
                              </div>
                          </div>
                      </div>
                    </div>
                  <% } else if (isVoice) { %>
                    <div class="voice-message-container">
                      <button class="voice-play-btn" data-audio-src="<%= chat.media.startsWith('/') ? chat.media : '/' + chat.media %>">
                        <svg class="play-icon h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.166a1 1 0 00-1.197-.773 1 1 0 00-.773 1.197l.62 4.361a1 1 0 01-.467 1.062L10 20v-8.752c0-.248.537-.484 1.2-.659l3.493-1.747Z"/>
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19v-6.752c0-.248.537-.484 1.2-.659l3.493-1.747a1 1 0 00.595-.883L14.752 11.166z"/>
                        </svg>
                        <svg class="pause-icon h-6 w-6 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 9v6m4-6v6m7-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
                        </svg>
                      </button>
                      <div class="voice-progress-bar-container">
                        <div class="voice-progress"></div>
                      </div>
                      <div class="voice-duration">0:00</div>
                    </div>
                  <% } else {
                    const extColor =
                      ext === 'pdf' ? 'text-red-500' :
                      ['doc','docx'].includes(ext) ? 'text-blue-600' :
                      ['xls','xlsx'].includes(ext) ? 'text-green-600' :
                      ['ppt','pptx'].includes(ext) ? 'text-orange-500' :
                      ['zip','rar'].includes(ext) ? 'text-yellow-500' : 'text-gray-600';
                  %>
                    <div class="bg-gray-100 rounded-md p-3 mb-2 shadow flex flex-col space-y-2">
                      <div class="flex items-center space-x-3">
                        <svg class="w-6 h-6 <%= extColor %>" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                          <path d="M12 2H6a2 2 0 00-2 2v16a2 2 0 002 2h12a2 2 0 002-2V8z"/>
                          <polyline points="12 2 12 8 18 8"/>
                        </svg>
                        <div>
                          <p class="font-semibold text-gray-800 text-sm truncate max-w-xs">
                            <%= chat.originalName || chat.media.split('/').pop() %>
                          </p>
                          <p class="text-xs text-gray-500 uppercase">DOCUMENT</p>
                        </div>
                      </div>
                      <div class="flex space-x-3 mt-1">
                        <a href="<%= chat.media.startsWith('/') ? chat.media : '/' + chat.media %>" target="_blank"
                           class="text-xs px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600">Open</a>
                        <a href="<%= chat.media.startsWith('/') ? chat.media : '/' + chat.media %>" download
                           class="text-xs px-3 py-1 bg-green-500 text-white rounded hover:bg-green-600">Download</a>
                      </div>
                    </div>
                  <% } %>
                <% } %>

                <% if (chat.msg) { %>
                  <div class="message-text relative group">
                    <p class="text-sm leading-relaxed">
                      <strong class="<%= chat.from._id.toString() === currentUser._id.toString() ? 'text-primary-100' : 'text-secondary-700' %>">
                        <%= chat.from.username %>:
                      </strong>
                      <%= chat.msg %>
                    </p>
                    <% 
                    const hasVideoLink = /(?:https?:\/\/(?:www\.)?(?:youtube\.com\/watch\?v=|youtu\.be\/|vimeo\.com\/video\/|dailymotion\.com\/video\/))/.test(chat.msg);
                    const shouldShowSummarize = chat.msg.length > 200 || hasVideoLink;
                    %>
                    <% if (shouldShowSummarize) { %>
                      <button onclick="summarizeGroupContent('<%= chat._id %>', '<%= hasVideoLink ? 'video_link' : 'text' %>', `<%= chat.msg.replace(/'/g, "\\'").replace(/`/g, "\\`").replace(/\n/g, "\\n") %>`)"
                              class="absolute -top-1 -right-1 opacity-0 group-hover:opacity-100 transition-all duration-200 bg-blue-500 hover:bg-blue-600 text-white text-xs px-2 py-1 rounded-full shadow-lg transform hover:scale-105"
                              title="Summarize content">
                        <svg class="w-3 h-3 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <% if (hasVideoLink) { %>
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
                          <% } else { %>
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                          <% } %>
                        </svg>
                        Summarize
                      </button>
                    <% } %>
                  </div>
                <% } %>
                <div class="flex items-center justify-between mt-2">
                  <span class="text-xs <%= chat.from._id.toString() === currentUser._id.toString() ? 'text-primary-100' : 'text-secondary-500' %>">
                    <%= new Date(chat.created_at).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' }) %>
                    <% if (chat.edited) { %>
                      <span class="ml-1 italic">(edited)</span>
                    <% } %>
                  </span>
                </div>
              </div>

              <!-- Message Menu (only show for current user's messages) -->
              <% if (chat.from._id.toString() === currentUser._id.toString()) { %>
                <div class="message-menu absolute -right-2 top-2">
                  <button class="menu-trigger p-1 rounded-full hover:bg-gray-200 hover:bg-opacity-50" onclick="toggleMenu(this)">
                    <svg class="h-4 w-4 text-gray-600" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"/>
                    </svg>
                  </button>
                  <div class="dropdown-menu bg-white rounded-lg shadow-lg border border-gray-200 py-1">
                    <% if (chat.msg) { %>
                      <button onclick="editGroupMessage('<%= chat._id %>')" class="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 flex items-center">
                        <svg class="h-4 w-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                        </svg>
                        Edit Message
                      </button>
                    <% } %>
                    <button onclick="deleteGroupMessage('<%= chat._id %>', 'forMe')" class="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 flex items-center">
                      <svg class="h-4 w-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                      </svg>
                      Delete for Me
                    </button>
                    <button onclick="deleteGroupMessage('<%= chat._id %>', 'forEveryone')" class="w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-red-50 flex items-center">
                      <svg class="h-4 w-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                      </svg>
                      Delete for Everyone
                    </button>
                  </div>
                </div>
              <% } %>
            </div>
          </div>
        <% }) %>
      </main>

      <!-- Group Info Panel -->
      <aside id="groupInfoPanel" class="bg-white/90 backdrop-blur-lg border-l border-secondary-200 shadow-lg">
        <div class="group-info-content">
          <div class="flex flex-col items-center text-center mb-4">
            <img src="<%= group.icon || '/group_icons/default.png' %>" class="w-20 h-20 rounded-full object-cover border-2 border-white shadow-md">
            <h2 class="text-lg font-semibold mt-2 text-secondary-900"><%= group.name %></h2>
            <p class="text-sm text-secondary-500"><%= group.members.length %> Members</p>
          </div>

          <hr class="my-4 w-full border-secondary-200">

          <!-- Members List -->
          <div class="w-full">
            <h3 class="text-sm font-semibold text-secondary-700 mb-2">Members</h3>
            <div class="members-list-container space-y-2">
              <% group.members.forEach(member => { %>
                <div class="flex items-center space-x-3 p-2 rounded-lg hover:bg-secondary-50">
                  <img src="/avatars/<%= member.avatar || 'default-avatar.png' %>" class="w-8 h-8 rounded-full object-cover">
                  <div class="flex-1">
                    <span class="text-sm text-secondary-700"><%= member.username %></span>
                    <% if (group.admin._id.toString() === member._id.toString()) { %>
                      <span class="text-xs bg-primary-100 text-primary-600 px-2 py-1 rounded-full ml-2">Admin</span>
                    <% } %>
                  </div>

                  <!-- Admin can remove members (except themselves) -->
                  <% if (group.admin._id.toString() === currentUser._id.toString() && member._id.toString() !== currentUser._id.toString()) { %>
                    <button onclick="removeMember('<%= member._id %>', '<%= member.username %>')"
                            class="text-red-500 hover:text-red-700 p-1 rounded" title="Remove Member">
                      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                      </svg>
                    </button>
                  <% } %>
                </div>
              <% }) %>
            </div>
          </div>

          <!-- Admin Options -->
          <% if (group.admin._id.toString() === currentUser._id.toString()) { %>
            <hr class="my-4 w-full border-secondary-200">
            <div class="w-full space-y-3">
              <h3 class="text-sm font-semibold text-secondary-700">Admin Options</h3>

              <!-- Add Member -->
              <div class="space-y-2">
                <select id="newMemberSelect" class="w-full px-3 py-2 bg-secondary-50 border border-secondary-200 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent text-sm">
                  <option value="">Select user to add...</option>
                </select>
                <button onclick="addMember()" class="w-full bg-green-500 hover:bg-green-600 text-white py-2 rounded-lg transition-colors text-sm font-medium">
                  Add Member
                </button>
              </div>

              <!-- Update Group Form -->
              <form action="/groups/<%= group._id %>/update" method="POST" enctype="multipart/form-data" class="w-full space-y-2">
                <input type="text" name="name" placeholder="New Group Name"
                       class="w-full px-3 py-2 bg-secondary-50 border border-secondary-200 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent text-sm">
                <input type="file" name="icon"
                       class="w-full px-3 py-2 bg-secondary-50 border border-secondary-200 rounded-lg text-sm">
                <button class="w-full bg-gradient-to-r from-primary-500 to-primary-600 hover:from-primary-600 hover:to-primary-700 text-white py-2 rounded-lg transition-all duration-200 text-sm font-medium">
                  Update Group
                </button>
              </form>

              <!-- Delete Group Option -->
              <button onclick="deleteGroup()" class="w-full bg-red-500 hover:bg-red-600 text-white py-2 rounded-lg transition-colors text-sm font-medium">
                Delete Group
              </button>
            </div>
          <% } %>

          <!-- Member Options (Exit Group) -->
          <% if (group.admin._id.toString() !== currentUser._id.toString()) { %>
            <hr class="my-4 w-full border-secondary-200">
            <div class="w-full">
              <button onclick="exitGroup()" class="w-full bg-red-500 hover:bg-red-600 text-white py-2 rounded-lg transition-colors text-sm font-medium">
                Exit Group
              </button>
            </div>
          <% } %>
        </div>
      </aside>
    </div>

    <!-- AI Suggestions Panel for Group Chat -->
    <div id="group-smart-replies-panel" class="hidden fixed bottom-24 left-0 right-0 z-50 mx-4 mb-2">
      <div class="bg-white/90 backdrop-blur-lg border border-secondary-200 rounded-xl shadow-lg p-3">
        <div class="flex items-center justify-between mb-2">
          <span class="text-xs font-medium text-gray-600">🤖 Smart Replies</span>
          <button onclick="hideGroupSmartReplies()" class="text-gray-400 hover:text-gray-600">
            <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
        <div id="group-smart-replies-content" class="space-y-2">
          <!-- Smart reply buttons will be inserted here -->
        </div>
      </div>
    </div>

    <!-- Message Input -->
    <footer class="fixed bottom-0 left-0 right-0 bg-white/90 backdrop-blur-lg border-t border-secondary-200" style="z-index: 10;">
      <div class="p-4">
      <form id="chatForm" enctype="multipart/form-data" class="flex items-center space-x-3">
        <input type="file" name="media" class="hidden" id="mediaInput">
        <label for="mediaInput" class="cursor-pointer p-3 rounded-xl bg-secondary-100 hover:bg-secondary-200 transition">
          <svg class="h-5 w-5 text-secondary-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.172 7l-6.586 6.586a2 2 0 102.828 2.828l6.414-6.586a4 4 0 00-5.656-5.656l-6.415 6.585a6 6 0 108.486 8.486L20.5 13"></path>
          </svg>
        </label>

        <!-- Voice Message Button -->
        <button type="button" id="voice-message-btn" onclick="startGroupVoiceRecording()" class="cursor-pointer p-3 rounded-xl bg-secondary-100 hover:bg-secondary-200 transition">
          <svg class="h-5 w-5 text-secondary-600" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M7 4a3 3 0 016 0v4a3 3 0 11-6 0V4zm4 10.93A7.001 7.001 0 0017 8a1 1 0 10-2 0A5 5 0 015 8a1 1 0 00-2 0 7.001 7.001 0 006 6.93V17H6a1 1 0 100 2h8a1 1 0 100-2h-3v-2.07z" clip-rule="evenodd"></path>
          </svg>
        </button>

        <!-- AI Reply Button -->
        <button type="button" id="ai-reply-btn" onclick="generateGroupAIResponse()" class="p-2 text-gray-600 hover:text-blue-600 transition-colors duration-200" title="Generate AI Response">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
          </svg>
        </button>

        <div class="flex-1 relative">
          <textarea name="msg" placeholder="Type your message..."
                 class="w-full px-4 py-3 bg-secondary-50 border border-secondary-200 rounded-2xl focus:ring-2 focus:ring-primary-500 focus:border-transparent transition-all duration-200 pr-12 resize-none"
                 autocomplete="off" rows="1" style="min-height: 48px; overflow-y: hidden;"></textarea>
        </div>
        <button type="submit" class="inline-flex items-center justify-center w-12 h-12 bg-gradient-to-r from-primary-500 to-primary-600 hover:from-primary-600 hover:to-primary-700 text-white rounded-2xl focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-all duration-200 transform hover:scale-105 active:scale-95 shadow-lg hover:shadow-xl">
          <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
          </svg>
        </button>
      </form>
      </div>
    </footer>
  </div>

  <!-- Media Preview -->
  <div id="filePreview" class="hidden fixed bottom-20 left-0 right-0 z-20 mx-4 mb-2">
      <div class="flex items-center justify-between p-3 bg-white/90 backdrop-blur-lg border border-secondary-200 rounded-xl shadow-lg">
        <div id="previewContent" class="flex items-center space-x-3 flex-1 overflow-hidden"></div>
        <button id="removeFile" type="button" class="ml-3 p-2 rounded-full hover:bg-secondary-100 text-secondary-500 hover:text-red-500 transition-colors flex-shrink-0">
          <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
  </div>

    <!-- Voice Recording Modal (like personal chats) -->
    <div id="voice-recording-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
      <div class="bg-white rounded-2xl p-6 mx-4 max-w-sm w-full">
        <div class="text-center">
          <div class="mb-4">
            <div class="w-20 h-20 bg-red-500 rounded-full mx-auto flex items-center justify-center animate-pulse">
              <svg class="h-10 w-10 text-white" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M7 4a3 3 0 016 0v4a3 3 0 11-6 0V4zm4 10.93A7.001 7.001 0 0017 8a1 1 0 10-2 0A5 5 0 015 8a1 1 0 00-2 0 7.001 7.001 0 006 6.93V17H6a1 1 0 100 2h8a1 1 0 100-2h-3v-2.07z" clip-rule="evenodd"></path>
              </svg>
            </div>
          </div>
          <h3 class="text-lg font-semibold text-gray-900 mb-2">Recording Voice Message</h3>
          <p class="text-sm text-gray-500 mb-4">Tap to stop recording</p>
          <div class="flex space-x-3 justify-center">
            <button onclick="stopGroupVoiceRecording()" class="bg-red-500 text-white px-6 py-2 rounded-lg hover:bg-red-600 transition-colors">
              Stop & Send
            </button>
            <button onclick="cancelGroupVoiceRecording()" class="bg-gray-500 text-white px-6 py-2 rounded-lg hover:bg-gray-600 transition-colors">
              Cancel
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- AI Summary Modal -->
    <div id="ai-summary-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
      <div class="bg-white rounded-2xl p-6 mx-4 max-w-lg w-full max-h-[80vh] overflow-y-auto">
        <div class="flex justify-between items-center mb-4">
          <h3 class="text-lg font-semibold text-gray-900">🤖 AI Summary</h3>
          <button onclick="closeGroupAISummary()" class="text-gray-400 hover:text-gray-600">
            <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
        <div id="ai-summary-content" class="text-sm text-gray-700 leading-relaxed whitespace-pre-line">
          <!-- Summary content will be inserted here -->
        </div>
        <div id="ai-summary-loading" class="text-center py-4">
          <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600 mx-auto"></div>
          <p class="text-sm text-gray-500 mt-2">Generating comprehensive summary...</p>
        </div>
        <div id="ai-summary-actions" class="hidden mt-4 flex space-x-2">
          <button id="copy-summary-btn" onclick="copySummaryToClipboard()" 
                  class="flex-1 bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg text-sm transition-colors">
            📋 Copy Summary
          </button>
          <button id="watch-video-btn" onclick="openVideoLink()" 
                  class="flex-1 bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-lg text-sm transition-colors hidden">
            📺 Watch Video
          </button>
        </div>
      </div>
    </div>

    <!-- Full-Screen Media Preview Modal -->
    <div id="mediaPreviewModal" class="hidden fixed inset-0 bg-black bg-opacity-90 z-50 flex items-center justify-center">
      <div class="relative max-w-screen-lg max-h-screen-lg w-full h-full flex items-center justify-center p-4">
          <!-- Close Button -->
          <button onclick="closeMediaPreview()"
                  class="absolute top-4 right-4 z-60 bg-black bg-opacity-50 text-white p-2 rounded-full hover:bg-opacity-70 transition-colors">
              <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
          </button>

          <!-- Media Content Container -->
          <div id="previewMediaContainer" class="flex items-center justify-center w-full h-full">
              <!-- Content will be dynamically inserted here -->
          </div>

          <!-- Download Button -->
          <button id="downloadMediaBtn" onclick="downloadMedia()"
                  class="absolute bottom-4 right-4 z-60 bg-primary-500 hover:bg-primary-600 text-white px-4 py-2 rounded-lg transition-colors flex items-center space-x-2">
              <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3M3 17V7a2 2 0 012-2h6l2 2h6a2 2 0 012 2v10a2 2 0 01-2 2H5a2 2 0 01-2-2z"></path>
              </svg>
              <span>Download</span>
          </button>
      </div>
  </div>

  <script src="/socket.io/socket.io.js"></script>
  <script src="/js/notifications.js"></script>
  <script>
    // Initialize socket and group chat variables
    const groupChatSocket = io();
    const groupId = "<%= group._id %>";
    const currentUserId = "<%= currentUser._id %>";
    const currentUsername = "<%= currentUser.username %>";
    const groupTypingIndicator = document.getElementById('groupTypingIndicator');
    const groupTypingText = document.getElementById('groupTypingText');
    const typingUsers = new Set();
    let groupTypingTimer;
    let isGroupTyping = false;
    let selectedFile = null;

    groupChatSocket.emit('joinGroup', groupId);

    // Initialize notification manager
    if (window.notificationManager) {
        window.notificationManager.setSocket(groupChatSocket, currentUserId);
    }

    // Request notification permission explicitly
    if ('Notification' in window && Notification.permission === 'default') {
        Notification.requestPermission().then(permission => {
            console.log('Notification permission:', permission);
        });
    }

    const form = document.getElementById('chatForm');
    const chatBox = document.getElementById('chatBox');
    const mediaInput = document.getElementById('mediaInput');
    const filePreview = document.getElementById('filePreview');
    const previewContent = document.getElementById('previewContent');
    const removeFile = document.getElementById('removeFile');
    const messageInput = form.querySelector('textarea[name="msg"]');

    function scrollToBottom() {
      chatBox.scrollTop = chatBox.scrollHeight;
    }

    function toggleGroupInfo() {
      document.getElementById('groupInfoPanel').classList.toggle('open');
    }

    function escapeHtml(text) {
      if (!text) return '';
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }

    // Format file size utility
    function formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    // Show media preview function (fixed from personal chat)
    function showMediaPreview(file) {
        console.log('Showing media preview for:', file.name, file.type);

        if (!filePreview || !previewContent) {
            console.error('Preview elements not found');
            return;
        }

        // Clear previous preview
        previewContent.innerHTML = '';

        try {
            if (file.type.startsWith('image/')) {
                const img = document.createElement('img');
                img.src = URL.createObjectURL(file);
                img.className = 'max-h-32 max-w-full rounded object-contain border border-secondary-200';
                img.alt = file.name;
                img.onload = function() {
                    URL.revokeObjectURL(this.src);
                };

                const imgContainer = document.createElement('div');
                imgContainer.className = 'flex items-center space-x-3';
                imgContainer.appendChild(img);

                const textDiv = document.createElement('div');
                textDiv.innerHTML = `
                    <p class="text-sm font-medium text-secondary-900">${escapeHtml(file.name)}</p>
                    <p class="text-xs text-secondary-500">Image • ${formatFileSize(file.size)}</p>
                `;
                imgContainer.appendChild(textDiv);
                previewContent.appendChild(imgContainer);

            } else if (file.type.startsWith('video/')) {
                const video = document.createElement('video');
                video.src = URL.createObjectURL(file);
                video.className = 'max-h-32 max-w-40 rounded border border-secondary-200';
                video.controls = true;
                video.muted = true;
                video.preload = 'metadata';

                const videoContainer = document.createElement('div');
                videoContainer.className = 'flex items-center space-x-3';
                videoContainer.appendChild(video);

                const textDiv = document.createElement('div');
                textDiv.innerHTML = `
                    <p class="text-sm font-medium text-secondary-900">${escapeHtml(file.name)}</p>
                    <p class="text-xs text-secondary-500">Video • ${formatFileSize(file.size)}</p>
                `;
                videoContainer.appendChild(textDiv);
                previewContent.appendChild(videoContainer);

            } else if (file.type.startsWith('audio/')) {
                const audioDiv = document.createElement('div');
                audioDiv.className = 'flex items-center space-x-3 p-2 bg-secondary-50 rounded-lg w-full';
                audioDiv.innerHTML = `
                    <svg class="w-8 h-8 text-green-500 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M9.383 3.076A1 1 0 0110 4v12a1 1 0 01-1.617.793L4.586 14H2a1 1 0 01-1-1V7a1 1 0 011-1h2.586L8.383 3.076zM12 8a1 1 0 012 0v4a1 1 0 11-2 0V8zm4-1a1 1 0 011 1v2a1 1 0 11-2 0V8a1 1 0 011-1z"/>
                    </svg>
                    <div class="flex-1 min-w-0">
                        <p class="text-sm font-medium text-secondary-900 truncate">${escapeHtml(file.name)}</p>
                        <p class="text-xs text-secondary-500">Audio File • ${formatFileSize(file.size)}</p>
                    </div>
                `;
                previewContent.appendChild(audioDiv);

            } else {
                // Document preview
                const docDiv = document.createElement('div');
                docDiv.className = 'flex items-center space-x-3 p-2 bg-secondary-50 rounded-lg w-full';

                let iconColor = "text-blue-500";
                let fileType = "Document";

                // Different icons for different file types
                if (file.type.includes('pdf') || file.name.endsWith('.pdf')) {
                    iconColor = "text-red-500";
                    fileType = "PDF";
                } else if (file.type.includes('word') || file.name.endsWith('.doc') || file.name.endsWith('.docx')) {
                    iconColor = "text-blue-600";
                    fileType = "Word Document";
                } else if (file.type.includes('sheet') || file.name.endsWith('.xls') || file.name.endsWith('.xlsx')) {
                    iconColor = "text-green-600";
                    fileType = "Spreadsheet";
                } else if (file.type.includes('presentation') || file.name.endsWith('.ppt') || file.name.endsWith('.pptx')) {
                    iconColor = "text-orange-500";
                    fileType = "Presentation";
                } else if (file.name.endsWith('.zip') || file.name.endsWith('.rar')) {
                    iconColor = "text-yellow-500";
                    fileType = "Archive";
                }

                docDiv.innerHTML = `
                    <svg class="w-8 h-8 ${iconColor} flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
                    </svg>
                    <div class="flex-1 min-w-0">
                        <p class="text-sm font-medium text-secondary-900 truncate" title="${escapeHtml(file.name)}">${escapeHtml(file.name)}</p>
                        <p class="text-xs text-secondary-500">${fileType} • ${formatFileSize(file.size)}</p>
                    </div>
                `;
                previewContent.appendChild(docDiv);
            }

            filePreview.classList.remove('hidden');
            console.log('Media preview shown successfully');

            // Scroll to show the preview
            setTimeout(() => {
                filePreview.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
            }, 100);

        } catch (error) {
            console.error('Error creating media preview:', error);
            hideMediaPreview();
        }
    }

    // Hide media preview function
    function hideMediaPreview() {
        if (filePreview) {
            filePreview.classList.add('hidden');
        }

        if (previewContent) {
            // Clean up object URLs to prevent memory leaks
            const images = previewContent.querySelectorAll('img');
            const videos = previewContent.querySelectorAll('video');

            images.forEach(img => {
                if (img.src.startsWith('blob:')) {
                    URL.revokeObjectURL(img.src);
                }
            });

            videos.forEach(video => {
                if (video.src.startsWith('blob:')) {
                    URL.revokeObjectURL(video.src);
                }
            });

            previewContent.innerHTML = '';
        }
    }



    scrollToBottom();

    // File input change
    mediaInput.addEventListener('change', (e) => {
        const file = e.target.files[0];
        if (file) {
            selectedFile = file;
            showMediaPreview(file);
        } else {
            hideMediaPreview();
        }
    });

    // Remove file preview
    removeFile.addEventListener('click', () => {
        selectedFile = null;
        hideMediaPreview();
        mediaInput.value = '';
    });

    // Group typing detection
    messageInput.addEventListener('input', () => {
      if (!isGroupTyping) {
        isGroupTyping = true;
        groupChatSocket.emit('group typing start', {
          from: currentUserId,
          groupId: groupId,
          username: currentUsername
        });
      }

      clearTimeout(groupTypingTimer);
      groupTypingTimer = setTimeout(() => {
        isGroupTyping = false;
        groupChatSocket.emit('group typing stop', {
          from: currentUserId,
          groupId: groupId,
          username: currentUsername
        });
      }, 1000);
    });

    messageInput.addEventListener('keydown', (e) => {
      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        form.dispatchEvent(new Event('submit'));
      }
    });

    // Message form submission
    form.addEventListener('submit', function(e) {
        e.preventDefault();

        const message = messageInput.value.trim();
        if (!message && !selectedFile) return;

        const formData = new FormData();
        if (message) formData.append('msg', message);
        if (selectedFile) formData.append('media', selectedFile);

        fetch(`/groupchat/${groupId}`, {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(result => {
            if (result.success) {
                console.log('Group message sent successfully:', result);

                messageInput.value = '';
                selectedFile = null;
                hideMediaPreview();
                mediaInput.value = '';

                // Stop typing indicator
                if (groupChatSocket) {
                    groupChatSocket.emit('group typing stop', {
                        from: currentUserId,
                        groupId: groupId,
                        username: currentUsername
                    });
                }
                isGroupTyping = false;

                // Reset input height
                messageInput.style.height = 'auto';

                // Scroll to bottom to show new message
                setTimeout(() => {
                    scrollToBottom();
                }, 100);
            } else {
                console.error('Failed to send group message:', result);
                alert('Failed to send message: ' + (result.error || 'Unknown error'));
            }
        })
        .catch(error => {
            console.error('Error sending group message:', error);
            alert('Failed to send message');
        });
    });




    groupChatSocket.on('group message', msg => {
      const isMine = msg.from._id === currentUserId;
      let mediaHTML = '';

      if (msg.media) {
        const ext = msg.media ? msg.media.split('.').pop().toLowerCase() : '';
        const isImage = ['png','jpg','jpeg','gif','webp'].includes(ext);
        const isVoice = ['webm','ogg','mp3','m4a','wav'].includes(ext) || (msg.originalName && msg.originalName.startsWith('voice_')) || (msg.media && msg.media.includes('voice_'));

        if (isImage) {
          mediaHTML = `<div class="mb-2"><img src="${msg.media.startsWith('/') ? msg.media : '/' + msg.media}" class="rounded-md max-h-60 shadow cursor-pointer hover:opacity-90 transition-opacity" alt="image" onclick="openMediaPreview('${msg.media.startsWith('/') ? msg.media : '/' + msg.media}', 'image', '${msg.originalName || msg.media.split('/').pop()}')"></div>`;
        } else if (['mp4','avi','mov','wmv','flv','mkv'].includes(ext)) {
          mediaHTML = `
            <div class="mb-2">
              <div class="relative cursor-pointer group" onclick="openMediaPreview('${msg.media.startsWith('/') ? msg.media : '/' + msg.media}', 'video', '${msg.originalName || msg.media.split('/').pop()}')">
                  <video class="rounded-md max-h-60 shadow w-full" style="max-width: 100%;" preload="metadata">
                      <source src="${msg.media.startsWith('/') ? msg.media : '/' + msg.media}" type="video/${ext}">
                      Your browser does not support the video tag.
                  </video>
                  <div class="absolute inset-0 flex items-center justify-center bg-black bg-opacity-30 opacity-0 group-hover:opacity-100 transition-opacity rounded-md">
                      <div class="bg-white bg-opacity-80 rounded-full p-3">
                          <svg class="h-8 w-8 text-primary-600" fill="currentColor" viewBox="0 0 24 24">
                              <path d="M8 5v14l11-7z"/>
                          </svg>
                      </div>
                  </div>
              </div>
            </div>`;
        } else if (isVoice) {
          mediaHTML = `
            <div class="voice-message-container">
              <button class="voice-play-btn" data-audio-src="${msg.media.startsWith('/') ? msg.media : '/' + msg.media}">
                <svg class="play-icon h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.166a1 1 0 00-1.197-.773 1 1 0 00-.773 1.197l.62 4.361a1 1 0 01-.467 1.062L10 20v-8.752c0-.248.537-.484 1.2-.659l3.493-1.747Z"/>
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19v-6.752c0-.248.537-.484 1.2-.659l3.493-1.747a1 1 0 00.595-.883L14.752 11.166z"/>
                </svg>
                <svg class="pause-icon h-6 w-6 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 9v6m4-6v6m7-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
                </svg>
              </button>
              <div class="voice-progress-bar-container">
                <div class="voice-progress"></div>
              </div>
              <div class="voice-duration">0:00</div>
            </div>`;
        } else {
          const extColor = ext === 'pdf' ? 'text-red-500' :
                          ['doc','docx'].includes(ext) ? 'text-blue-600' :
                          ['xls','xlsx'].includes(ext) ? 'text-green-600' :
                          ['ppt','pptx'].includes(ext) ? 'text-orange-500' :
                          ['zip','rar'].includes(ext) ? 'text-yellow-500' : 'text-gray-600';

          mediaHTML = `
            <div class="bg-gray-100 rounded-md p-3 mb-2 shadow flex flex-col space-y-2">
              <div class="flex items-center space-x-3">
                <svg class="w-6 h-6 ${extColor}" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                  <path d="M12 2H6a2 2 0 00-2 2v16a2 2 0 002 2h12a2 2 0 002-2V8z"/>
                  <polyline points="12 2 12 8 18 8"/>
                </svg>
                <div>
                  <p class="font-semibold text-gray-800 text-sm truncate max-w-xs">${msg.originalName || msg.media.split('/').pop()}</p>
                  <p class="text-xs text-gray-500 uppercase">DOCUMENT</p>
                </div>
              </div>
              <div class="flex space-x-3 mt-1">
                <a href="${msg.media.startsWith('/') ? msg.media : '/' + msg.media}" target="_blank" class="text-xs px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600">Open</a>
                <a href="${msg.media.startsWith('/') ? msg.media : '/' + msg.media}" download="${msg.originalName || msg.media.split('/').pop()}" class="text-xs px-3 py-1 bg-green-500 text-white rounded hover:bg-green-600">Download</a>
              </div>
            </div>`;
        }
      }

      const div = document.createElement('div');
      div.className = `flex ${isMine ? 'justify-end' : 'justify-start'}`;
      div.setAttribute('data-id', msg._id);

      div.innerHTML = `
        <div class="message-container relative">
          <div class="max-w-xs lg:max-w-md px-4 py-3 rounded-2xl
                      ${isMine ? 'bg-gradient-to-r from-primary-500 to-primary-600 text-white rounded-br-md' : 'bg-white/80 backdrop-blur-lg text-secondary-900 rounded-bl-md border border-white/20'} shadow-lg">
            ${mediaHTML}
            ${msg.msg ? `
              <div class="message-text relative group">
                <p class="text-sm leading-relaxed">
                  <strong class="${isMine ? 'text-primary-100' : 'text-secondary-700'}">${msg.from.username}:</strong> 
                  ${escapeHtml(msg.msg)}
                </p>
                ${(msg.msg.length > 200 || /(?:https?:\/\/(?:www\.)?(?:youtube\.com\/watch\?v=|youtu\.be\/|vimeo\.com\/video\/|dailymotion\.com\/video\/))/.test(msg.msg)) ? `
                  <button onclick="summarizeGroupContent('${msg._id}', '${/(?:https?:\/\/(?:www\.)?(?:youtube\.com\/watch\?v=|youtu\.be\/|vimeo\.com\/video\/|dailymotion\.com\/video\/))/.test(msg.msg) ? 'video_link' : 'text'}', \`${msg.msg.replace(/'/g, "\\'").replace(/\`/g, "\\`").replace(/\n/g, "\\n")}\`)"
                          class="absolute -top-1 -right-1 opacity-0 group-hover:opacity-100 transition-all duration-200 bg-blue-500 hover:bg-blue-600 text-white text-xs px-2 py-1 rounded-full shadow-lg transform hover:scale-105"
                          title="Summarize content">
                    <svg class="w-3 h-3 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                    </svg>
                    Summarize
                  </button>
                ` : ''}
              </div>
            ` : ''}
            <div class="flex items-center justify-between mt-2">
              <span class="text-xs ${isMine ? 'text-primary-100' : 'text-secondary-500'}">
                ${new Date(msg.created_at).toLocaleTimeString('en-US', {hour: '2-digit', minute:'2-digit'})}
                ${msg.edited ? '<span class="ml-1 italic">(edited)</span>' : ''}
              </span>
            </div>
          </div>
        </div>
      `;

      chatBox.appendChild(div);
      scrollToBottom();
    });

    // Group typing indicators
    groupChatSocket.on('group user typing', ({ userId, username, isTyping }) => {
      if (userId === currentUserId) return; // Don't show typing for current user

      if (isTyping) {
        typingUsers.add(username);
      } else {
        typingUsers.delete(username);
      }

      updateGroupTypingIndicator();
    });

    function updateGroupTypingIndicator() {
      if (typingUsers.size === 0) {
        groupTypingIndicator.classList.add('hidden');
      } else {
        const userList = Array.from(typingUsers);
        let typingText = '';

        if (userList.length === 1) {
          typingText = `${userList[0]} is typing...`;
        } else if (userList.length === 2) {
          typingText = `${userList[0]} and ${userList[1]} are typing...`;
        } else {
          typingText = `${userList[0]} and ${userList.length - 1} others are typing...`;
        }

        groupTypingText.textContent = typingText;
        groupTypingIndicator.classList.remove('hidden');
        scrollToBottom();
      }
    }

    // Voice Recording Functions (like personal chats)
    let groupMediaRecorder = null;
    let groupAudioChunks = [];
    let groupVoiceStream = null;

    function startGroupVoiceRecording() {
        navigator.mediaDevices.getUserMedia({ audio: true })
            .then(function(stream) {
                groupVoiceStream = stream;
                groupMediaRecorder = new MediaRecorder(stream);
                groupAudioChunks = [];

                groupMediaRecorder.ondataavailable = function(event) {
                    if (event.data.size > 0) {
                        groupAudioChunks.push(event.data);
                    }
                };

                groupMediaRecorder.onstop = function() {
                    const audioBlob = new Blob(groupAudioChunks, { type: 'audio/webm' });
                    const audioFile = new File([audioBlob], `voice_${Date.now()}.webm`, { type: 'audio/webm' });

                    // Show preview and send
                    selectedFile = audioFile;
                    showMediaPreview(audioFile);

                    // Auto-send voice message
                    setTimeout(function() {
                        form.dispatchEvent(new Event('submit'));
                    }, 500);
                };

                groupMediaRecorder.start();
                document.getElementById('voice-recording-modal').classList.remove('hidden');
                document.body.style.overflow = 'hidden';

            })
            .catch(function(error) {
                console.error('Error starting voice recording:', error);
                alert('Could not access microphone. Please check permissions.');
            });
    }

    function stopGroupVoiceRecording() {
        if (groupMediaRecorder && groupMediaRecorder.state === 'recording') {
            groupMediaRecorder.stop();
        }

        if (groupVoiceStream) {
            groupVoiceStream.getTracks().forEach(function(track) {
                track.stop();
            });
            groupVoiceStream = null;
        }

        document.getElementById('voice-recording-modal').classList.add('hidden');
        document.body.style.overflow = 'auto';
    }

    function cancelGroupVoiceRecording() {
        if (groupMediaRecorder && groupMediaRecorder.state === 'recording') {
            groupMediaRecorder.stop();
        }

        if (groupVoiceStream) {
            groupVoiceStream.getTracks().forEach(function(track) {
                track.stop();
            });
            groupVoiceStream = null;
        }

        groupAudioChunks = [];
        document.getElementById('voice-recording-modal').classList.add('hidden');
        document.body.style.overflow = 'auto';
    }

    // Voice message playback
    document.addEventListener('click', function(e) {
        if (e.target.closest('.voice-play-btn')) {
            const btn = e.target.closest('.voice-play-btn');
            toggleVoicePlayback(btn);
        }
    });

    function toggleVoicePlayback(button) {
        const audioSrc = button.dataset.audioSrc;
        const playIcon = button.querySelector('.play-icon');
        const pauseIcon = button.querySelector('.pause-icon');
        const progressBar = button.closest('.voice-message-container').querySelector('.voice-progress');
        const durationElement = button.closest('.voice-message-container').querySelector('.voice-duration');

        let audioElement = button.closest('.voice-message-container').querySelector('audio');
        if (!audioElement) {
            audioElement = document.createElement('audio');
            audioElement.src = audioSrc;
            button.closest('.voice-message-container').appendChild(audioElement);
        }

        if (audioElement.paused) {
            // Pause any other playing audio messages
            document.querySelectorAll('.voice-play-btn').forEach(function(btn) {
                const otherAudioElement = btn.closest('.voice-message-container').querySelector('audio');
                if (otherAudioElement && otherAudioElement !== audioElement && !otherAudioElement.paused) {
                    otherAudioElement.pause();
                    const otherPlayIcon = btn.querySelector('.play-icon');
                    const otherPauseIcon = btn.querySelector('.pause-icon');
                    if (otherPlayIcon) otherPlayIcon.classList.remove('hidden');
                    if (otherPauseIcon) otherPauseIcon.classList.add('hidden');
                    btn.classList.add('bg-primary-500');
                    btn.classList.remove('bg-gray-600');
                    btn.setAttribute('title', 'Play');
                }
            });

            audioElement.play();
            if (playIcon) playIcon.classList.add('hidden');
            if (pauseIcon) pauseIcon.classList.remove('hidden');
            button.classList.add('bg-gray-600');
            button.classList.remove('bg-primary-500');
            button.setAttribute('title', 'Pause');

            audioElement.ontimeupdate = function() {
                const progressWidth = (audioElement.currentTime / audioElement.duration) * 100;
                progressBar.style.width = progressWidth + '%';
                const currentTimeMinutes = Math.floor(audioElement.currentTime / 60);
                const currentTimeSeconds = Math.floor(audioElement.currentTime % 60);
                durationElement.textContent = currentTimeMinutes + ':' + (currentTimeSeconds < 10 ? '0' : '') + currentTimeSeconds;
            };

            audioElement.onended = function() {
                if (playIcon) playIcon.classList.remove('hidden');
                if (pauseIcon) pauseIcon.classList.add('hidden');
                button.classList.add('bg-primary-500');
                button.classList.remove('bg-gray-600');
                button.setAttribute('title', 'Play');
                progressBar.style.width = '0%';
                durationElement.textContent = '0:00';
            };
        } else {
            audioElement.pause();
            if (playIcon) playIcon.classList.remove('hidden');
            if (pauseIcon) pauseIcon.classList.add('hidden');
            button.classList.add('bg-primary-500');
            button.classList.remove('bg-gray-600');
            button.setAttribute('title', 'Play');
        }
    }

    // Group Management Functions
    async function loadAvailableUsers() {
      try {
        const response = await fetch('/api/users/available-for-group/<%= group._id %>');
        const users = await response.json();
        const select = document.getElementById('newMemberSelect');

        if (select) {
          select.innerHTML = '<option value="">Select user to add...</option>';
          users.forEach(user => {
            const option = document.createElement('option');
            option.value = user._id;
            option.textContent = user.username;
            select.appendChild(option);
          });
        }
      } catch (error) {
        console.error('Error loading users:', error);
      }
    }

    async function addMember() {
      const select = document.getElementById('newMemberSelect');
      const userId = select.value;

      if (!userId) {
        alert('Please select a user to add');
        return;
      }

      try {
        const response = await fetch('/groups/<%= group._id %>/add', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ userId })
        });

        if (response.ok) {
          location.reload();
        } else {
          const error = await response.text();
          alert('Error adding member: ' + error);
        }
      } catch (error) {
        console.error('Error adding member:', error);
        alert('Error adding member');
      }
    }

    async function removeMember(userId, username) {
      if (!confirm(`Are you sure you want to remove ${username} from the group?`)) {
        return;
      }

      try {
        const response = await fetch('/groups/<%= group._id %>/remove', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ userId })
        });

        if (response.ok) {
          location.reload();
        } else {
          const error = await response.text();
          alert('Error removing member: ' + error);
        }
      } catch (error) {
        console.error('Error removing member:', error);
        alert('Error removing member');
      }
    }

    async function exitGroup() {
      if (!confirm('Are you sure you want to exit this group? You will no longer receive messages from this group.')) {
        return;
      }

      try {
        const response = await fetch('/groups/<%= group._id %>/exit', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          }
        });

        if (response.ok) {
          window.location.href = '/dashboard';
        } else {
          const error = await response.text();
          alert('Error exiting group: ' + error);
        }
      } catch (error) {
        console.error('Error exiting group:', error);
        alert('Error exiting group');
      }
    }

    async function deleteGroup() {
      if (!confirm('Are you sure you want to delete this group? This action cannot be undone and will remove the group for all members.')) {
        return;
      }

      try {
        const response = await fetch('/groups/<%= group._id %>/delete', {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json',
          }
        });

        if (response.ok) {
          alert('Group deleted successfully');
          window.location.href = '/dashboard';
        } else {
          const error = await response.json();
          alert('Error deleting group: ' + (error.error || 'Unknown error'));
        }
      } catch (error) {
        console.error('Error deleting group:', error);
        alert('Error deleting group');
      }
    }

    // Group Message Management Functions
    function toggleMenu(button) {
      const dropdown = button.nextElementSibling;
      const isShown = dropdown.classList.contains('show');

      // Close all other dropdowns
      document.querySelectorAll('.dropdown-menu').forEach(menu => {
        menu.classList.remove('show');
      });

      // Toggle current dropdown
      if (!isShown) {
        dropdown.classList.add('show');
      }
    }

    // Close dropdown when clicking outside
    document.addEventListener('click', (e) => {
      if (!e.target.closest('.message-menu')) {
        document.querySelectorAll('.dropdown-menu').forEach(menu => {
          menu.classList.remove('show');
        });
      }
    });

    async function deleteGroupMessage(messageId, deleteType) {
      if (!messageId) {
        console.error('Message ID is required');
        return;
      }

      try {
        const response = await fetch(`/groupmessage/${messageId}`, {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ deleteType })
        });

        if (response.ok) {
          // Message will be removed via socket event
          // Close dropdown after successful deletion
          document.querySelectorAll('.dropdown-menu').forEach(menu => {
            menu.classList.remove('show');
          });
        } else {
          const error = await response.json();
          alert('Error: ' + (error.error || 'Failed to delete message'));
        }
      } catch (error) {
        console.error('Delete error:', error);
        alert('Failed to delete message');
      }
    }

    function editGroupMessage(messageId) {
      if (!messageId) {
        console.error('Message ID is required');
        return;
      }

      const messageContainer = document.querySelector(`[data-id="${messageId}"]`);
      if (!messageContainer) {
        console.error('Message not found');
        return;
      }

      const messageTextDiv = messageContainer.querySelector('.message-text');
      if (!messageTextDiv) {
        console.error('Message text not found');
        return;
      }

      const currentText = messageTextDiv.querySelector('p').textContent.split(': ')[1] || '';

      // Replace message text with input
      messageTextDiv.innerHTML = `
        <input type="text" class="edit-input" value="${escapeHtml(currentText)}" onkeypress="handleGroupEditKeypress(event, '${messageId}')" />
        <div class="edit-buttons">
          <button onclick="saveGroupEdit('${messageId}')" class="px-2 py-1 bg-blue-500 text-white text-xs rounded hover:bg-blue-600">Save</button>
          <button onclick="cancelGroupEdit('${messageId}', '${escapeHtml(currentText)}')" class="px-2 py-1 bg-gray-500 text-white text-xs rounded hover:bg-gray-600">Cancel</button>
        </div>
      `;

      // Focus on input and close dropdown
      const input = messageTextDiv.querySelector('.edit-input');
      input.focus();
      input.select();

      // Close dropdown
      document.querySelectorAll('.dropdown-menu').forEach(menu => {
        menu.classList.remove('show');
      });
    }

    function handleGroupEditKeypress(event, messageId) {
      if (event.key === 'Enter') {
        event.preventDefault();
        saveGroupEdit(messageId);
      } else if (event.key === 'Escape') {
        event.preventDefault();
        const messageContainer = document.querySelector(`[data-id="${messageId}"]`);
        const messageTextDiv = messageContainer.querySelector('.message-text');
        const input = messageTextDiv.querySelector('.edit-input');
        const originalText = input.defaultValue;
        cancelGroupEdit(messageId, originalText);
      }
    }

    async function saveGroupEdit(messageId) {
      if (!messageId) {
        console.error('Message ID is required');
        return;
      }

      const messageContainer = document.querySelector(`[data-id="${messageId}"]`);
      const messageTextDiv = messageContainer.querySelector('.message-text');
      const input = messageTextDiv.querySelector('.edit-input');
      const newText = input.value.trim();

      if (!newText) {
        alert('Message cannot be empty');
        return;
      }

      try {
        const response = await fetch(`/groupmessage/${messageId}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ newMessage: newText })
        });

        if (response.ok) {
          // Message will be updated via socket event
        } else {
          const error = await response.json();
          alert('Error: ' + (error.error || 'Failed to edit message'));
          // Restore original text
          const originalText = input.defaultValue;
          cancelGroupEdit(messageId, originalText);
        }
      } catch (error) {
        console.error('Edit error:', error);
        alert('Failed to edit message');
        // Restore original text
        const originalText = input.defaultValue;
        cancelGroupEdit(messageId, originalText);
      }
    }

    function cancelGroupEdit(messageId, originalText) {
      const messageContainer = document.querySelector(`[data-id="${messageId}"]`);
      const messageTextDiv = messageContainer.querySelector('.message-text');
      const username = "<%= currentUser.username %>";
      messageTextDiv.innerHTML = `<p class="text-sm leading-relaxed"><strong class="text-primary-100">${username}:</strong> ${escapeHtml(originalText)}</p>`;
    }

    // Handle group message deletion via socket
    groupChatSocket.on('group message deleted', ({ messageId, deleteType }) => {
      try {
        const messageElement = document.querySelector(`[data-id="${messageId}"]`);
        if (messageElement) {
          messageElement.remove(); // Simply remove the element
        }
      } catch (error) {
        console.error('Error handling group message deletion:', error);
      }
    });

    // Handle group message editing via socket
    groupChatSocket.on('group message edited', (updatedMessage) => {
      try {
        const messageElement = document.querySelector(`[data-id="${updatedMessage._id}"]`);
        if (messageElement) {
          const messageTextDiv = messageElement.querySelector('.message-text');
          const timeSpan = messageElement.querySelector('.text-xs');

          if (messageTextDiv) {
            messageTextDiv.innerHTML = `<p class="text-sm leading-relaxed"><strong class="text-primary-100">${updatedMessage.from.username}:</strong> ${escapeHtml(updatedMessage.msg)}</p>`;
          }

          // Update timestamp to show edited
          if (timeSpan && !timeSpan.innerHTML.includes('(edited)')) {
            timeSpan.innerHTML += ' <span class="ml-1 italic">(edited)</span>';
          }
        }
      } catch (error) {
        console.error('Error handling group message edit:', error);
      }
    });

    // Media Preview Functions
    let currentMediaSrc = '';
    let currentMediaName = '';

    function openMediaPreview(src, type, name) {
        const modal = document.getElementById('mediaPreviewModal');
        const container = document.getElementById('previewMediaContainer');

        currentMediaSrc = src;
        currentMediaName = name || 'media';

        container.innerHTML = '';

        if (type === 'image') {
            const img = document.createElement('img');
            img.src = src;
            img.className = 'max-w-full max-h-full object-contain rounded-lg shadow-2xl';
            img.alt = name;
            container.appendChild(img);
        } else if (type === 'video') {
            const video = document.createElement('video');
            video.src = src;
            video.className = 'max-w-full max-h-full rounded-lg shadow-2xl';
            video.controls = true;
            video.autoplay = true;
            video.preload = 'metadata';
            container.appendChild(video);
        }

        modal.classList.remove('hidden');
        document.body.style.overflow = 'hidden'; // Prevent background scrolling
    }

    function closeMediaPreview() {
        const modal = document.getElementById('mediaPreviewModal');
        const container = document.getElementById('previewMediaContainer');

        // Stop any playing video
        const video = container.querySelector('video');
        if (video) {
            video.pause();
            video.currentTime = 0;
        }

        modal.classList.add('hidden');
        document.body.style.overflow = 'auto'; // Restore scrolling
        container.innerHTML = '';
        currentMediaSrc = '';
        currentMediaName = '';
    }

    function downloadMedia() {
        if (currentMediaSrc) {
            const link = document.createElement('a');
            link.href = currentMediaSrc;
            link.download = currentMediaName;
            link.target = '_blank';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }
    }

    // Close modal when clicking outside the media or pressing Escape
    document.getElementById('mediaPreviewModal').addEventListener('click', function(e) {
        if (e.target === this) {
            closeMediaPreview();
        }
    });

    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
            closeMediaPreview();
        }
    });

    // Generate AI reply function for groups
    async function generateGroupAIResponse() {
        try {
            // Get current chat messages from the screen - improved selector
            const chatMessages = [];
            const messageContainers = document.querySelectorAll('[data-id]');

            messageContainers.forEach(container => {
                const messageTextElement = container.querySelector('.message-text p.text-sm.leading-relaxed');
                if (!messageTextElement) return;

                // Extract the actual message text (remove username prefix)
                const fullText = messageTextElement.textContent.trim();
                const colonIndex = fullText.indexOf(':');
                if (colonIndex === -1) return;

                const username = fullText.substring(0, colonIndex).trim();
                const messageText = fullText.substring(colonIndex + 1).trim();

                if (messageText) {
                    const isOwn = container.classList.contains('justify-end') || 
                                 container.querySelector('.justify-end') !== null;

                    chatMessages.push({
                        from: username,
                        message: messageText,
                        isOwn: isOwn,
                        timestamp: new Date().toISOString()
                    });
                }
            });

            // Take the last 10 messages for context
            const recentMessages = chatMessages.slice(-10);

            console.log('Extracted chat messages:', recentMessages);

            if (recentMessages.length === 0) {
                alert('No text messages found to analyze');
                return;
            }

            // Show loading state
            const aiButton = event.target.closest('button');
            const originalContent = aiButton.innerHTML;
            aiButton.innerHTML = `
                <svg class="w-4 h-4 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                </svg>
            `;
            aiButton.disabled = true;

            const response = await fetch(`/api/ai/generate-group-reply/${groupId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    conversationHistory: recentMessages
                })
            });

            const data = await response.json();
            console.log('AI Response:', data);

            // Restore button state
            aiButton.innerHTML = originalContent;
            aiButton.disabled = false;

            if (data.success && data.replies && data.replies.length > 0) {
                showGroupAISuggestions(data.replies);
            } else {
                const notification = document.createElement('div');
                notification.className = 'fixed bottom-24 left-4 right-4 bg-amber-50 border border-amber-200 rounded-lg p-3 shadow-lg z-50';
                notification.innerHTML = `
                    <div class="flex items-center space-x-2">
                        <svg class="w-5 h-5 text-amber-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.5 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                        </svg>
                        <span class="text-sm text-amber-700">No suitable AI responses could be generated for this conversation context.</span>
                    </div>
                `;
                document.body.appendChild(notification);
                setTimeout(() => notification.remove(), 4000);
            }
        } catch (error) {
            console.error('Error generating group AI response:', error);
            const aiButton = event.target.closest('button');
            if (aiButton) {
                aiButton.innerHTML = `
                    <svg class="h-5 w-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path>
                    </svg>
                `;
                aiButton.disabled = false;
            }
            alert('Error generating AI response');
        }
    }

    // Show AI suggestions for group chat
    function showGroupAISuggestions(replies) {
        // Remove existing suggestions
        const existingSuggestions = document.querySelector('.ai-suggestions');
        if (existingSuggestions) {
            existingSuggestions.remove();
        }

        // Create suggestions container
        const suggestionsDiv = document.createElement('div');
        suggestionsDiv.className = 'ai-suggestions fixed bottom-24 left-4 right-4 bg-white/95 backdrop-blur-lg border border-gray-200 rounded-xl shadow-xl p-4 z-50';
        suggestionsDiv.innerHTML = `
            <div class="flex justify-between items-center mb-3">
                <div class="flex items-center space-x-2">
                    <div class="w-2 h-2 bg-blue-500 rounded-full animate-pulse"></div>
                    <h3 class="text-sm font-semibold text-gray-700">🤖 AI Suggested Replies</h3>
                </div>
                <button onclick="closeGroupAISuggestions()" class="text-gray-400 hover:text-gray-600 transition-colors">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
            <div class="space-y-2 max-h-48 overflow-y-auto">
                ${replies.map((reply, index) => `
                    <button onclick="selectGroupAIReply(\`${reply.replace(/`/g, '\\`').replace(/'/g, "\\'").replace(/\n/g, '\\n')}\`)" 
                            class="w-full text-left p-3 bg-gradient-to-r from-blue-50 to-indigo-50 hover:from-blue-100 hover:to-indigo-100 rounded-lg text-sm transition-all duration-200 transform hover:scale-[1.02] border border-blue-100 hover:border-blue-200">
                        <div class="flex items-start space-x-2">
                            <div class="w-1.5 h-1.5 bg-blue-400 rounded-full mt-2 flex-shrink-0"></div>
                            <span class="leading-relaxed">${reply}</span>
                        </div>
                    </button>
                `).join('')}
            </div>
            <div class="mt-3 pt-3 border-t border-gray-200">
                <p class="text-xs text-gray-500 text-center">💡 Click on a suggestion to use it, or close to dismiss</p>
            </div>
        `;

        document.body.appendChild(suggestionsDiv);

        // Add entrance animation
        setTimeout(() => {
            suggestionsDiv.style.transform = 'translateY(-10px)';
            suggestionsDiv.style.opacity = '1';
        }, 50);

        // Auto-remove after 30 seconds
        setTimeout(() => {
            if (document.querySelector('.ai-suggestions')) {
                suggestionsDiv.style.opacity = '0';
                suggestionsDiv.style.transform = 'translateY(10px)';
                setTimeout(() => suggestionsDiv.remove(), 300);
            }
        }, 30000);
    }

    // Select AI reply for group chat
    function selectGroupAIReply(reply) {
        const messageInput = form.querySelector('textarea[name="msg"]');
        if (messageInput) {
            messageInput.value = reply;
            messageInput.focus();

            // Auto-resize textarea to fit the selected reply
            messageInput.style.height = 'auto';
            messageInput.style.height = Math.min(messageInput.scrollHeight, 120) + 'px';

            // Add a subtle highlight effect to show the reply was selected
            messageInput.style.backgroundColor = '#eff6ff';
            setTimeout(() => {
                messageInput.style.backgroundColor = '';
            }, 1000);

            console.log('AI reply selected:', reply);
        } else {
            console.error('Message input not found');
        }

        // Close the AI suggestions panel
        closeGroupAISuggestions();
    }

    // Close AI suggestions panel
    function closeGroupAISuggestions() {
        const existingSuggestions = document.querySelector('.ai-suggestions');
        if (existingSuggestions) {
            existingSuggestions.style.opacity = '0';
            existingSuggestions.style.transform = 'translateY(10px)';
            setTimeout(() => existingSuggestions.remove(), 300);
        }
    }
  </script>
  <script src="/js/groupCall.js"></script>
</body>
</html>