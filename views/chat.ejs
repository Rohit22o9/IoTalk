<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chat with <%= otherUser.username %> - ModernChat</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="/style.css">
  <script>
    tailwind.config = {
      theme: {
        extend: {
          colors: {
            primary: {
              50: '#eff6ff', 100: '#dbeafe',
              500: '#3b82f6', 600: '#2563eb',
              700: '#1d4ed8', 800: '#1e40af', 900: '#1e3a8a',
            },
            secondary: {
              50: '#f8fafc', 100: '#f1f5f9',
              500: '#64748b', 600: '#475569',
              700: '#334155', 800: '#1e293b', 900: '#0f172a',
            }
          }
        }
      }
    }
  </script>
  <style>
    body, html {
      overflow-x: hidden;
    }
    .chat-messages {
      overflow-x: hidden;
      word-wrap: break-word;
      word-break: break-word;
    }
    
  </style>
</head>

<body class="h-screen bg-gradient-to-br from-secondary-50 via-white to-primary-50 overflow-hidden">
  <div class="h-full flex flex-col relative">
    <!-- Header -->
    <header class="bg-white/90 backdrop-blur-lg border-b border-secondary-200 px-4 py-3 flex-shrink-0">
      <div class="flex items-center space-x-4">
        <form action="/dashboard" method="GET" class="inline">
          <button type="submit" class="p-2 rounded-lg hover:bg-secondary-100 transition-colors duration-200">
            <svg class="h-5 w-5 text-secondary-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
            </svg>
          </button>
        </form>
        <div class="flex items-center space-x-3 flex-1">
          <img src="<%= otherUser.avatar || '/avatars/default-avatar.png' %>"
               alt="<%= otherUser.username %>"
               class="w-10 h-10 rounded-full object-cover border-2 border-white shadow-md">
          <div>
            <h1 class="text-lg font-semibold text-secondary-900"><%= otherUser.username %></h1>
            <p class="text-xs text-gray-500" id="typing-indicator"></p>
          </div>
        </div>
        <div class="flex space-x-2">
          <button onclick="initiateCall('audio')" class="p-3 rounded-xl bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white transition-all duration-200 transform hover:scale-105 active:scale-95 shadow-lg hover:shadow-xl" title="Audio Call">
            <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
              <path d="M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z"></path>
            </svg>
          </button>
          <button onclick="initiateCall('video')" class="p-3 rounded-xl bg-gradient-to-r from-primary-500 to-primary-600 hover:from-primary-600 hover:to-primary-700 text-white transition-all duration-200 transform hover:scale-105 active:scale-95 shadow-lg hover:shadow-xl" title="Video Call">
            <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
              <path d="M2 6a2 2 0 012-2h6a2 2 0 012 2v6a2 2 0 01-2 2H4a2 2 0 01-2-2V6zM14.553 7.106A1 1 0 0014 8v4a1 1 0 00.553.894l2 1A1 1 0 0018 13V7a1 1 0 00-1.447-.894l-2 1z"></path>
            </svg>
          </button>
        </div>
      </div>
    </header>

    <!-- Messages Container -->
    <main class="flex-1 overflow-y-auto p-4 space-y-4 chat-messages pb-24" id="messages-container">
      <!-- Typing Indicator -->
      <div id="typing-indicator-container" class="hidden flex justify-start">
        <div class="bg-white/80 backdrop-blur-lg px-4 py-2 rounded-2xl rounded-bl-md border border-white/20 shadow-lg">
          <div class="flex items-center space-x-2">
            <div class="flex space-x-1">
              <div class="w-2 h-2 bg-secondary-400 rounded-full animate-bounce"></div>
              <div class="w-2 h-2 bg-secondary-400 rounded-full animate-bounce" style="animation-delay: 0.1s"></div>
              <div class="w-2 h-2 bg-secondary-400 rounded-full animate-bounce" style="animation-delay: 0.2s"></div>
            </div>
            <span class="text-xs text-secondary-500" id="typing-text">Typing...</span>
          </div>
        </div>
      </div>

      <% chats.forEach(chat => { %>
        <% const isOwn = chat.from.toString() === currentUser._id.toString(); %>
        <% const ext = chat.media ? chat.media.split('.').pop().toLowerCase() : ''; %>
        <% const isImage = ['jpg', 'jpeg', 'png', 'gif', 'webp'].includes(ext); %>
        <% const isVideo = ['mp4', 'avi', 'mov', 'wmv', 'flv', 'mkv', 'webm'].includes(ext); %>
        <% const isAudio = ['mp3', 'wav', 'ogg', 'm4a', 'webm'].includes(ext) || (chat.originalName && chat.originalName.startsWith('voice_')) || (chat.media && chat.media.includes('voice_')); %>

        <div class="flex <%= isOwn ? 'justify-end' : 'justify-start' %>">
          <% if (isAudio && chat.media) { %>
            <div class="max-w-xs lg:max-w-md">
          <% } else { %>
            <div class="max-w-xs lg:max-w-md px-4 py-3 rounded-2xl
                        <%= isOwn ? 'bg-gradient-to-r from-primary-500 to-primary-600 text-white rounded-br-md' : 'bg-white/80 backdrop-blur-lg text-secondary-900 rounded-bl-md border border-white/20' %> shadow-lg">
          <% } %>

            <% if (chat.media) { %>
              <% if (isImage) { %>
                <div class="mb-2">
                  <img src="<%= chat.media.startsWith('/') ? chat.media : '/' + chat.media %>"
                       alt="Media" 
                       class="rounded-md max-h-60 shadow cursor-pointer hover:opacity-90 transition-opacity"
                       onclick="openMediaPreview(this.src, 'image', '<%= (chat.originalName || chat.media.split('/').pop()).replace(/'/g, '&apos;') %>')">
                </div>
              <% } else if (isVideo) { %>
                <div class="mb-2 relative group">
                  <div class="relative cursor-pointer" 
                       onclick="openMediaPreview('<%= chat.media.startsWith('/') ? chat.media : '/' + chat.media %>', 'video', '<%= (chat.originalName || chat.media.split('/').pop()).replace(/'/g, '&apos;') %>')">
                    <video class="rounded-md max-h-60 shadow w-full" style="max-width: 100%;" preload="metadata">
                      <source src="<%= chat.media.startsWith('/') ? chat.media : '/' + chat.media %>" type="video/<%= ext %>">
                      Your browser does not support the video tag.
                    </video>
                    <div class="absolute inset-0 flex items-center justify-center bg-black bg-opacity-30 opacity-0 group-hover:opacity-100 transition-opacity rounded-md">
                      <div class="bg-white bg-opacity-80 rounded-full p-3">
                        <svg class="h-8 w-8 text-primary-600" fill="currentColor" viewBox="0 0 24 24">
                          <path d="M8 5v14l11-7z"/>
                        </svg>
                      </div>
                    </div>
                  </div>
                  <button onclick="summarizeContent('<%= chat._id %>', 'video', '<%= chat.media %>'); event.stopPropagation();"
                          class="absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity bg-primary-500 text-white text-xs px-2 py-1 rounded hover:bg-primary-600">
                    üìù Summarize
                  </button>
                </div>
              <% } else if (isAudio) { %>
                <div class="voice-message-container relative group">
                  <button class="voice-play-btn" data-audio-src="<%= chat.media.startsWith('/') ? chat.media : '/' + chat.media %>">
                    <svg class="play-icon h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.166l-4.5-2.667a.5.5 0 00-.752.433v5.334a.5.5 0 00.752.433L14.752 11.166z"/>
                    </svg>
                    <svg class="pause-icon h-6 w-6 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 9v6m4-6v6"/>
                    </svg>
                  </button>
                  <div class="voice-progress-bar-container">
                    <div class="voice-progress"></div>
                  </div>
                  <div class="voice-duration">0:00</div>
                  <button onclick="summarizeContent('<%= chat._id %>', 'audio', '<%= chat.media %>')"
                          class="absolute -top-2 -right-2 opacity-0 group-hover:opacity-100 transition-opacity bg-primary-500 text-white text-xs px-2 py-1 rounded-full hover:bg-primary-600 shadow-lg">
                    üìù
                  </button>
                </div>
              <% } else { %>
                <% const extColor = ext === 'pdf' ? 'text-red-500' :
                    ['doc','docx'].includes(ext) ? 'text-blue-600' :
                    ['xls','xlsx'].includes(ext) ? 'text-green-600' :
                    ['ppt','pptx'].includes(ext) ? 'text-orange-500' :
                    ['zip','rar'].includes(ext) ? 'text-yellow-500' : 'text-gray-600';
                %>
                <div class="bg-gray-100 rounded-md p-3 mb-2 shadow flex flex-col space-y-2">
                  <div class="flex items-center space-x-3">
                    <svg class="w-6 h-6 <%= extColor %>" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                      <path d="M12 2H6a2 2 0 00-2 2v16a2 2 0 002 2h12a2 2 0 002-2V8z"/>
                      <polyline points="12 2 12 8 18 8"/>
                    </svg>
                    <div>
                      <p class="font-semibold text-gray-800 text-sm truncate max-w-xs">
                        <%= chat.originalName || chat.media.split('/').pop() %>
                      </p>
                      <p class="text-xs text-gray-500 uppercase">DOCUMENT</p>
                    </div>
                  </div>
                  <div class="flex space-x-3 mt-1">
                    <a href="<%= chat.media.startsWith('/') ? chat.media : '/' + chat.media %>" target="_blank"
                       class="text-xs px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600">Open</a>
                    <a href="<%= chat.media.startsWith('/') ? chat.media : '/' + chat.media %>" download="<%= chat.originalName || chat.media.split('/').pop() %>"
                       class="text-xs px-3 py-1 bg-green-500 text-white rounded hover:bg-green-600">Download</a>
                  </div>
                </div>
              <% } %>
            <% } %>

            <% if (chat.msg) { %>
              <div class="relative group">
                <p class="text-sm leading-relaxed"><%= chat.msg %></p>
                <% if (chat.msg.length > 200) { %>
                  <button onclick="summarizeContent('<%= chat._id %>', 'text', `<%= chat.msg.replace(/'/g, "\\'") %>`)"
                          class="absolute top-0 right-0 opacity-0 group-hover:opacity-100 transition-opacity bg-black bg-opacity-20 text-white text-xs px-2 py-1 rounded hover:bg-opacity-40">
                    üìù Summarize
                  </button>
                <% } %>
              </div>
            <% } %>

            <% if (isAudio && chat.media) { %>
              <div class="flex items-center justify-between mt-1">
                <span class="text-xs text-secondary-500">
                  <%= new Date(chat.created_at).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' }) %>
                </span>
                <% if (chat.moderationResult && chat.moderationResult.flagged) { %>
                  <span class="text-xs text-red-400" title="Message was moderated">‚ö†Ô∏è</span>
                <% } %>
              </div>
            <% } else { %>
              <div class="flex items-center justify-between mt-2">
                <span class="text-xs <%= isOwn ? 'text-primary-100' : 'text-secondary-500' %>">
                  <%= new Date(chat.created_at).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' }) %>
                </span>
                <% if (chat.moderationResult && chat.moderationResult.flagged) { %>
                  <span class="text-xs text-red-400" title="Message was moderated">‚ö†Ô∏è</span>
                <% } %>
              </div>
            <% } %>
          </div>
        </div>
      <% }); %>
    </main>

    <!-- AI Summary Modal -->
    <div id="ai-summary-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
      <div class="bg-white rounded-2xl p-6 mx-4 max-w-md w-full max-h-96 overflow-y-auto">
        <div class="flex justify-between items-center mb-4">
          <h3 class="text-lg font-semibold text-gray-900">ü§ñ AI Summary</h3>
          <button onclick="closeAISummary()" class="text-gray-400 hover:text-gray-600">
            <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
        <div id="ai-summary-content" class="text-sm text-gray-700 leading-relaxed">
          <!-- Summary content will be inserted here -->
        </div>
        <div id="ai-summary-loading" class="text-center py-4">
          <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600 mx-auto"></div>
          <p class="text-sm text-gray-500 mt-2">Generating summary...</p>
        </div>
      </div>
    </div>

    <!-- Smart Replies Panel -->
    <div id="smart-replies-panel" class="hidden fixed bottom-24 left-0 right-0 z-50 mx-4 mb-2">
      <div class="bg-white/90 backdrop-blur-lg border border-secondary-200 rounded-xl shadow-lg p-3">
        <div class="flex items-center justify-between mb-2">
          <span class="text-xs font-medium text-gray-600">ü§ñ Smart Replies</span>
          <button onclick="hideSmartReplies()" class="text-gray-400 hover:text-gray-600">
            <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
        <div id="smart-replies-content" class="space-y-2">
          <!-- Smart reply buttons will be inserted here -->
        </div>
      </div>
    </div>

    <!-- Media Preview (positioned above the footer) -->
    <div id="filePreview" class="hidden fixed bottom-24 left-0 right-0 z-50 mx-4 mb-2">
      <div class="flex items-center justify-between p-3 bg-white/90 backdrop-blur-lg border border-secondary-200 rounded-xl shadow-lg">
        <div id="previewContent" class="flex items-center space-x-3 flex-1 overflow-hidden"></div>
        <button id="removeFile" type="button" class="ml-3 p-2 rounded-full hover:bg-secondary-100 text-secondary-500 hover:text-red-500 transition-colors flex-shrink-0">
          <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
    </div>

    <!-- Voice Recording Modal -->
    <div id="voice-recording-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
      <div class="bg-white rounded-2xl p-6 mx-4 max-w-sm w-full">
        <div class="text-center">
          <div class="mb-4">
            <div class="w-20 h-20 bg-red-500 rounded-full mx-auto flex items-center justify-center animate-pulse">
              <svg class="h-10 w-10 text-white" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M7 4a3 3 0 016 0v4a3 3 0 11-6 0V4zm4 10.93A7.001 7.001 0 0017 8a1 1 0 10-2 0A5 5 0 015 8a1 1 0 00-2 0 7.001 7.001 0 006 6.93V17H6a1 1 0 100 2h8a1 1 0 100-2h-3v-2.07z" clip-rule="evenodd"></path>
              </svg>
            </div>
          </div>
          <h3 class="text-lg font-semibold text-gray-900 mb-2">Recording Voice Message</h3>
          <p class="text-sm text-gray-500 mb-4">Tap to stop recording</p>
          <div class="flex space-x-3 justify-center">
            <button onclick="stopVoiceRecording()" class="bg-red-500 text-white px-6 py-2 rounded-lg hover:bg-red-600 transition-colors">
              Stop & Send
            </button>
            <button onclick="cancelVoiceRecording()" class="bg-gray-500 text-white px-6 py-2 rounded-lg hover:bg-gray-600 transition-colors">
              Cancel
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Message Input -->
    <footer class="fixed bottom-0 left-0 right-0 bg-white/90 backdrop-blur-lg border-t border-secondary-200" style="z-index: 1000;">
      <div class="p-4">
        <form id="message-form" enctype="multipart/form-data" class="flex items-center space-x-3">
          <input type="file" id="media-input" name="media" class="hidden" accept="image/*,video/*,audio/*,.pdf,.doc,.docx,.xls,.xlsx,.ppt,.pptx,.zip,.rar">
          <label for="media-input" class="cursor-pointer p-3 rounded-xl bg-secondary-100 hover:bg-secondary-200 transition">
            <svg class="h-5 w-5 text-secondary-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.172 7l-6.586 6.586a2 2 0 102.828 2.828l6.414-6.586a4 4 0 00-5.656-5.656l-6.415 6.585a6 6 0 108.486 8.486L20.5 13"></path>
            </svg>
          </label>

          <!-- Voice Message Button -->
          <button type="button" id="voice-message-btn" onclick="startVoiceRecording()" class="cursor-pointer p-3 rounded-xl bg-secondary-100 hover:bg-secondary-200 transition">
            <svg class="h-5 w-5 text-secondary-600" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M7 4a3 3 0 016 0v4a3 3 0 11-6 0V4zm4 10.93A7.001 7.001 0 0017 8a1 1 0 10-2 0A5 5 0 015 8a1 1 0 00-2 0 7.001 7.001 0 006 6.93V17H6a1 1 0 100 2h8a1 1 0 100-2h-3v-2.07z" clip-rule="evenodd"></path>
            </svg>
          </button>

          <div class="flex-1 relative">
            <textarea name="msg" id="message-input" placeholder="Type your message..."
                   class="w-full px-4 py-3 bg-secondary-50 border border-secondary-200 rounded-2xl focus:ring-2 focus:ring-primary-500 focus:border-transparent transition-all duration-200 pr-12 resize-none"
                   autocomplete="off" rows="1" style="min-height: 48px; overflow-y: hidden;"></textarea>
          </div>

          <button type="submit" class="inline-flex items-center justify-center w-12 h-12 bg-gradient-to-r from-primary-500 to-primary-600 hover:from-primary-600 hover:to-primary-700 text-white rounded-2xl focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-all duration-200 transform hover:scale-105 active:scale-95 shadow-lg hover:shadow-xl">
            <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
            </svg>
          </button>
        </form>
      </div>
    </footer>
  </div>

  <!-- Full-Screen Media Preview Modal -->
  <div id="mediaPreviewModal" class="hidden fixed inset-0 bg-black bg-opacity-90 z-50 flex items-center justify-center">
    <div class="relative max-w-screen-lg max-h-screen-lg w-full h-full flex items-center justify-center p-4">
      <!-- Close Button -->
      <button onclick="closeMediaPreview()" 
              class="absolute top-4 right-4 z-60 bg-black bg-opacity-50 text-white p-2 rounded-full hover:bg-opacity-70 transition-colors">
        <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>

      <!-- Media Content Container -->
      <div id="previewMediaContainer" class="flex items-center justify-center w-full h-full">
        <!-- Content will be dynamically inserted here -->
      </div>

      <!-- Download Button -->
      <button id="downloadMediaBtn" onclick="downloadMedia()" 
              class="absolute bottom-4 right-4 z-60 bg-primary-500 hover:bg-primary-600 text-white px-4 py-2 rounded-lg transition-colors flex items-center space-x-2">
        <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3M3 17V7a2 2 0 012-2h6l2 2h6a2 2 0 012 2v10a2 2 0 01-2 2H5a2 2 0 01-2-2z"></path>
        </svg>
        <span>Download</span>
      </button>
    </div>
  </div>

  <script src="/socket.io/socket.io.js"></script>
  <script src="/js/notifications.js"></script>
  <script>
    // Initialize chat variables
    const messagesContainer = document.getElementById('messages-container');
    const messageForm = document.getElementById('message-form');
    const msgInput = document.getElementById('message-input');
    const mediaInput = document.getElementById('media-input');
    const typingIndicator = document.getElementById('typing-indicator');
    const typingIndicatorContainer = document.getElementById('typing-indicator-container');
    const typingText = document.getElementById('typing-text');
    const filePreview = document.getElementById('filePreview');
    const previewContent = document.getElementById('previewContent');
    const removeFile = document.getElementById('removeFile');

    // Initialize socket only if not already initialized
    let socket;
    if (typeof window.chatSocket === 'undefined') {
      socket = io();
      window.chatSocket = socket;
    } else {
      socket = window.chatSocket;
    }

    const currentUserId = '<%= currentUser._id %>';
    const otherUserId = '<%= otherUser._id %>';
    const currentUsername = '<%= currentUser.username %>';
    const roomId = [currentUserId, otherUserId].sort().join('_');

    // Join room and set user online when socket connects
    if (socket) {
        socket.emit('userOnline', currentUserId);
        socket.emit('joinRoom', roomId);
    }

    // Personal call functionality
    let currentCall = null;
    let localStream = null;
    let peerConnection = null;

    // Initialize call functionality
    function initiateCall(type) {
        fetch('/call/initiate', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                receiverId: otherUserId,
                type: type
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                currentCall = {
                    callId: data.callId,
                    type: type,
                    isInitiator: true
                };
                showCallInterface(type);
            } else {
                alert(data.error || 'Failed to initiate call');
            }
        })
        .catch(error => {
            console.error('Error initiating call:', error);
            alert('Failed to initiate call');
        });
    }

    // Listen for incoming calls
    socket.on('incoming-call', (data) => {
        showIncomingCallNotification(data);
    });

    // Listen for call responses
    socket.on('call-accepted', (data) => {
        if (currentCall && currentCall.callId === data.callId) {
            console.log('Call accepted by', data.receiver.username);
        }
    });

    socket.on('call-declined', (data) => {
        if (currentCall && currentCall.callId === data.callId) {
            alert('Call declined');
            endCall();
        }
    });

    socket.on('call-ended', (data) => {
        if (currentCall && currentCall.callId === data.callId) {
            endCall();
        }
    });

    socket.on('call-timeout', (data) => {
        if (currentCall && currentCall.callId === data.callId) {
            alert('Call timeout - no response');
            endCall();
        }
    });

    socket.on('call-cancelled', (data) => {
        hideCallNotification();
    });

    function showIncomingCallNotification(data) {
        const notification = document.createElement('div');
        notification.id = 'incoming-call-notification';
        notification.className = 'fixed top-4 left-1/2 transform -translate-x-1/2 bg-white p-6 rounded-lg shadow-xl border z-50 max-w-md';

        notification.innerHTML = `
            <div class="text-center">
                <div class="mb-4">
                    <img src="${data.caller.avatar || '/avatars/default-avatar.png'}" alt="${data.caller.username}" class="w-16 h-16 rounded-full mx-auto mb-2">
                    <h3 class="text-lg font-semibold">${data.caller.username}</h3>
                    <p class="text-gray-600">Incoming ${data.type} call</p>
                </div>
                <div class="flex justify-center space-x-4">
                    <button onclick="acceptCall('${data.callId}', '${data.type}')" 
                            class="bg-green-500 text-white px-6 py-2 rounded-lg hover:bg-green-600">
                        Accept
                    </button>
                    <button onclick="declineCall('${data.callId}')" 
                            class="bg-red-500 text-white px-6 py-2 rounded-lg hover:bg-red-600">
                        Decline
                    </button>
                </div>
            </div>
        `;

        document.body.appendChild(notification);
    }

    function acceptCall(callId, type) {
        fetch(`/call/${callId}/respond`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ action: 'accept' })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                currentCall = {
                    callId: callId,
                    type: type,
                    isInitiator: false
                };
                showCallInterface(type);
                hideCallNotification();
            }
        })
        .catch(error => {
            console.error('Error accepting call:', error);
        });
    }

    function declineCall(callId) {
        fetch(`/call/${callId}/respond`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ action: 'decline' })
        })
        .then(() => {
            hideCallNotification();
        })
        .catch(error => {
            console.error('Error declining call:', error);
        });
    }

    function hideCallNotification() {
        const notification = document.getElementById('incoming-call-notification');
        if (notification) {
            notification.remove();
        }
    }

    async function showCallInterface(type) {
        try {
            // Get user media
            const constraints = {
                audio: true,
                video: type === 'video'
            };
            localStream = await navigator.mediaDevices.getUserMedia(constraints);

            const callInterface = document.createElement('div');
            callInterface.id = 'call-interface';
            callInterface.className = 'fixed inset-0 bg-gray-900 z-50 flex flex-col';

            callInterface.innerHTML = `
                <div class="flex-1 flex justify-center items-center p-4">
                    <div class="text-center text-white">
                        <img src="<%= otherUser.avatar || '/avatars/default-avatar.png' %>" alt="<%= otherUser.username %>" class="w-32 h-32 rounded-full mx-auto mb-4">
                        <h2 class="text-2xl font-semibold"><%= otherUser.username %></h2>
                        <p class="text-gray-300">${type === 'video' ? 'Video' : 'Audio'} Call</p>
                        ${type === 'video' ? `
                            <div class="mt-8 flex justify-center space-x-4">
                                <video id="local-video" autoplay muted class="w-64 h-48 bg-gray-800 rounded-lg"></video>
                                <video id="remote-video" autoplay class="w-64 h-48 bg-gray-800 rounded-lg"></video>
                            </div>
                        ` : ''}
                    </div>
                </div>
                <div class="bg-gray-800 p-4 flex justify-center space-x-4">
                    <button id="toggle-audio" class="bg-gray-600 text-white p-3 rounded-full hover:bg-gray-700">
                        <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M7 4a3 3 0 016 0v4a3 3 0 11-6 0V4z" clip-rule="evenodd"></path>
                            <path d="M5.5 9.643a.75.75 0 00-1.5 0V10c0 3.06 2.29 5.585 5.25 5.954V17.5h-1.5a.75.75 0 000 1.5h4.5a.75.75 0 000-1.5H10.5v-1.546A6.001 6.001 0 0016 10v-.357a.75.75 0 00-1.5 0V10a4.5 4.5 0 01-9 0v-.357z"></path>
                        </svg>
                    </button>
                    ${type === 'video' ? `
                        <button id="toggle-video" class="bg-gray-600 text-white p-3 rounded-full hover:bg-gray-700">
                            <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20">
                                <path d="M2 6a2 2 0 012-2h6a2 2 0 012 2v6a2 2 0 01-2 2H4a2 2 0 01-2-2V6zM14.553 7.106A1 1 0 0014 8v4a1 1 0 00.553.894l2 1A1 1 0 0018 13V7a1 1 0 00-1.447-.894l-2 1z"></path>
                            </svg>
                        </button>
                    ` : ''}
                    <button id="end-call" onclick="endCall()" class="bg-red-500 text-white p-3 rounded-full hover:bg-red-600">
                        <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M18 10c0 3.866-3.582 7-8 7s-8-3.134-8-7 3.582-7 8-7 8 3.134 8 7zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
                        </svg>
                    </button>
                </div>
            `;

            document.body.appendChild(callInterface);

            // Set local video stream
            if (type === 'video') {
                const localVideo = document.getElementById('local-video');
                localVideo.srcObject = localStream;
            }

            // Add event listeners for controls
            document.getElementById('toggle-audio').addEventListener('click', toggleAudio);
            if (type === 'video') {
                document.getElementById('toggle-video').addEventListener('click', toggleVideo);
            }

        } catch (error) {
            console.error('Error accessing media devices:', error);
            alert('Could not access camera/microphone');
        }
    }

    function toggleAudio() {
        if (localStream) {
            const audioTrack = localStream.getAudioTracks()[0];
            if (audioTrack) {
                audioTrack.enabled = !audioTrack.enabled;
                const button = document.getElementById('toggle-audio');
                button.classList.toggle('bg-red-500', !audioTrack.enabled);
            }
        }
    }

    function toggleVideo() {
        if (localStream) {
            const videoTrack = localStream.getVideoTracks()[0];
            if (videoTrack) {
                videoTrack.enabled = !videoTrack.enabled;
                const button = document.getElementById('toggle-video');
                button.classList.toggle('bg-red-500', !videoTrack.enabled);
            }
        }
    }

    function endCall() {
        if (currentCall) {
            fetch(`/call/${currentCall.callId}/end`, {
                method: 'POST'
            }).catch(error => {
                console.error('Error ending call:', error);
            });
        }

        // Clean up
        if (localStream) {
            localStream.getTracks().forEach(track => track.stop());
            localStream = null;
        }

        if (peerConnection) {
            peerConnection.close();
            peerConnection = null;
        }

        const callInterface = document.getElementById('call-interface');
        if (callInterface) {
            callInterface.remove();
        }

        currentCall = null;
    }

    // Voice recording functionality
    let mediaRecorder;
    let audioChunks = [];

    async function startVoiceRecording() {
        try {
            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
            mediaRecorder = new MediaRecorder(stream);
            audioChunks = [];

            mediaRecorder.ondataavailable = (event) => {
                audioChunks.push(event.data);
            };

            mediaRecorder.onstop = async () => {
                const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
                const fileName = `voice_${Date.now()}.webm`;
                const file = new File([audioBlob], fileName, { type: 'audio/webm' });
                
                // Create FormData and send
                const formData = new FormData();
                formData.append('media', file);
                
                try {
                    const response = await fetch(`/chat/${otherUserId}`, {
                        method: 'POST',
                        body: formData
                    });
                    
                    const result = await response.json();
                    if (result.success) {
                        console.log('Voice message sent successfully:', result);
                    } else {
                        console.error('Failed to send voice message:', result.error);
                    }
                } catch (error) {
                    console.error('Error sending voice message:', error);
                }
                
                // Clean up
                stream.getTracks().forEach(track => track.stop());
            };

            mediaRecorder.start();
            document.getElementById('voice-recording-modal').classList.remove('hidden');
        } catch (error) {
            console.error('Error starting voice recording:', error);
            alert('Could not access microphone');
        }
    }

    function stopVoiceRecording() {
        if (mediaRecorder && mediaRecorder.state === 'recording') {
            mediaRecorder.stop();
        }
        document.getElementById('voice-recording-modal').classList.add('hidden');
    }

    function cancelVoiceRecording() {
        if (mediaRecorder && mediaRecorder.state === 'recording') {
            mediaRecorder.stop();
        }
        audioChunks = [];
        document.getElementById('voice-recording-modal').classList.add('hidden');
    }

    // Voice message playback functionality
    function initializeVoiceMessagePlayback() {
        document.removeEventListener('click', voiceMessageClickHandler);
        document.addEventListener('click', voiceMessageClickHandler);
    }

    function voiceMessageClickHandler(event) {
        if (event.target.closest('.voice-play-btn')) {
            const button = event.target.closest('.voice-play-btn');
            const audioSrc = button.getAttribute('data-audio-src');
            const container = button.closest('.voice-message-container');
            const progressBar = container.querySelector('.voice-progress');
            const durationEl = container.querySelector('.voice-duration');
            const playIcon = button.querySelector('.play-icon');
            const pauseIcon = button.querySelector('.pause-icon');
            
            if (!button.audio) {
                button.audio = new Audio(audioSrc);
                button.audio.addEventListener('timeupdate', () => {
                    const progress = (button.audio.currentTime / button.audio.duration) * 100;
                    progressBar.style.width = progress + '%';
                    
                    const minutes = Math.floor(button.audio.currentTime / 60);
                    const seconds = Math.floor(button.audio.currentTime % 60);
                    durationEl.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
                });
                
                button.audio.addEventListener('ended', () => {
                    playIcon.classList.remove('hidden');
                    pauseIcon.classList.add('hidden');
                    progressBar.style.width = '0%';
                    const duration = Math.floor(button.audio.duration);
                    const minutes = Math.floor(duration / 60);
                    const seconds = duration % 60;
                    durationEl.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
                });
            }
            
            if (button.audio.paused) {
                button.audio.play();
                playIcon.classList.add('hidden');
                pauseIcon.classList.remove('hidden');
            } else {
                button.audio.pause();
                playIcon.classList.remove('hidden');
                pauseIcon.classList.add('hidden');
            }
        }
    }

    // Initialize voice message playback on page load
    document.addEventListener('DOMContentLoaded', function() {
        initializeVoiceMessagePlayback();
        scrollToBottom();
    });

    // Auto-scroll to bottom when new messages arrive
    function scrollToBottom() {
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    // Listen for new messages and scroll
    if (socket) {
        socket.on('chat message', function(msg) {
            // Add the new message to the chat
            const messageHtml = createMessageElement(msg);
            messagesContainer.insertAdjacentHTML('beforeend', messageHtml);
            scrollToBottom();
        });
    }

    function createMessageElement(chat) {
        const isOwn = chat.from._id === currentUserId;
        const ext = chat.media ? chat.media.split('.').pop().toLowerCase() : '';
        const isImage = ['jpg', 'jpeg', 'png', 'gif', 'webp'].includes(ext);
        const isVideo = ['mp4', 'avi', 'mov', 'wmv', 'flv', 'mkv', 'webm'].includes(ext);
        const isAudio = ['mp3', 'wav', 'ogg', 'm4a'].includes(ext) || (chat.originalName && chat.originalName.startsWith('voice_')) || (chat.media && chat.media.includes('voice_'));
        
        let mediaContent = '';
        if (chat.media) {
            const ext = chat.media.split('.').pop().toLowerCase();
            const isAudio = ['mp3', 'wav', 'ogg', 'm4a', 'webm'].includes(ext) || (chat.originalName && chat.originalName.startsWith('voice_')) || (chat.media && chat.media.includes('voice_'));
            
            if (isAudio) {
                mediaContent = `
                    <div class="mb-2">
                        <div class="voice-message-container relative group">
                            <button class="voice-play-btn" data-audio-src="${chat.media.startsWith('/') ? chat.media : '/' + chat.media}">
                                <svg class="play-icon h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.166l-4.5-2.667a.5.5 0 00-.752.433v5.334a.5.5 0 00.752.433L14.752 11.166z"/>
                                </svg>
                                <svg class="pause-icon h-5 w-5 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 9v6m4-6v6"/>
                                </svg>
                            </button>
                            <div class="voice-progress-bar-container">
                                <div class="voice-progress"></div>
                            </div>
                            <div class="voice-duration">0:00</div>
                        </div>
                    </div>
                `;
            }
        }
        
        return `
            <div class="flex ${isOwn ? 'justify-end' : 'justify-start'}">
                <div class="max-w-xs lg:max-w-md px-4 py-3 rounded-2xl ${isOwn ? 'bg-gradient-to-r from-primary-500 to-primary-600 text-white rounded-br-md' : 'bg-white/80 backdrop-blur-lg text-secondary-900 rounded-bl-md border border-white/20'} shadow-lg">
                    ${mediaContent}
                    ${chat.msg ? `<p class="text-sm leading-relaxed">${chat.msg}</p>` : ''}
                    <div class="flex items-center justify-between mt-2">
                        <span class="text-xs ${isOwn ? 'text-primary-100' : 'text-secondary-500'}">
                            ${new Date(chat.created_at).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}
                        </span>
                    </div>
                </div>
            </div>
        `;
    }

    
  </script>
</body>
</html>