<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard | ModernChat</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="/style.css">
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        primary: {
                            50: '#eff6ff',
                            100: '#dbeafe',
                            500: '#3b82f6',
                            600: '#2563eb',
                            700: '#1d4ed8',
                            800: '#1e40af',
                            900: '#1e3a8a',
                        },
                        secondary: {
                            50: '#f8fafc',
                            100: '#f1f5f9',
                            500: '#64748b',
                            600: '#475569',
                            700: '#334155',
                            800: '#1e293b',
                            900: '#0f172a',
                        }
                    }
                }
            }
        }
    </script>
</head>
<body class="min-h-screen bg-gradient-to-br from-secondary-50 via-white to-primary-50">
    <div class="absolute inset-0 overflow-hidden">
        <div class="absolute top-0 right-0 w-96 h-96 bg-primary-100 rounded-full mix-blend-multiply filter blur-3xl opacity-50 animate-blob"></div>
        <div class="absolute bottom-0 left-0 w-96 h-96 bg-secondary-100 rounded-full mix-blend-multiply filter blur-3xl opacity-50 animate-blob animation-delay-2000"></div>
    </div>

    <div class="relative min-h-screen">
        <!-- Header -->
        <header class="bg-white/80 backdrop-blur-lg border-b border-secondary-200 sticky top-0 z-10">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div class="flex justify-between items-center h-16">
                    <div class="flex items-center">
                        <div class="h-10 w-10 bg-gradient-to-r from-primary-500 to-primary-600 rounded-xl flex items-center justify-center shadow-lg">
                            <svg class="h-6 w-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
                            </svg>
                        </div>
                        <h1 class="ml-3 text-xl font-bold text-secondary-900">ModernChat</h1>
                    </div>
                    <div class="flex items-center space-x-4">
                        <div class="text-right">
                            <p class="text-sm font-medium text-secondary-900">Welcome back,</p>
                            <p class="text-xs text-secondary-600"><%= currentUser.username %></p>
                        </div>
                        <form action="/logout" method="GET" class="inline">
                            <button type="submit" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-lg text-secondary-700 bg-secondary-100 hover:bg-secondary-200">
                                <svg class="h-4 w-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path>
                                </svg>
                                Logout
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        </header>

        <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
                <!-- User Profile -->
                <div class="lg:col-span-1">
                    <div class="bg-white/70 backdrop-blur-lg rounded-2xl shadow-xl p-6 border border-white/20">
                        <div class="text-center">
                            <div class="relative inline-block">
                                <img src="/avatars/<%= currentUser.avatar || 'default-avatar.png' %>" class="w-24 h-24 rounded-full object-cover border-4 border-white shadow-lg">
                                <div class="absolute -bottom-2 -right-2 w-6 h-6 bg-green-400 border-2 border-white rounded-full"></div>
                            </div>
                            <h2 class="mt-4 text-xl font-bold text-secondary-900"><%= currentUser.username %></h2>
                            <div class="mt-4 space-y-3">
                                <div class="flex items-center justify-center text-sm text-secondary-600">
                                    <svg class="h-4 w-4 mr-2 text-secondary-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2-2v2m8 0H8m8 0v2a2 2 0 01-2 2H10a2 2 0 01-2-2V6m8 0h2a2 2 0 012 2v6a2 2 0 01-2 2H4a2 2 0 01-2-2V8a2 2 0 012-2h2"></path>
                                    </svg>
                                    <%= currentUser.profession || "Profession not set" %>
                                </div>
                                <div class="flex items-center justify-center text-sm text-secondary-600">
                                    <svg class="h-4 w-4 mr-2 text-secondary-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                    </svg>
                                    <%= currentUser.location || "Location not set" %>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Communities Section -->
                <div class="lg:col-span-2 space-y-8">
                    <div class="bg-white/70 backdrop-blur-lg rounded-2xl shadow-xl border border-white/20 overflow-hidden">
                        <div class="px-6 py-4 border-b bg-gradient-to-r from-primary-50 to-secondary-50">
                            <h3 class="text-lg font-semibold text-secondary-900">Your Communities</h3>
                            <p class="text-sm text-secondary-600 mt-1">View and manage your communities</p>
                        </div>
                        <div class="divide-y divide-secondary-100">
                            <% if (communities && communities.length > 0) { %>
                                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 p-6">
                                    <% communities.slice(0, 6).forEach(community => { %>
                                        <div class="bg-secondary-50 rounded-xl p-4 hover:bg-secondary-100 transition-colors cursor-pointer"
                                             onclick="window.location.href='/communities/<%= community._id %>'">
                                            <div class="flex items-center space-x-3">
                                                <img src="<%= community.icon || '/group_icons/default.png' %>"
                                                     alt="<%= community.name %>"
                                                     class="w-10 h-10 rounded-full object-cover border-2 border-white shadow-sm">
                                                <div class="flex-1">
                                                    <h3 class="font-medium text-secondary-900 truncate"><%= community.name %></h3>
                                                    <p class="text-sm text-secondary-500"><%= community.members.length %> members</p>
                                                </div>
                                            </div>
                                        </div>
                                    <% }) %>
                                </div>
                            <% } else { %>
                                <div class="text-center py-8">
                                    <svg class="mx-auto h-12 w-12 text-secondary-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.196-2.121M8 20H3v-2a3 3 0 015.196-2.121M13 7a4 4 0 11-8 0 4 4 0 018 0z"></path>
                                    </svg>
                                    <h3 class="mt-2 text-sm font-medium text-secondary-900">No communities yet</h3>
                                    <p class="mt-1 text-sm text-secondary-500">Join or create a community to get started.</p>
                                    <div class="mt-4">
                                        <a href="/communities/create" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700">
                                            Create Community
                                        </a>
                                    </div>
                                </div>
                            <% } %>
                        </div>
                    </div>

                    <!-- Groups List -->
                    <div class="bg-white/70 backdrop-blur-lg rounded-2xl shadow-xl border border-white/20 overflow-hidden">
                        <div class="px-6 py-4 border-b bg-gradient-to-r from-primary-50 to-secondary-50">
                            <h3 class="text-lg font-semibold text-secondary-900">Your Groups</h3>
                            <p class="text-sm text-secondary-600 mt-1">View and chat in your groups</p>
                        </div>
                        <div class="divide-y divide-secondary-100">
                            <% if (groups.length > 0) { %>
                                <% groups.forEach((group) => { %>
                                    <div class="p-6 hover:bg-white/50 transition">
                                        <div class="flex items-center justify-between">
                                            <div class="flex items-center space-x-4">
                                                <img src="<%= group.icon || '/group_icons/default.png' %>" class="w-12 h-12 rounded-full object-cover">
                                                <div>
                                                    <p class="text-base font-semibold text-secondary-900"><%= group.name %></p>
                                                    <p class="text-xs text-secondary-500"><%= group.members.length %> members</p>
                                                </div>
                                            </div>
                                            <a href="/groups/<%= group._id %>" class="px-4 py-2 rounded-lg text-white bg-gradient-to-r from-primary-500 to-primary-600 hover:from-primary-600 hover:to-primary-700">Open</a>
                                        </div>
                                    </div>
                                <% }) %>
                            <% } else { %>
                                <div class="text-center py-12 text-secondary-500">No Groups Yet</div>
                            <% } %>
                        </div>
                    </div>

                    <!-- Available Users -->
                    <div class="bg-white/70 backdrop-blur-lg rounded-2xl shadow-xl border border-white/20 overflow-hidden">
                        <div class="px-6 py-4 border-b bg-gradient-to-r from-primary-50 to-secondary-50">
                            <h3 class="text-lg font-semibold text-secondary-900">Available Users</h3>
                            <p class="text-sm text-secondary-600 mt-1">Start a conversation with any user below</p>
                        </div>
                        <div class="divide-y divide-secondary-100">
                            <% users.forEach((user) => { %>
                                <div class="p-6 hover:bg-white/50 transition" id="user-<%= user._id %>">
                                    <div class="flex items-center justify-between">
                                        <div class="flex items-center space-x-4">
                                            <div class="relative">
                                                <img src="/avatars/<%= user.avatar || 'default-avatar.png' %>" class="w-12 h-12 rounded-full object-cover border-2 border-white shadow-md">
                                                <div class="absolute -bottom-1 -right-1 w-4 h-4 border-2 border-white rounded-full status-dot" style="background-color:<%= user.online ? 'green' : 'gray' %>"></div>
                                            </div>
                                            <div class="flex-1 min-w-0">
                                                <p class="text-base font-semibold text-secondary-900 truncate"><%= user.username %></p>
                                                <% if (user.profession) { %><p class="text-sm text-secondary-600"><%= user.profession %></p><% } %>
                                                <% if (user.location) { %><p class="text-sm text-secondary-600"><%= user.location %></p><% } %>
                                            </div>
                                        </div>
                                        <form action="/startchat" method="POST">
                                            <input type="hidden" name="to" value="<%= user._id %>">
                                            <button class="px-4 py-2 rounded-lg text-white bg-gradient-to-r from-primary-500 to-primary-600">Chat</button>
                                        </form>
                                    </div>
                                </div>
                            <% }); %>
                        </div>
                        <% if (users.length === 0) { %>
                            <div class="text-center py-12 text-secondary-500">No users available</div>
                        <% } %>
                    </div>
                </div>
            </div>

            <!-- Floating Action Buttons -->
            <div class="fixed bottom-6 right-6 flex flex-col space-y-4">
                <a href="/communities/create" class="bg-gradient-to-r from-purple-500 to-purple-600 hover:from-purple-600 hover:to-purple-700 text-white rounded-full shadow-lg p-3 hover:scale-105 transform transition">
                    <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.196-2.121M8 20H3v-2a3 3 0 015.196-2.121M13 7a4 4 0 11-8 0 4 4 0 018 0z"></path>
                    </svg>
                </a>
                <a href="/groups/create" class="bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white rounded-full shadow-lg p-3 hover:scale-105 transform transition">
                    <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                    </svg>
                </a>
            </div>
        </main>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script src="/js/notifications.js"></script>
    <script>
        // Initialize Socket.IO
        const socket = io();
        const currentUserId = "<%= currentUser._id %>";

        socket.emit('userOnline', currentUserId);

        // Initialize notification manager
        if (window.notificationManager) {
            window.notificationManager.setSocket(socket, currentUserId);
        }

        // Global call handling
        socket.on('incoming-call', (data) => {
            showIncomingCallModal(data);
        });

        socket.on('incoming-group-call', (data) => {
            showIncomingGroupCallModal(data);
        });

        function showIncomingCallModal(callData) {
            // Create call modal if it doesn't exist
            let callModal = document.getElementById('global-call-modal');
            if (!callModal) {
                callModal = document.createElement('div');
                callModal.id = 'global-call-modal';
                callModal.className = 'fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50';
                callModal.innerHTML = `
                    <div class="bg-white rounded-lg max-w-md w-full mx-4 p-6 text-center">
                        <img id="modal-caller-avatar" src="" class="w-24 h-24 rounded-full mx-auto mb-4 object-cover">
                        <h3 id="modal-caller-name" class="text-xl font-semibold mb-2"></h3>
                        <p id="modal-call-type" class="text-gray-600 mb-6"></p>
                        <div class="flex justify-center space-x-4">
                            <button onclick="declineGlobalCall()" class="bg-red-500 hover:bg-red-600 text-white p-4 rounded-full">
                                <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 8l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2"/>
                                </svg>
                            </button>
                            <button onclick="acceptGlobalCall()" class="bg-green-500 hover:bg-green-600 text-white p-4 rounded-full">
                                <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"/>
                                </svg>
                            </button>
                        </div>
                    </div>
                `;
                document.body.appendChild(callModal);
            }

            // Update modal content
            document.getElementById('modal-caller-avatar').src = '/avatars/' + (callData.caller.avatar || 'default-avatar.png');
            document.getElementById('modal-caller-name').textContent = callData.caller.username;
            document.getElementById('modal-call-type').textContent = `Incoming ${callData.type} call...`;

            // Store call data globally
            window.currentIncomingCall = callData;
            callModal.style.display = 'flex';
        }

        function showIncomingGroupCallModal(callData) {
            // Similar implementation for group calls
            let callModal = document.getElementById('global-call-modal');
            if (!callModal) {
                // Create modal similar to above
                showIncomingCallModal(callData);
                return;
            }

            document.getElementById('modal-caller-avatar').src = '/group_icons/' + (callData.groupIcon || 'default.png');
            document.getElementById('modal-caller-name').textContent = callData.groupName;
            document.getElementById('modal-call-type').textContent = `${callData.caller.username} started a ${callData.type} call`;

            window.currentIncomingCall = callData;
            callModal.style.display = 'flex';
        }

        window.acceptGlobalCall = async function() {
            if (!window.currentIncomingCall) return;

            const callData = window.currentIncomingCall;
            
            try {
                // Accept the call on the server
                const response = await fetch(`/call/${callData.callId}/respond`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ action: 'accept' })
                });
                
                const result = await response.json();
                if (result.success) {
                    // Hide the modal before redirecting
                    hideGlobalCallModal();
                    
                    if (callData.groupId) {
                        // Redirect to group chat for group calls
                        window.location.href = `/groups/${callData.groupId}?autoAcceptCall=${callData.callId}&callType=${callData.type}`;
                    } else {
                        // Redirect to personal chat for individual calls
                        window.location.href = `/chat/${callData.caller.id}?autoAcceptCall=${callData.callId}&callType=${callData.type}`;
                    }
                } else {
                    alert('Failed to accept call: ' + result.error);
                    hideGlobalCallModal();
                }
            } catch (error) {
                console.error('Error accepting call:', error);
                alert('Failed to accept call');
                hideGlobalCallModal();
            }
        };

        window.declineGlobalCall = async function() {
            if (!window.currentIncomingCall) return;

            const callData = window.currentIncomingCall;
            try {
                await fetch(`/call/${callData.callId}/respond`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ action: 'decline' })
                });
            } catch (error) {
                console.error('Error declining call:', error);
            }

            hideGlobalCallModal();
        };

        window.hideGlobalCallModal = function() {
            const modal = document.getElementById('global-call-modal');
            if (modal) {
                modal.style.display = 'none';
            }
            window.currentIncomingCall = null;
        };

        // Hide modal when calls end or are cancelled
        socket.on('call-ended', () => hideGlobalCallModal());
        socket.on('call-cancelled', () => hideGlobalCallModal());
        socket.on('group-call-ended', () => hideGlobalCallModal());

        socket.on('userStatus', (data) => {
          const userElement = document.querySelector(`[data-user-id="${data.userId}"]`);
          if (userElement) {
            const statusElement = userElement.querySelector('.user-status');
            if (statusElement) {
              statusElement.textContent = data.online ? 'Online' : 'Offline';
              statusElement.className = `user-status text-xs ${data.online ? 'text-green-600' : 'text-gray-500'}`;
            }
          }
        });
    </script>
    <script>
        // Initialize socket connection
        const socket = io();
        const currentUserId = '<%= currentUser._id %>';

        socket.emit('join', currentUserId);

        // Handle chat navigation
        function handleChatNavigation(userId) {
            try {
                window.location.href = `/chat/${userId}`;
                return false;
            } catch (error) {
                console.error('Navigation error:', error);
                return true; // Allow default navigation
            }
        }
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize socket connection for notifications
            const socket = io();

            socket.emit('userOnline', '<%= currentUser._id %>');

            // Initialize notification manager
            if (window.notificationManager) {
                window.notificationManager.setSocket(socket, '<%= currentUser._id %>');
            }

            // Request notification permission
            if ('Notification' in window && Notification.permission === 'default') {
                Notification.requestPermission().then(permission => {
                    console.log('Notification permission:', permission);
                    if (permission === 'granted') {
                        window.notificationManager.showToastNotification(
                            'Notifications Enabled',
                            'You will now receive notifications for messages and calls',
                            'message'
                        );
                    }
                });
            }
        });
    </script>
</body>
</html>