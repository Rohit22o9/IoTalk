<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= group.name %> | Group Chat</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="/style.css">
  <script>
    tailwind.config = {
      theme: {
        extend: {
          colors: {
            primary: {
              50: '#eff6ff', 100: '#dbeafe',
              500: '#3b82f6', 600: '#2563eb',
              700: '#1d4ed8', 800: '#1e40af', 900: '#1e3a8a',
            },
            secondary: {
              50: '#f8fafc', 100: '#f1f5f9',
              500: '#64748b', 600: '#475569',
              700: '#334155', 800: '#1e293b', 900: '#0f172a',
            }
          }
        }
      }
    }
  </script>
  <style>
    .message-container {
      position: relative;
    }
    .message-menu {
      opacity: 0;
      transition: opacity 0.2s ease;
      pointer-events: none;
    }
    .message-container:hover .message-menu {
      opacity: 1;
      pointer-events: all;
    }
    .dropdown-menu {
      position: absolute;
      right: 0;
      top: 100%;
      z-index: 50;
      min-width: 160px;
      transform: translateY(-10px);
      opacity: 0;
      visibility: hidden;
      transition: all 0.2s ease;
    }
    .dropdown-menu.show {
      transform: translateY(0);
      opacity: 1;
      visibility: visible;
    }
    .edit-input {
      background: rgba(255, 255, 255, 0.9);
      border: 1px solid #e2e8f0;
      border-radius: 0.5rem;
      padding: 0.5rem;
      width: 100%;
      font-size: 0.875rem;
    }
    .edit-buttons {
      margin-top: 0.5rem;
      display: flex;
      gap: 0.5rem;
    }
    .deleted-message {
      opacity: 0.5;
      font-style: italic;
      background: #f3f4f6 !important;
      color: #6b7280 !important;
    }
    body, html {
      overflow-x: hidden;
    }
    .chat-messages {
      overflow-x: hidden;
      word-wrap: break-word;
      word-break: break-word;
    }
    /* Voice message styles */
    .voice-message-container {
      display: flex;
      align-items: center;
      gap: 10px;
      background: rgba(255, 255, 255, 0.8);
      backdrop-filter: blur(5px);
      padding: 8px 12px;
      border-radius: 1rem;
      max-width: 70%;
      word-break: break-word;
    }
    .voice-play-btn {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 40px;
      height: 40px;
      border-radius: 50%;
      background-color: #3b82f6;
      color: white;
      cursor: pointer;
      transition: background-color 0.2s ease;
      flex-shrink: 0;
    }
    .voice-play-btn:hover {
      background-color: #2563eb;
    }
    .voice-progress-bar-container {
      flex-grow: 1;
      height: 6px;
      background-color: rgba(255, 255, 255, 0.5);
      border-radius: 3px;
      cursor: pointer;
      position: relative;
      overflow: hidden;
    }
    .voice-progress {
      height: 100%;
      background-color: #3b82f6;
      border-radius: 3px;
      width: 0%;
    }
    .voice-duration {
      font-size: 0.75rem;
      color: #64748b;
      min-width: 40px;
      text-align: right;
      flex-shrink: 0;
    }
    .voice-record-controls {
      display: flex;
      align-items: center;
      gap: 10px;
      padding: 10px;
      background-color: rgba(255, 255, 255, 0.8);
      backdrop-filter: blur(5px);
      border-radius: 1rem;
    }
    .voice-record-btn {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 50px;
      height: 50px;
      border-radius: 50%;
      background-image: linear-gradient(to right, #3b82f6, #2563eb);
      color: white;
      cursor: pointer;
      transition: all 0.2s ease;
    }
    .voice-record-btn:hover {
      background-image: linear-gradient(to right, #2563eb, #1d4ed8);
    }
    .voice-record-btn svg {
      width: 24px;
      height: 24px;
    }
    .voice-record-preview {
      display: flex;
      align-items: center;
      gap: 15px;
      padding: 10px;
      background-color: rgba(255, 255, 255, 0.8);
      backdrop-filter: blur(5px);
      border-radius: 1rem;
    }
    .voice-timer {
      font-family: 'Courier New', Courier, monospace;
      font-size: 0.875rem;
      color: #64748b;
    }
    .voice-action-btn {
      width: 36px;
      height: 36px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: background-color 0.2s ease;
    }
    .voice-delete-btn { background-color: #f87171; color: white; }
    .voice-delete-btn:hover { background-color: #ef4444; }
    .voice-play-pause-btn { background-color: #3b82f6; color: white; }
    .voice-play-pause-btn:hover { background-color: #2563eb; }
    .voice-send-btn { background-color: #3b82f6; color: white; }
    .voice-send-btn:hover { background-color: #2563eb; }
    #groupInfoPanel {
      width: 0;
      transition: width 0.3s ease;
      overflow: hidden;
    }
    #groupInfoPanel.open {
      width: 320px;
    }
  </style>
</head>

<body class="h-screen bg-gradient-to-br from-secondary-50 via-white to-primary-50 overflow-hidden">
  <div class="h-full flex flex-col">
    <!-- Header -->
    <header class="bg-white/90 backdrop-blur-lg border-b border-secondary-200 px-4 py-3 flex-shrink-0">
      <div class="flex items-center space-x-4">
        <form action="/dashboard" method="GET" class="inline">
          <button type="submit" class="p-2 rounded-lg hover:bg-secondary-100 transition-colors duration-200">
            <svg class="h-5 w-5 text-secondary-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
            </svg>
          </button>
        </form>
        <div class="flex items-center space-x-3 cursor-pointer group-header" id="groupHeader" data-group-id="<%= group._id %>" onclick="toggleGroupInfo()">
          <img src="<%= group.icon || '/group_icons/default.png' %>" 
               alt="<%= group.name %>" 
               class="w-10 h-10 rounded-full object-cover border-2 border-white shadow-md">
          <div>
            <h1 class="text-lg font-semibold text-secondary-900"><%= group.name %></h1>
            <p class="text-xs font-medium text-gray-500"><%= group.members.length %> members</p>
          </div>
        </div>
        <!-- Call buttons will be added here by JavaScript -->
      </div>
    </header>

    <!-- Main Container -->
    <div class="flex flex-1 overflow-hidden">
      <!-- Chat Messages -->
      <main class="flex-1 overflow-y-auto p-4 space-y-4 chat-messages" id="chatBox">
        <!-- Group Typing Indicator -->
        <div id="groupTypingIndicator" class="hidden flex justify-start">
          <div class="bg-white/80 backdrop-blur-lg px-4 py-2 rounded-2xl rounded-bl-md border border-white/20 shadow-lg">
            <div class="flex items-center space-x-2">
              <div class="flex space-x-1">
                <div class="w-2 h-2 bg-secondary-400 rounded-full animate-bounce"></div>
                <div class="w-2 h-2 bg-secondary-400 rounded-full animate-bounce" style="animation-delay: 0.1s"></div>
                <div class="w-2 h-2 bg-secondary-400 rounded-full animate-bounce" style="animation-delay: 0.2s"></div>
              </div>
              <span class="text-xs text-secondary-500" id="groupTypingText">Someone is typing...</span>
            </div>
          </div>
        </div>
        <% chats.forEach(chat => { %>
          <div class="flex <%= chat.from._id.toString() === currentUser._id.toString() ? 'justify-end' : 'justify-start' %>" data-id="<%= chat._id %>">
            <div class="message-container relative">
              <div class="max-w-xs lg:max-w-md px-4 py-3 rounded-2xl 
                          <%= chat.from._id.toString() === currentUser._id.toString() 
                              ? 'bg-gradient-to-r from-primary-500 to-primary-600 text-white rounded-br-md' 
                              : 'bg-white/80 backdrop-blur-lg text-secondary-900 rounded-bl-md border border-white/20' %> shadow-lg">
                <% if (chat.media) { 
                  const ext = chat.media.split('.').pop().toLowerCase();
                  const isImage = ['png','jpg','jpeg','gif','webp'].includes(ext);
                  const isVoice = ['webm','ogg','mp3','m4a','wav'].includes(ext);
                %>
                  <% if (isImage) { %>
                    <div class="mb-2">
                      <img src="<%= chat.media.startsWith('/') ? chat.media : '/' + chat.media %>" 
                           alt="Media" class="rounded-md max-h-60 shadow">
                    </div>
                  <% } else if (isVoice) { %>
                    <div class="voice-message-container">
                      <button class="voice-play-btn" data-audio-src="<%= chat.media.startsWith('/') ? chat.media : '/' + chat.media %>">
                        <svg class="play-icon h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.166a1 1 0 00-1.197-.773 1 1 0 00-.773 1.197l.62 4.361a1 1 0 01-.467 1.062L10 20v-8.752c0-.248.537-.484 1.2-.659l3.493-1.747Z"/>
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19v-6.752c0-.248.537-.484 1.2-.659l3.493-1.747a1 1 0 00.595-.883L14.752 11.166z"/>
                        </svg>
                        <svg class="pause-icon h-6 w-6 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 9v6m4-6v6m7-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
                        </svg>
                      </button>
                      <div class="voice-progress-bar-container">
                        <div class="voice-progress"></div>
                      </div>
                      <div class="voice-duration">0:00</div>
                    </div>
                  <% } else { 
                    const extColor =
                      ext === 'pdf' ? 'text-red-500' :
                      ['doc','docx'].includes(ext) ? 'text-blue-600' :
                      ['xls','xlsx'].includes(ext) ? 'text-green-600' :
                      ['ppt','pptx'].includes(ext) ? 'text-orange-500' :
                      ['zip','rar'].includes(ext) ? 'text-yellow-500' : 'text-gray-600';
                  %>
                    <div class="bg-gray-100 rounded-md p-3 mb-2 shadow flex flex-col space-y-2">
                      <div class="flex items-center space-x-3">
                        <svg class="w-6 h-6 <%= extColor %>" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                          <path d="M12 2H6a2 2 0 00-2 2v16a2 2 0 002 2h12a2 2 0 002-2V8z"/>
                          <polyline points="12 2 12 8 18 8"/>
                        </svg>
                        <div>
                          <p class="font-semibold text-gray-800 text-sm truncate max-w-xs">
                            <%= chat.originalName || chat.media.split('/').pop() %>
                          </p>
                          <p class="text-xs text-gray-500 uppercase">DOCUMENT</p>
                        </div>
                      </div>
                      <div class="flex space-x-3 mt-1">
                        <a href="<%= chat.media.startsWith('/') ? chat.media : '/' + chat.media %>" target="_blank" 
                           class="text-xs px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600">Open</a>
                        <a href="<%= chat.media.startsWith('/') ? chat.media : '/' + chat.media %>" download 
                           class="text-xs px-3 py-1 bg-green-500 text-white rounded hover:bg-green-600">Download</a>
                      </div>
                    </div>
                  <% } %>
                <% } %>

                <% if (chat.msg) { %>
                  <div class="message-text">
                    <p class="text-sm leading-relaxed">
                      <strong class="<%= chat.from._id.toString() === currentUser._id.toString() ? 'text-primary-100' : 'text-secondary-700' %>">
                        <%= chat.from.username %>:
                      </strong>
                      <%= chat.msg %>
                    </p>
                  </div>
                <% } %>
                <div class="flex items-center justify-between mt-2">
                  <span class="text-xs <%= chat.from._id.toString() === currentUser._id.toString() ? 'text-primary-100' : 'text-secondary-500' %>">
                    <%= new Date(chat.created_at).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' }) %>
                    <% if (chat.edited) { %>
                      <span class="ml-1 italic">(edited)</span>
                    <% } %>
                  </span>
                </div>
              </div>

              <!-- Message Menu (only show for current user's messages) -->
              <% if (chat.from._id.toString() === currentUser._id.toString()) { %>
                <div class="message-menu absolute -right-2 top-2">
                  <button class="menu-trigger p-1 rounded-full hover:bg-gray-200 hover:bg-opacity-50" onclick="toggleMenu(this)">
                    <svg class="h-4 w-4 text-gray-600" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"/>
                    </svg>
                  </button>
                  <div class="dropdown-menu bg-white rounded-lg shadow-lg border border-gray-200 py-1">
                    <% if (chat.msg) { %>
                      <button onclick="editGroupMessage('<%= chat._id %>')" class="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 flex items-center">
                        <svg class="h-4 w-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                        </svg>
                        Edit Message
                      </button>
                    <% } %>
                    <button onclick="deleteGroupMessage('<%= chat._id %>', 'forMe')" class="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 flex items-center">
                      <svg class="h-4 w-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                      </svg>
                      Delete for Me
                    </button>
                    <button onclick="deleteGroupMessage('<%= chat._id %>', 'forEveryone')" class="w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-red-50 flex items-center">
                      <svg class="h-4 w-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                      </svg>
                      Delete for Everyone
                    </button>
                  </div>
                </div>
              <% } %>
            </div>
          </div>
        <% }) %>
      </main>

      <!-- Group Info Panel -->
      <aside id="groupInfoPanel" class="bg-white/90 backdrop-blur-lg border-l border-secondary-200 shadow-lg">
        <div class="p-4 flex flex-col items-center">
          <img src="<%= group.icon || '/group_icons/default.png' %>" class="w-20 h-20 rounded-full object-cover border-2 border-white shadow-md">
          <h2 class="text-lg font-semibold mt-2 text-secondary-900"><%= group.name %></h2>
          <p class="text-sm text-secondary-500"><%= group.members.length %> Members</p>
          <hr class="my-4 w-full border-secondary-200">

          <!-- Members List -->
          <div class="w-full space-y-2 max-h-40 overflow-y-auto">
            <% group.members.forEach(member => { %>
              <div class="flex items-center space-x-3 p-2 rounded-lg hover:bg-secondary-50">
                <img src="/avatars/<%= member.avatar || 'default-avatar.png' %>" class="w-8 h-8 rounded-full object-cover">
                <div class="flex-1">
                  <span class="text-sm text-secondary-700"><%= member.username %></span>
                  <% if (group.admin._id.toString() === member._id.toString()) { %>
                    <span class="text-xs bg-primary-100 text-primary-600 px-2 py-1 rounded-full ml-2">Admin</span>
                  <% } %>
                </div>

                <!-- Admin can remove members (except themselves) -->
                <% if (group.admin._id.toString() === currentUser._id.toString() && member._id.toString() !== currentUser._id.toString()) { %>
                  <button onclick="removeMember('<%= member._id %>', '<%= member.username %>')" 
                          class="text-red-500 hover:text-red-700 p-1 rounded" title="Remove Member">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                    </svg>
                  </button>
                <% } %>
              </div>
            <% }) %>
          </div>

          <!-- Admin Options -->
          <% if (group.admin._id.toString() === currentUser._id.toString()) { %>
            <hr class="my-4 w-full border-secondary-200">
            <div class="w-full space-y-3">
              <h3 class="text-sm font-semibold text-secondary-700">Admin Options</h3>

              <!-- Add Member -->
              <div class="space-y-2">
                <select id="newMemberSelect" class="w-full px-3 py-2 bg-secondary-50 border border-secondary-200 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent text-sm">
                  <option value="">Select user to add...</option>
                </select>
                <button onclick="addMember()" class="w-full bg-green-500 hover:bg-green-600 text-white py-2 rounded-lg transition-colors text-sm font-medium">
                  Add Member
                </button>
              </div>
            </div>
          <% } %>

          <!-- Member Options (Exit Group) -->
          <% if (group.admin._id.toString() !== currentUser._id.toString()) { %>
            <hr class="my-4 w-full border-secondary-200">
            <div class="w-full">
              <button onclick="exitGroup()" class="w-full bg-red-500 hover:bg-red-600 text-white py-2 rounded-lg transition-colors text-sm font-medium">
                Exit Group
              </button>
            </div>
          <% } %></div>
          <% if (group.admin._id.toString() === currentUser._id.toString()) { %>
            <form action="/groups/<%= group._id %>/update" method="POST" enctype="multipart/form-data" class="w-full mt-4 space-y-2">
              <input type="text" name="name" placeholder="New Group Name" 
                     class="w-full px-3 py-2 bg-secondary-50 border border-secondary-200 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent text-sm">
              <input type="file" name="icon" 
                     class="w-full px-3 py-2 bg-secondary-50 border border-secondary-200 rounded-lg text-sm">
              <button class="w-full bg-gradient-to-r from-primary-500 to-primary-600 hover:from-primary-600 hover:to-primary-700 text-white py-2 rounded-lg transition-all duration-200 text-sm font-medium">
                Update Group
              </button>
            </form>
          <% } %>
        </div>
      </aside>
    </div>

    <!-- Media Preview -->
    <div id="filePreview" class="hidden flex items-center justify-between p-3 bg-white/90 backdrop-blur-lg border border-secondary-200 rounded-xl mx-4 mb-2 shadow-lg">
      <div id="previewContent" class="flex items-center space-x-3 flex-1"></div>
      <button id="removeFile" type="button" class="ml-3 p-1 rounded-full hover:bg-secondary-100 text-secondary-500 hover:text-red-500 transition-colors">
        <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>

    <!-- Voice Recording Preview -->
    <div id="voiceRecordingPreview" class="hidden voice-record-preview mx-4 mb-2">
      <button id="cancelRecording" class="voice-action-btn voice-delete-btn">
        <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
      <div class="voice-timer" id="recordingTimer">0:00</div>
      <button id="playRecordedVoice" class="voice-action-btn voice-play-pause-btn">
        <svg class="play-icon h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.166a1 1 0 00-1.197-.773 1 1 0 00-.773 1.197l.62 4.361a1 1 0 01-.467 1.062L10 20v-8.752c0-.248.537-.484 1.2-.659l3.493-1.747Z"/>
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19v-6.752c0-.248.537-.484 1.2-.659l3.493-1.747a1 1 0 00.595-.883L14.752 11.166z"/>
        </svg>
        <svg class="pause-icon h-5 w-5 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 9v6m4-6v6m7-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
        </svg>
      </button>
      <div class="voice-progress-bar-container">
        <div class="voice-progress"></div>
      </div>
      <div class="voice-duration" id="recordedDuration">0:00</div>
      <button id="sendVoiceMessage" class="voice-action-btn voice-send-btn">
        <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
        </svg>
      </button>
    </div>

    <!-- Message Input -->
    <footer class="fixed bottom-0 left-0 right-0 bg-white/90 backdrop-blur-lg border-t border-secondary-200 p-4 z-10" style="z-index: 10;">
      <form id="chatForm" enctype="multipart/form-data" class="flex items-center space-x-3">
        <input type="file" name="media" class="hidden" id="mediaInput">
        <label for="mediaInput" class="cursor-pointer p-3 rounded-xl bg-secondary-100 hover:bg-secondary-200 transition">
          <svg class="h-5 w-5 text-secondary-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.172 7l-6.586 6.586a2 2 0 102.828 2.828l6.414-6.586a4 4 0 00-5.656-5.656l-6.415 6.585a6 6 0 108.486 8.486L20.5 13"></path>
          </svg>
        </label>

        <!-- Voice Message Button -->
        <button type="button" id="voiceMessageBtn" class="p-3 rounded-xl bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white transition-all duration-200 transform hover:scale-105 active:scale-95 shadow-lg hover:shadow-xl">
          <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z"></path>
          </svg>
        </button>

        <div class="flex-1 relative">
          <textarea name="msg" placeholder="Type your message..." 
                 class="w-full px-4 py-3 bg-secondary-50 border border-secondary-200 rounded-2xl focus:ring-2 focus:ring-primary-500 focus:border-transparent transition-all duration-200 pr-12 resize-none" 
                 autocomplete="off" rows="1" style="min-height: 48px; overflow-y: hidden;"></textarea>
        </div>
        <button type="submit" class="inline-flex items-center justify-center w-12 h-12 bg-gradient-to-r from-primary-500 to-primary-600 hover:from-primary-600 hover:to-primary-700 text-white rounded-2xl focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-all duration-200 transform hover:scale-105 active:scale-95 shadow-lg hover:shadow-xl">
          <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
          </svg>
        </button>
      </form>
    </footer>
  </div>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();
    const groupId = "<%= group._id %>";
    const currentUserId = "<%= currentUser._id %>";
    const groupTypingIndicator = document.getElementById('groupTypingIndicator');
    const groupTypingText = document.getElementById('groupTypingText');
    const typingUsers = new Set();
    let groupTypingTimer;
    let isGroupTyping = false;

    socket.emit('joinGroup', groupId);

    const form = document.getElementById('chatForm');
    const chatBox = document.getElementById('chatBox');
    const mediaInput = document.getElementById('mediaInput');
    const filePreview = document.getElementById('filePreview');
    const previewContent = document.getElementById('previewContent');
    const removeFile = document.getElementById('removeFile');
    const messageInput = form.querySelector('textarea[name="msg"]'); // Use textarea

    function scrollToBottom() { 
      chatBox.scrollTop = chatBox.scrollHeight; 
    }

    function toggleGroupInfo() {
      document.getElementById('groupInfoPanel').classList.toggle('open');
    }

    function escapeHtml(text) {
      if (!text) return '';
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }

    function formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    // Initialize media input handlers
    function initializeMediaHandlers() {
        const mediaInput = document.getElementById('mediaInput');
        const removeFile = document.getElementById('removeFile');
        
        if (mediaInput) {
            mediaInput.addEventListener('change', function(e) {
                const file = e.target.files[0];
                if (file) {
                    console.log('File selected:', file.name, file.type);
                    showMediaPreview(file);
                } else {
                    hideMediaPreview();
                }
            });
        } else {
            console.error('Media input element not found');
        }

        if (removeFile) {
            removeFile.addEventListener('click', () => {
                if (mediaInput) {
                    mediaInput.value = '';
                }
                hideMediaPreview();
            });
        } else {
            console.error('Remove file button not found');
        }
    }

    // Initialize media handlers
    initializeMediaHandlers();

    function showMediaPreview(file) {
        const filePreview = document.getElementById('filePreview');
        const previewContainer = document.getElementById('previewContent');

        if (!filePreview || !previewContainer) {
            console.error('Preview elements not found');
            return;
        }

        // Clear previous preview
        previewContainer.innerHTML = '';

        if (file.type.startsWith('image/')) {
            const img = document.createElement('img');
            img.src = URL.createObjectURL(file);
            img.className = 'max-h-40 max-w-full rounded object-contain';
            img.alt = file.name;
            img.onload = function() {
                URL.revokeObjectURL(this.src);
            };
            previewContainer.appendChild(img);
        } else if (file.type.startsWith('video/')) {
            const video = document.createElement('video');
            video.src = URL.createObjectURL(file);
            video.className = 'max-h-40 max-w-full rounded';
            video.controls = true;
            video.muted = true;
            video.preload = 'metadata';
            previewContainer.appendChild(video);
        } else if (file.type.startsWith('audio/')) {
            const audioDiv = document.createElement('div');
            audioDiv.className = 'flex items-center space-x-3 p-3 bg-secondary-100 rounded-lg';
            audioDiv.innerHTML = `
                <svg class="w-8 h-8 text-green-500" fill="currentColor" viewBox="0 0 20 20">
                    <path d="M9.383 3.076A1 1 0 0110 4v12a1 1 0 01-1.617.793L4.586 14H2a1 1 0 01-1-1V7a1 1 0 011-1h2.586L8.383 3.076zM12 8a1 1 0 012 0v4a1 1 0 11-2 0V8zm4-1a1 1 0 011 1v2a1 1 0 11-2 0V8a1 1 0 011-1z"/>
                </svg>
                <div class="flex-1">
                    <p class="text-sm font-medium text-secondary-900">${escapeHtml(file.name)}</p>
                    <p class="text-xs text-secondary-500">Audio File • ${formatFileSize(file.size)}</p>
                </div>
            `;
            previewContainer.appendChild(audioDiv);
        } else {
            // Document preview
            const docDiv = document.createElement('div');
            docDiv.className = 'flex items-center space-x-3 p-3 bg-secondary-100 rounded-lg';

            let iconColor = "text-blue-500";
            let fileType = "Document";

            // Different icons for different file types
            if (file.type.includes('pdf')) {
                iconColor = "text-red-500";
                fileType = "PDF";
            } else if (file.type.includes('word') || file.name.endsWith('.doc') || file.name.endsWith('.docx')) {
                iconColor = "text-blue-600";
                fileType = "Word Document";
            } else if (file.type.includes('sheet') || file.name.endsWith('.xls') || file.name.endsWith('.xlsx')) {
                iconColor = "text-green-600";
                fileType = "Spreadsheet";
            } else if (file.type.includes('presentation') || file.name.endsWith('.ppt') || file.name.endsWith('.pptx')) {
                iconColor = "text-orange-500";
                fileType = "Presentation";
            } else if (file.name.endsWith('.zip') || file.name.endsWith('.rar')) {
                iconColor = "text-yellow-500";
                fileType = "Archive";
            }

            docDiv.innerHTML = `
                <svg class="w-8 h-8 ${iconColor}" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
                </svg>
                <div class="flex-1">
                    <p class="text-sm font-medium text-secondary-900 truncate" title="${escapeHtml(file.name)}">${escapeHtml(file.name)}</p>
                    <p class="text-xs text-secondary-500">${fileType} • ${formatFileSize(file.size)}</p>
                </div>
            `;
            previewContainer.appendChild(docDiv);
        }

        filePreview.classList.remove('hidden');
        scrollToBottom();
    }

    function hideMediaPreview() {
        const filePreview = document.getElementById('filePreview');
        const previewContainer = document.getElementById('previewContent');
        
        if (filePreview) {
            filePreview.classList.add('hidden');
        }
        
        if (previewContainer) {
            // Clean up object URLs to prevent memory leaks
            const images = previewContainer.querySelectorAll('img');
            const videos = previewContainer.querySelectorAll('video');
            
            images.forEach(img => {
                if (img.src.startsWith('blob:')) {
                    URL.revokeObjectURL(img.src);
                }
            });
            
            videos.forEach(video => {
                if (video.src.startsWith('blob:')) {
                    URL.revokeObjectURL(video.src);
                }
            });
            
            previewContainer.innerHTML = '';
        }
    }

    

    scrollToBottom();

    // Group typing detection
    messageInput.addEventListener('input', () => {
      if (!isGroupTyping) {
        isGroupTyping = true;
        socket.emit('group typing start', {
          from: currentUserId,
          groupId: groupId,
          username: "<%= currentUser.username %>"
        });
      }

      clearTimeout(groupTypingTimer);
      groupTypingTimer = setTimeout(() => {
        isGroupTyping = false;
        socket.emit('group typing stop', {
          from: currentUserId,
          groupId: groupId,
          username: "<%= currentUser.username %>"
        });
      }, 1000);
    });

    messageInput.addEventListener('keydown', (e) => {
      if (e.key === 'Enter' && !e.shiftKey) { // Prevent enter from submitting the form unless shift+enter
        e.preventDefault();
        sendMessage();
      }
    });

    // Send message form submission handler
    form.addEventListener('submit', async function(e) {
        e.preventDefault();
        await sendMessage();
    });

    // Send button click handler
    const sendButton = form.querySelector('button[type="submit"]');
    if (sendButton) {
        sendButton.addEventListener('click', async function(e) {
            e.preventDefault();
            await sendMessage();
        });
    }

    async function sendMessage() {
        const messageText = messageInput.value.trim();
        const mediaFile = mediaInput ? mediaInput.files[0] : null;

        if (!messageText && !mediaFile) {
            console.log('No message or media to send');
            return;
        }

        // Stop typing when sending message
        clearTimeout(groupTypingTimer);
        if (isGroupTyping) {
            isGroupTyping = false;
            socket.emit('group typing stop', {
                from: currentUserId,
                groupId: groupId,
                username: "<%= currentUser.username %>"
            });
        }

        const formData = new FormData();
        if (messageText) formData.append('msg', messageText);
        if (mediaFile) {
            formData.append('media', mediaFile);
            console.log('Attaching media file:', mediaFile.name, mediaFile.type);
        }

        try {
            console.log('Sending group message...', { hasText: !!messageText, hasMedia: !!mediaFile });
            const response = await fetch('/groupchat/' + groupId, { 
                method: 'POST', 
                body: formData 
            });

            if (response.ok) {
                const result = await response.json();
                console.log('Group message sent successfully:', result);

                // Clear form
                messageInput.value = '';
                if (mediaInput) {
                    mediaInput.value = '';
                }
                hideMediaPreview();

                // Reset input height
                messageInput.style.height = 'auto';
            } else {
                console.error('Failed to send group message:', response.status);
                try {
                    const errorData = await response.json();
                    console.error('Error details:', errorData);
                    alert('Failed to send message: ' + (errorData.error || 'Unknown error'));
                } catch (parseError) {
                    const errorText = await response.text();
                    console.error('Error details (text):', errorText);
                    alert('Failed to send message');
                }
            }
        } catch (error) {
            console.error('Error sending group message:', error);
            alert('Error sending message: ' + error.message);
        }
    }


    socket.on('group message', msg => {
      const isMine = msg.from._id === currentUserId;
      let mediaHTML = '';

      if (msg.media) {
        const ext = msg.media.split('.').pop().toLowerCase();
        const isImage = ['png','jpg','jpeg','gif','webp'].includes(ext);
        const isVoice = ['webm','ogg','mp3','m4a','wav'].includes(ext);

        if (isImage) {
          mediaHTML = `<div class="mb-2"><img src="${msg.media}" class="rounded-md max-h-60 shadow" alt="image"></div>`;
        } else if (isVoice) {
          mediaHTML = `
            <div class="voice-message-container">
              <button class="voice-play-btn" data-audio-src="${msg.media}">
                <svg class="play-icon h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.166a1 1 0 00-1.197-.773 1 1 0 00-.773 1.197l.62 4.361a1 1 0 01-.467 1.062L10 20v-8.752c0-.248.537-.484 1.2-.659l3.493-1.747Z"/>
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19v-6.752c0-.248.537-.484 1.2-.659l3.493-1.747a1 1 0 00.595-.883L14.752 11.166z"/>
                </svg>
                <svg class="pause-icon h-6 w-6 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 9v6m4-6v6m7-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
                </svg>
              </button>
              <div class="voice-progress-bar-container">
                <div class="voice-progress"></div>
              </div>
              <div class="voice-duration">0:00</div>
            </div>`;
        } else {
          const extColor = ext === 'pdf' ? 'text-red-500' : 
                          ['doc','docx'].includes(ext) ? 'text-blue-600' :
                          ['xls','xlsx'].includes(ext) ? 'text-green-600' :
                          ['ppt','pptx'].includes(ext) ? 'text-orange-500' :
                          ['zip','rar'].includes(ext) ? 'text-yellow-500' : 'text-gray-600';

          mediaHTML = `
            <div class="bg-gray-100 rounded-md p-3 mb-2 shadow flex flex-col space-y-2">
              <div class="flex items-center space-x-3">
                <svg class="w-6 h-6 ${extColor}" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                  <path d="M12 2H6a2 2 0 00-2 2v16a2 2 0 002 2h12a2 2 0 002-2V8z"/>
                  <polyline points="12 2 12 8 18 8"/>
                </svg>
                <div>
                  <p class="font-semibold text-gray-800 text-sm truncate max-w-xs">${msg.originalName || msg.media.split('/').pop()}</p>
                  <p class="text-xs text-gray-500 uppercase">DOCUMENT</p>
                </div>
              </div>
              <div class="flex space-x-3 mt-1">
                <a href="${msg.media}" target="_blank" class="text-xs px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600">Open</a>
                <a href="${msg.media}" download="${msg.originalName || msg.media.split('/').pop()}" class="text-xs px-3 py-1 bg-green-500 text-white rounded hover:bg-green-600">Download</a>
              </div>
            </div>`;
        }
      }

      const div = document.createElement('div');
      div.className = `flex ${isMine ? 'justify-end' : 'justify-start'}`;
      div.setAttribute('data-id', msg._id);

      div.innerHTML = `
        <div class="message-container relative">
          <div class="max-w-xs lg:max-w-md px-4 py-3 rounded-2xl 
                      ${isMine ? 'bg-gradient-to-r from-primary-500 to-primary-600 text-white rounded-br-md' : 'bg-white/80 backdrop-blur-lg text-secondary-900 rounded-bl-md border border-white/20'} shadow-lg">
            ${mediaHTML}
            ${msg.msg ? `<div class="message-text"><p class="text-sm leading-relaxed"><strong class="${isMine ? 'text-primary-100' : 'text-secondary-700'}">${msg.from.username}:</strong> ${escapeHtml(msg.msg)}</p></div>` : ''}
            <div class="flex items-center justify-between mt-2">
              <span class="text-xs ${isMine ? 'text-primary-100' : 'text-secondary-500'}">
                ${new Date(msg.created_at).toLocaleTimeString('en-US', {hour: '2-digit', minute:'2-digit'})}
                ${msg.edited ? '<span class="ml-1 italic">(edited)</span>' : ''}
              </span>
            </div>
          </div>
        </div>
      `;

      chatBox.appendChild(div);
      scrollToBottom();
    });

    // Group typing indicators
    socket.on('group user typing', ({ userId, username, isTyping }) => {
      if (userId === currentUserId) return; // Don't show typing for current user

      if (isTyping) {
        typingUsers.add(username);
      } else {
        typingUsers.delete(username);
      }

      updateGroupTypingIndicator();
    });

    function updateGroupTypingIndicator() {
      if (typingUsers.size === 0) {
        groupTypingIndicator.classList.add('hidden');
      } else {
        const userList = Array.from(typingUsers);
        let typingText = '';

        if (userList.length === 1) {
          typingText = `${userList[0]} is typing...`;
        } else if (userList.length === 2) {
          typingText = `${userList[0]} and ${userList[1]} are typing...`;
        } else {
          typingText = `${userList[0]} and ${userList.length - 1} others are typing...`;
        }

        groupTypingText.textContent = typingText;
        groupTypingIndicator.classList.remove('hidden');
        scrollToBottom();
      }
    }

    // Voice Message functionality for group chat
    class VoiceMessageManager {
      constructor() {
        this.mediaRecorder = null;
        this.recordedBlob = null;
        this.isRecording = false;
        this.isPaused = false;
        this.startTime = null;
        this.timerInterval = null;
        this.audioStream = null;

        this.initializeElements();
        this.initializeEventListeners();
        this.initiateRecorder();
      }

      initializeElements() {
        this.voiceBtn = document.getElementById('voiceMessageBtn');
        this.recordingPreview = document.getElementById('voiceRecordingPreview');
        this.recordingTimerElement = document.getElementById('recordingTimer');
        this.cancelRecordingBtn = document.getElementById('cancelRecording');
        this.playRecordedBtn = document.getElementById('playRecordedVoice');
        this.sendVoiceBtn = document.getElementById('sendVoiceMessage');
        this.recordedDurationElement = document.getElementById('recordedDuration');
      }

      initializeEventListeners() {
        this.voiceBtn.addEventListener('click', () => {
          if (this.isRecording) {
            this.stopRecording();
          } else if (this.recordedBlob) {
            // If we have a recorded message, start a new recording
            this.deleteRecording();
            this.startRecording();
          } else {
            this.startRecording();
          }
        });

        this.cancelRecordingBtn.addEventListener('click', () => this.deleteRecording());
        this.sendVoiceBtn.addEventListener('click', () => this.sendVoiceMessage());
        this.playRecordedBtn.addEventListener('click', () => {
          if (this.recordedBlob) {
            this.togglePlayPause();
          }
        });

        document.addEventListener('click', (e) => {
          if (e.target.closest('.voice-play-btn')) {
            const btn = e.target.closest('.voice-play-btn');
            this.toggleVoicePlayback(btn);
          }
        });
      }

      initiateRecorder() {
        if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
          navigator.mediaDevices.getUserMedia({ audio: true })
            .then((stream) => {
              this.audioStream = stream;
              this.mediaRecorder = new MediaRecorder(stream, { mimeType: 'audio/webm' });

              this.mediaRecorder.ondataavailable = (event) => {
                if (event.data.size > 0) {
                  this.recordedBlob = event.data;
                  this.updateProgress(this.recordedBlob);
                }
              };

              this.mediaRecorder.onstop = () => {
                this.isRecording = false;
                this.isPaused = false;
                clearInterval(this.timerInterval);
                this.recordingTimerElement.textContent = '0:00';
                this.toggleRecordingUI(false);
              };

            })
            .catch((error) => {
              console.error('Error accessing microphone:', error);
              alert('Could not access microphone. Please check permissions.');
            });
        } else {
          alert('MediaRecorder not supported in this browser.');
        }
      }

      startRecording() {
        if (!this.mediaRecorder) return;

        this.recordedBlob = null;
        this.recordingPreview.classList.remove('hidden');
        this.toggleRecordingUI(true);

        this.mediaRecorder.start();
        this.isRecording = true;
        this.startTime = Date.now();
        this.startTimer();
        console.log('Recording started');
      }

      pauseRecording() {
        if (!this.isRecording || !this.mediaRecorder) return;

        if (this.isPaused) {
          this.mediaRecorder.resume();
          this.isPaused = false;
          this.startTimer();
          this.playRecordedBtn.innerHTML = `
            <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 9v6m4-6v6m7-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
            </svg>`;
          console.log('Recording resumed');
        } else {
          this.mediaRecorder.pause();
          this.isPaused = true;
          clearInterval(this.timerInterval);
          this.playRecordedBtn.innerHTML = `
            <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.166a1 1 0 00-1.197-.773 1 1 0 00-.773 1.197l.62 4.361a1 1 0 01-.467 1.062L10 20v-8.752c0-.248.537-.484 1.2-.659l3.493-1.747Z"/>
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19v-6.752c0-.248.537-.484 1.2-.659l3.493-1.747a1 1 0 00.595-.883L14.752 11.166z"/>
            </svg>`;
          console.log('Recording paused');
        }
      }

      stopRecording() {
        if (this.mediaRecorder && (this.isRecording || this.isPaused)) {
          this.mediaRecorder.stop();
          console.log('Recording stopped');
        }
      }

      deleteRecording() {
        this.stopRecording();
        this.recordedBlob = null;
        this.recordingPreview.classList.add('hidden');
        this.resetProgressAndTimer();
        console.log('Recording deleted');
      }

      toggleRecordingUI(isRecording) {
        const micIcon = this.voiceBtn.querySelector('svg');
        if (isRecording) {
          this.voiceBtn.classList.add('bg-gradient-to-r', 'from-yellow-500', 'to-orange-500');
          this.voiceBtn.classList.remove('bg-gradient-to-r', 'from-green-500', 'to-green-600');
          micIcon.innerHTML = `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5.586 15H4a1 1 0 01-1-1v-4a1 1 0 011-1h1.586l4.707-4.707C10.923 3.663 12 4.109 12 5v14c0 .891-1.077 1.337-1.707.707L5.586 15z" clip-rule="evenodd"/><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2"/>`;
          this.voiceBtn.setAttribute('title', 'Pause Recording');
          this.cancelRecordingBtn.classList.remove('hidden');
          this.playRecordedBtn.classList.add('hidden');
          this.sendVoiceBtn.classList.add('hidden');
        } else {
          this.voiceBtn.classList.remove('bg-gradient-to-r', 'from-yellow-500', 'to-orange-500');
          this.voiceBtn.classList.add('bg-gradient-to-r', 'from-green-500', 'to-green-600');
          micIcon.innerHTML = `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z"></path>`;
          this.voiceBtn.setAttribute('title', 'Start Recording');
          this.cancelRecordingBtn.classList.add('hidden');
          this.playRecordedBtn.classList.remove('hidden');
          this.sendVoiceBtn.classList.remove('hidden');
        }
      }

      startTimer() {
        this.startTime = Date.now();
        this.timerInterval = setInterval(() => {
          const elapsed = Math.floor((Date.now() - this.startTime) / 1000);
          const minutes = Math.floor(elapsed / 60);
          const seconds = elapsed % 60;
          this.recordingTimerElement.textContent = `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
          this.recordedDurationElement.textContent = `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
        }, 1000);
      }

      updateProgress(blob) {
        if (!blob) return;
        const audioUrl = URL.createObjectURL(blob);
        const audioElement = new Audio(audioUrl);
        audioElement.onloadedmetadata = () => {
          const duration = audioElement.duration;
          const progressWidth = (duration / 60) * 100;
          const voiceProgress = document.querySelectorAll('.voice-progress');
          voiceProgress.forEach(bar => bar.style.width = `${Math.min(progressWidth, 100)}%`);
          URL.revokeObjectURL(audioUrl);
        };
      }

      resetProgressAndTimer() {
        this.recordingTimerElement.textContent = '0:00';
        this.recordedDurationElement.textContent = '0:00';
        const voiceProgress = document.querySelectorAll('.voice-progress');
        voiceProgress.forEach(bar => bar.style.width = '0%');
        this.playRecordedBtn.innerHTML = `
          <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.166a1 1 0 00-1.197-.773 1 1 0 00-.773 1.197l.62 4.361a1 1 0 01-.467 1.062L10 20v-8.752c0-.248.537-.484 1.2-.659l3.493-1.747Z"/>
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19v-6.752c0-.248.537-.484 1.2-.659l3.493-1.747a1 1 0 00.595-.883L14.752 11.166z"/>
          </svg>`;
      }

      async togglePlayPause() {
        if (!this.recordedBlob) return;

        const playBtn = this.playRecordedBtn;
        const pauseIcon = playBtn.querySelector('.pause-icon');
        const playIcon = playBtn.querySelector('.play-icon');

        const audioUrl = URL.createObjectURL(this.recordedBlob);
        const audioElement = new Audio(audioUrl);

        if (audioElement.paused) {
          audioElement.play();
          if (playIcon) playIcon.classList.add('hidden');
          if (pauseIcon) pauseIcon.classList.remove('hidden');
          playBtn.classList.add('bg-gray-600');
          playBtn.classList.remove('bg-primary-500');
          playBtn.setAttribute('title', 'Pause');

          audioElement.ontimeupdate = () => {
            const progressWidth = (audioElement.currentTime / audioElement.duration) * 100;
            const voiceProgress = document.querySelectorAll('.voice-progress');
            voiceProgress.forEach(bar => bar.style.width = `${progressWidth}%`);
            const currentTimeMinutes = Math.floor(audioElement.currentTime / 60);
            const currentTimeSeconds = Math.floor(audioElement.currentTime % 60);
            this.recordedDurationElement.textContent = `${currentTimeMinutes}:${currentTimeSeconds < 10 ? '0' : ''}${currentTimeSeconds}`;
          };

          audioElement.onended = () => {
            if (playIcon) playIcon.classList.remove('hidden');
            if (pauseIcon) pauseIcon.classList.add('hidden');
            playBtn.classList.add('bg-primary-500');
            playBtn.classList.remove('bg-gray-600');
            playBtn.setAttribute('title', 'Play');
            this.resetProgressAndTimer();
          };

        } else {
          audioElement.pause();
          if (playIcon) playIcon.classList.remove('hidden');
          if (pauseIcon) pauseIcon.classList.add('hidden');
          playBtn.classList.add('bg-primary-500');
          playBtn.classList.remove('bg-gray-600');
          playBtn.setAttribute('title', 'Play');
        }
      }

      async sendVoiceMessage() {
        if (!this.recordedBlob) {
          console.error('No recorded audio to send');
          return;
        }

        // Stop recording if still recording
        this.stopRecording();

        try {
          const formData = new FormData();
          const audioFile = new File([this.recordedBlob], `voice_${Date.now()}.webm`, { type: 'audio/webm' });
          formData.append('media', audioFile);
          formData.append('msg', ''); // Empty message for voice only

          console.log('Sending voice message...', audioFile);
          const response = await fetch('/groupchat/' + groupId, {
            method: 'POST',
            body: formData
          });

          if (response.ok) {
            const data = await response.json();
            console.log('Voice message sent successfully:', data);
            this.deleteRecording();
            // Hide the recording preview
            this.recordingPreview.classList.add('hidden');
          } else {
            throw new Error('Failed to send voice message');
          }
        } catch (error) {
          console.error('Error sending voice message:', error);
          alert('Failed to send voice message');
        }
      }

      toggleVoicePlayback(button) {
        const audioSrc = button.dataset.audioSrc;
        const playIcon = button.querySelector('.play-icon');
        const pauseIcon = button.querySelector('.pause-icon');
        const progressBar = button.closest('.voice-message-container').querySelector('.voice-progress');
        const durationElement = button.closest('.voice-message-container').querySelector('.voice-duration');

        let audioElement = button.closest('.voice-message-container').querySelector('audio');
        if (!audioElement) {
          audioElement = document.createElement('audio');
          audioElement.src = audioSrc;
          audioElement.dataset.messageId = button.closest('.message-container').getAttribute('data-id');
          button.closest('.voice-message-container').appendChild(audioElement);
        }

        if (audioElement.paused) {
          // Pause any other playing audio messages
          document.querySelectorAll('.voice-play-btn').forEach(btn => {
            const otherAudioElement = btn.closest('.voice-message-container').querySelector('audio');
            if (otherAudioElement && otherAudioElement !== audioElement && !otherAudioElement.paused) {
              otherAudioElement.pause();
              const otherPlayBtn = btn;
              const otherPauseIcon = otherPlayBtn.querySelector('.pause-icon');
              const otherPlayIcon = otherPlayBtn.querySelector('.play-icon');
              if (otherPlayIcon) otherPlayIcon.classList.remove('hidden');
              if (otherPauseIcon) otherPauseIcon.classList.add('hidden');
              otherPlayBtn.classList.add('bg-primary-500');
              otherPlayBtn.classList.remove('bg-gray-600');
              otherPlayBtn.setAttribute('title', 'Play');
            }
          });

          audioElement.play();
          if (playIcon) playIcon.classList.add('hidden');
          if (pauseIcon) pauseIcon.classList.remove('hidden');
          button.classList.add('bg-gray-600');
          button.classList.remove('bg-primary-500');
          button.setAttribute('title', 'Pause');

          audioElement.ontimeupdate = () => {
            const progressWidth = (audioElement.currentTime / audioElement.duration) * 100;
            progressBar.style.width = `${progressWidth}%`;
            const currentTimeMinutes = Math.floor(audioElement.currentTime / 60);
            const currentTimeSeconds = Math.floor(audioElement.currentTime % 60);
            durationElement.textContent = `${currentTimeMinutes}:${currentTimeSeconds < 10 ? '0' : ''}${currentTimeSeconds}`;
          };

          audioElement.onended = () => {
            if (playIcon) playIcon.classList.remove('hidden');
            if (pauseIcon) pauseIcon.classList.add('hidden');
            button.classList.add('bg-primary-500');
            button.classList.remove('bg-gray-600');
            button.setAttribute('title', 'Play');
            progressBar.style.width = '0%';
            durationElement.textContent = '0:00';
          };
        } else {
          audioElement.pause();
          if (playIcon) playIcon.classList.remove('hidden');
          if (pauseIcon) pauseIcon.classList.add('hidden');
          button.classList.add('bg-primary-500');
          button.classList.remove('bg-gray-600');
          button.setAttribute('title', 'Play');
        }
      }
    }

    // Initialize voice message manager
    const voiceManager = new VoiceMessageManager();

    // Group Management Functions
    async function loadAvailableUsers() {
      try {
        const response = await fetch('/api/users/available-for-group/<%= group._id %>');
        const users = await response.json();
        const select = document.getElementById('newMemberSelect');

        if (select) {
          select.innerHTML = '<option value="">Select user to add...</option>';
          users.forEach(user => {
            const option = document.createElement('option');
            option.value = user._id;
            option.textContent = user.username;
            select.appendChild(option);
          });
        }
      } catch (error) {
        console.error('Error loading users:', error);
      }
    }

    async function addMember() {
      const select = document.getElementById('newMemberSelect');
      const userId = select.value;

      if (!userId) {
        alert('Please select a user to add');
        return;
      }

      try {
        const response = await fetch('/groups/<%= group._id %>/add', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ userId })
        });

        if (response.ok) {
          location.reload();
        } else {
          const error = await response.text();
          alert('Error adding member: ' + error);
        }
      } catch (error) {
        console.error('Error adding member:', error);
        alert('Error adding member');
      }
    }

    async function removeMember(userId, username) {
      if (!confirm(`Are you sure you want to remove ${username} from the group?`)) {
        return;
      }

      try {
        const response = await fetch('/groups/<%= group._id %>/remove', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ userId })
        });

        if (response.ok) {
          location.reload();
        } else {
          const error = await response.text();
          alert('Error removing member: ' + error);
        }
      } catch (error) {
        console.error('Error removing member:', error);
        alert('Error removing member');
      }
    }

    async function exitGroup() {
      if (!confirm('Are you sure you want to exit this group? You will no longer receive messages from this group.')) {
        return;
      }

      try {
        const response = await fetch('/groups/<%= group._id %>/exit', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          }
        });

        if (response.ok) {
          window.location.href = '/dashboard';
        } else {
          const error = await response.text();
          alert('Error exiting group: ' + error);
        }
      } catch (error) {
        console.error('Error exiting group:', error);
        alert('Error exiting group');
      }
    }

    // Group Message Management Functions
    function toggleMenu(button) {
      const dropdown = button.nextElementSibling;
      const isShown = dropdown.classList.contains('show');

      // Close all other dropdowns
      document.querySelectorAll('.dropdown-menu').forEach(menu => {
        menu.classList.remove('show');
      });

      // Toggle current dropdown
      if (!isShown) {
        dropdown.classList.add('show');
      }
    }

    // Close dropdown when clicking outside
    document.addEventListener('click', (e) => {
      if (!e.target.closest('.message-menu')) {
        document.querySelectorAll('.dropdown-menu').forEach(menu => {
          menu.classList.remove('show');
        });
      }
    });

    async function deleteGroupMessage(messageId, deleteType) {
      if (!messageId) {
        console.error('Message ID is required');
        return;
      }

      try {
        const response = await fetch(`/groupmessage/${messageId}`, {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ deleteType })
        });

        if (response.ok) {
          // Message will be removed via socket event
          // Close dropdown after successful deletion
          document.querySelectorAll('.dropdown-menu').forEach(menu => {
            menu.classList.remove('show');
          });
        } else {
          const error = await response.json();
          alert('Error: ' + (error.error || 'Failed to delete message'));
        }
      } catch (error) {
        console.error('Delete error:', error);
        alert('Failed to delete message');
      }
    }

    function editGroupMessage(messageId) {
      if (!messageId) {
        console.error('Message ID is required');
        return;
      }

      const messageContainer = document.querySelector(`[data-id="${messageId}"]`);
      if (!messageContainer) {
        console.error('Message not found');
        return;
      }

      const messageTextDiv = messageContainer.querySelector('.message-text');
      if (!messageTextDiv) {
        console.error('Message text not found');
        return;
      }

      const currentText = messageTextDiv.querySelector('p').textContent.split(': ')[1] || '';

      // Replace message text with input
      messageTextDiv.innerHTML = `
        <input type="text" class="edit-input" value="${escapeHtml(currentText)}" onkeypress="handleGroupEditKeypress(event, '${messageId}')" />
        <div class="edit-buttons">
          <button onclick="saveGroupEdit('${messageId}')" class="px-2 py-1 bg-blue-500 text-white text-xs rounded hover:bg-blue-600">Save</button>
          <button onclick="cancelGroupEdit('${messageId}', '${escapeHtml(currentText)}')" class="px-2 py-1 bg-gray-500 text-white text-xs rounded hover:bg-gray-600">Cancel</button>
        </div>
      `;

      // Focus on input and close dropdown
      const input = messageTextDiv.querySelector('.edit-input');
      input.focus();
      input.select();

      // Close dropdown
      document.querySelectorAll('.dropdown-menu').forEach(menu => {
        menu.classList.remove('show');
      });
    }

    function handleGroupEditKeypress(event, messageId) {
      if (event.key === 'Enter') {
        event.preventDefault();
        saveGroupEdit(messageId);
      } else if (event.key === 'Escape') {
        event.preventDefault();
        const messageContainer = document.querySelector(`[data-id="${messageId}"]`);
        const messageTextDiv = messageContainer.querySelector('.message-text');
        const input = messageTextDiv.querySelector('.edit-input');
        const originalText = input.defaultValue;
        cancelGroupEdit(messageId, originalText);
      }
    }

    async function saveGroupEdit(messageId) {
      if (!messageId) {
        console.error('Message ID is required');
        return;
      }

      const messageContainer = document.querySelector(`[data-id="${messageId}"]`);
      const messageTextDiv = messageContainer.querySelector('.message-text');
      const input = messageTextDiv.querySelector('.edit-input');
      const newText = input.value.trim();

      if (!newText) {
        alert('Message cannot be empty');
        return;
      }

      try {
        const response = await fetch(`/groupmessage/${messageId}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ newMessage: newText })
        });

        if (response.ok) {
          // Message will be updated via socket event
        } else {
          const error = await response.json();
          alert('Error: ' + (error.error || 'Failed to edit message'));
          // Restore original text
          const originalText = input.defaultValue;
          cancelGroupEdit(messageId, originalText);
        }
      } catch (error) {
        console.error('Edit error:', error);
        alert('Failed to edit message');
        // Restore original text
        const originalText = input.defaultValue;
        cancelGroupEdit(messageId, originalText);
      }
    }

    function cancelGroupEdit(messageId, originalText) {
      const messageContainer = document.querySelector(`[data-id="${messageId}"]`);
      const messageTextDiv = messageContainer.querySelector('.message-text');
      const username = "<%= currentUser.username %>";
      messageTextDiv.innerHTML = `<p class="text-sm leading-relaxed"><strong class="text-primary-100">${username}:</strong> ${escapeHtml(originalText)}</p>`;
    }

    // Handle group message deletion via socket
    socket.on('group message deleted', ({ messageId, deleteType }) => {
      try {
        const messageElement = document.querySelector(`[data-id="${messageId}"]`);
        if (messageElement) {
          messageElement.remove(); // Simply remove the element
        }
      } catch (error) {
        console.error('Error handling group message deletion:', error);
      }
    });

    // Handle group message editing via socket
    socket.on('group message edited', (updatedMessage) => {
      try {
        const messageElement = document.querySelector(`[data-id="${updatedMessage._id}"]`);
        if (messageElement) {
          const messageTextDiv = messageElement.querySelector('.message-text');
          const timeSpan = messageElement.querySelector('.text-xs');

          if (messageTextDiv) {
            messageTextDiv.innerHTML = `<p class="text-sm leading-relaxed"><strong class="text-primary-100">${updatedMessage.from.username}:</strong> ${escapeHtml(updatedMessage.msg)}</p>`;
          }

          // Update timestamp to show edited
          if (timeSpan && !timeSpan.innerHTML.includes('(edited)')) {
            timeSpan.innerHTML += ' <span class="ml-1 italic">(edited)</span>';
          }
        }
      } catch (error) {
        console.error('Error handling group message edit:', error);
      }
    });

    // Load available users when panel opens (only for admins)
    <% if (group.admin._id.toString() === currentUser._id.toString()) { %>
      loadAvailableUsers();
    <% } %>
  </script>
  <script src="/js/groupCall.js"></script>
</body>
</html>