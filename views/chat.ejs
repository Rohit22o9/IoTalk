
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat with <%= otherUser.username %> - ModernChat</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link href="/style.css" rel="stylesheet">
    <script src="/socket.io/socket.io.js"></script>
    <script src="/js/notifications.js"></script>
</head>
<body class="bg-gray-100 min-h-screen">
    <div class="flex flex-col h-screen">
        <!-- Header -->
        <div class="bg-white shadow-sm border-b p-4 flex items-center justify-between">
            <div class="flex items-center space-x-3">
                <a href="/dashboard" class="text-blue-600 hover:text-blue-800">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                    </svg>
                </a>
                <img src="<%= otherUser.avatar || '/avatars/default-avatar.png' %>" alt="<%= otherUser.username %>" class="w-10 h-10 rounded-full">
                <div>
                    <h2 class="font-semibold text-gray-900"><%= otherUser.username %></h2>
                    <p class="text-sm text-gray-500" id="typing-indicator"></p>
                </div>
            </div>
            <div class="flex space-x-2">
                <button onclick="initiateCall('audio')" class="bg-green-500 text-white p-2 rounded-full hover:bg-green-600" title="Audio Call">
                    <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z"></path>
                    </svg>
                </button>
                <button onclick="initiateCall('video')" class="bg-blue-500 text-white p-2 rounded-full hover:bg-blue-600" title="Video Call">
                    <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M2 6a2 2 0 012-2h6a2 2 0 012 2v6a2 2 0 01-2 2H4a2 2 0 01-2-2V6zM14.553 7.106A1 1 0 0014 8v4a1 1 0 00.553.894l2 1A1 1 0 0018 13V7a1 1 0 00-1.447-.894l-2 1z"></path>
                    </svg>
                </button>
            </div>
        </div>

        <!-- Messages Container -->
        <div class="flex-1 overflow-y-auto p-4 space-y-3" id="messages-container">
            <% chats.forEach(chat => { %>
                <% const isOwn = chat.from.toString() === currentUser._id.toString(); %>
                <% const ext = chat.media ? chat.media.split('.').pop().toLowerCase() : ''; %>
                <% const isImage = ['jpg', 'jpeg', 'png', 'gif', 'webp'].includes(ext); %>
                <% const isVideo = ['mp4', 'avi', 'mov', 'wmv', 'flv', 'mkv', 'webm'].includes(ext); %>
                <% const isAudio = ['mp3', 'wav', 'ogg', 'webm', 'm4a'].includes(ext); %>
                
                <div class="flex <%= isOwn ? 'justify-end' : 'justify-start' %>">
                    <div class="max-w-xs lg:max-w-md px-4 py-2 rounded-lg <%= isOwn ? 'bg-blue-500 text-white' : 'bg-white text-gray-800' %> shadow">
                        <% if (chat.media) { %>
                            <% if (isImage) { %>
                                <div class="mb-2">
                                    <img src="<%= chat.media.startsWith('/') ? chat.media : '/' + chat.media %>"
                                         alt="Media" 
                                         class="rounded-md max-h-60 shadow cursor-pointer hover:opacity-90 transition-opacity"
                                         onclick="openMediaPreview(this.src, 'image', '<%= (chat.originalName || chat.media.split('/').pop()).replace(/'/g, '&apos;') %>')">
                                </div>
                            <% } else if (isVideo) { %>
                                <div class="mb-2">
                                    <div class="relative cursor-pointer group" 
                                         onclick="openMediaPreview('<%= chat.media.startsWith('/') ? chat.media : '/' + chat.media %>', 'video', '<%= (chat.originalName || chat.media.split('/').pop()).replace(/'/g, '&apos;') %>')">
                                        <video class="rounded-md max-h-60 shadow w-full" style="max-width: 100%;" preload="metadata">
                                            <source src="<%= chat.media.startsWith('/') ? chat.media : '/' + chat.media %>" type="video/<%= ext %>">
                                            Your browser does not support the video tag.
                                        </video>
                                        <div class="absolute inset-0 flex items-center justify-center bg-black bg-opacity-30 group-hover:bg-opacity-50 transition-all rounded-md">
                                            <svg class="w-12 h-12 text-white" fill="currentColor" viewBox="0 0 20 20">
                                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clip-rule="evenodd"></path>
                                            </svg>
                                        </div>
                                    </div>
                                </div>
                            <% } else if (isAudio) { %>
                                <div class="mb-2">
                                    <audio controls class="w-full">
                                        <source src="<%= chat.media.startsWith('/') ? chat.media : '/' + chat.media %>" type="audio/<%= ext %>">
                                        Your browser does not support the audio element.
                                    </audio>
                                </div>
                            <% } else { %>
                                <div class="mb-2">
                                    <a href="<%= chat.media.startsWith('/') ? chat.media : '/' + chat.media %>" 
                                       download="<%= chat.originalName || chat.media.split('/').pop() %>"
                                       class="flex items-center space-x-2 p-2 border rounded-md hover:bg-gray-50 transition-colors">
                                        <svg class="w-6 h-6 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                                        </svg>
                                        <div>
                                            <p class="text-sm font-medium"><%= chat.originalName || chat.media.split('/').pop() %></p>
                                            <p class="text-xs text-gray-500">Document</p>
                                        </div>
                                    </a>
                                </div>
                            <% } %>
                        <% } %>
                        
                        <% if (chat.msg) { %>
                            <p class="text-sm"><%= chat.msg %></p>
                        <% } %>
                        
                        <p class="text-xs <%= isOwn ? 'text-blue-100' : 'text-gray-500' %> mt-1">
                            <%= new Date(chat.created_at).toLocaleTimeString() %>
                        </p>
                    </div>
                </div>
            <% }); %>
        </div>

        <!-- File Preview Area -->
        <div id="file-preview-container" class="hidden bg-gray-50 border-t p-4">
            <div class="flex items-center justify-between">
                <div class="flex items-center space-x-3">
                    <div id="preview-content"></div>
                    <div>
                        <p class="text-sm font-medium" id="preview-filename"></p>
                        <p class="text-xs text-gray-500" id="preview-filesize"></p>
                    </div>
                </div>
                <button onclick="removeFilePreview()" class="text-red-500 hover:text-red-700">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
        </div>

        <!-- Message Input -->
        <div class="bg-white border-t p-4">
            <form id="message-form" enctype="multipart/form-data" class="flex items-center space-x-3">
                <input type="file" id="media-input" name="media" class="hidden" accept="image/*,video/*,audio/*,.pdf,.doc,.docx,.xls,.xlsx,.ppt,.pptx,.zip,.rar">
                <button type="button" onclick="document.getElementById('media-input').click()" class="text-gray-500 hover:text-gray-700">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.172 7l-6.586 6.586a2 2 0 102.828 2.828l6.414-6.586a4 4 0 00-5.656-5.656l-6.415 6.585a6 6 0 108.486 8.486L20.5 13"></path>
                    </svg>
                </button>
                <input type="text" id="message-input" name="msg" placeholder="Type a message..." class="flex-1 border rounded-full px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500">
                <button type="submit" class="bg-blue-500 text-white rounded-full p-2 hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
                    </svg>
                </button>
            </form>
        </div>
    </div>

    <!-- Media Preview Modal -->
    <div id="media-preview-modal" class="fixed inset-0 bg-black bg-opacity-75 z-50 hidden flex items-center justify-center">
        <div class="max-w-4xl max-h-full p-4">
            <div class="bg-white rounded-lg overflow-hidden">
                <div class="flex justify-between items-center p-4 border-b">
                    <h3 class="text-lg font-semibold" id="modal-filename"></h3>
                    <button onclick="closeMediaPreview()" class="text-gray-500 hover:text-gray-700">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>
                <div class="p-4" id="modal-content"></div>
            </div>
        </div>
    </div>

    <script>
        const socket = io();
        const messagesContainer = document.getElementById('messages-container');
        const messageForm = document.getElementById('message-form');
        const msgInput = document.getElementById('message-input');
        const mediaInput = document.getElementById('media-input');
        const typingIndicator = document.getElementById('typing-indicator');
        const filePreviewContainer = document.getElementById('file-preview-container');
        
        const currentUserId = '<%= currentUser._id %>';
        const otherUserId = '<%= otherUser._id %>';
        const currentUsername = '<%= currentUser.username %>';
        
        let isTyping = false;
        let typingTimer;
        let selectedFile = null;

        // Join the chat room
        socket.emit('join', currentUserId);

        // Scroll to bottom
        function scrollToBottom() {
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }
        scrollToBottom();

        // Message form submission
        messageForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const message = msgInput.value.trim();
            if (!message && !selectedFile) return;

            const formData = new FormData();
            if (message) formData.append('msg', message);
            if (selectedFile) formData.append('media', selectedFile);

            try {
                const response = await fetch(`/chat/${otherUserId}`, {
                    method: 'POST',
                    body: formData
                });

                if (response.ok) {
                    msgInput.value = '';
                    removeFilePreview();
                    
                    // Stop typing indicator
                    socket.emit('typing stop', {
                        to: otherUserId,
                        from: currentUserId,
                        username: currentUsername
                    });
                    isTyping = false;
                } else {
                    alert('Failed to send message');
                }
            } catch (error) {
                console.error('Error sending message:', error);
                alert('Failed to send message');
            }
        });

        // File input change
        mediaInput.addEventListener('change', (e) => {
            const file = e.target.files[0];
            if (file) {
                selectedFile = file;
                showFilePreview(file);
            }
        });

        // Show file preview
        function showFilePreview(file) {
            const previewContent = document.getElementById('preview-content');
            const previewFilename = document.getElementById('preview-filename');
            const previewFilesize = document.getElementById('preview-filesize');
            
            previewFilename.textContent = file.name;
            previewFilesize.textContent = formatFileSize(file.size);
            
            if (file.type.startsWith('image/')) {
                const img = document.createElement('img');
                img.src = URL.createObjectURL(file);
                img.className = 'w-12 h-12 object-cover rounded';
                previewContent.innerHTML = '';
                previewContent.appendChild(img);
            } else {
                previewContent.innerHTML = `
                    <div class="w-12 h-12 bg-gray-200 rounded flex items-center justify-center">
                        <svg class="w-6 h-6 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                        </svg>
                    </div>
                `;
            }
            
            filePreviewContainer.classList.remove('hidden');
        }

        // Remove file preview
        function removeFilePreview() {
            selectedFile = null;
            filePreviewContainer.classList.add('hidden');
            mediaInput.value = '';
        }

        // Format file size
        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

        // Typing detection
        msgInput.addEventListener('input', () => {
            if (!isTyping) {
                isTyping = true;
                socket.emit('typing start', {
                    to: otherUserId,
                    from: currentUserId,
                    username: currentUsername
                });
            }
            
            clearTimeout(typingTimer);
            typingTimer = setTimeout(() => {
                isTyping = false;
                socket.emit('typing stop', {
                    to: otherUserId,
                    from: currentUserId,
                    username: currentUsername
                });
            }, 3000);
        });

        // Socket event listeners
        socket.on('chat message', (data) => {
            if (data.to._id === currentUserId || data.from._id === currentUserId) {
                addMessageToChat(data);
                scrollToBottom();
            }
        });

        socket.on('user typing', (data) => {
            if (data.isTyping && data.userId !== currentUserId) {
                typingIndicator.textContent = `${data.username} is typing...`;
            } else {
                typingIndicator.textContent = '';
            }
        });

        // Add message to chat
        function addMessageToChat(data) {
            const isOwn = data.from._id === currentUserId;
            const messageDiv = document.createElement('div');
            messageDiv.className = `flex ${isOwn ? 'justify-end' : 'justify-start'}`;
            
            let mediaContent = '';
            if (data.media) {
                const ext = data.media.split('.').pop().toLowerCase();
                const isImage = ['jpg', 'jpeg', 'png', 'gif', 'webp'].includes(ext);
                const isVideo = ['mp4', 'avi', 'mov', 'wmv', 'flv', 'mkv', 'webm'].includes(ext);
                const isAudio = ['mp3', 'wav', 'ogg', 'webm', 'm4a'].includes(ext);
                
                if (isImage) {
                    mediaContent = `
                        <div class="mb-2">
                            <img src="${data.media}" alt="Media" class="rounded-md max-h-60 shadow cursor-pointer hover:opacity-90 transition-opacity" onclick="openMediaPreview('${data.media}', 'image', '${data.originalName || data.media.split('/').pop()}')">
                        </div>
                    `;
                } else if (isVideo) {
                    mediaContent = `
                        <div class="mb-2">
                            <div class="relative cursor-pointer group" onclick="openMediaPreview('${data.media}', 'video', '${data.originalName || data.media.split('/').pop()}')">
                                <video class="rounded-md max-h-60 shadow w-full" preload="metadata">
                                    <source src="${data.media}" type="video/${ext}">
                                </video>
                                <div class="absolute inset-0 flex items-center justify-center bg-black bg-opacity-30 group-hover:bg-opacity-50 transition-all rounded-md">
                                    <svg class="w-12 h-12 text-white" fill="currentColor" viewBox="0 0 20 20">
                                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clip-rule="evenodd"></path>
                                    </svg>
                                </div>
                            </div>
                        </div>
                    `;
                } else if (isAudio) {
                    mediaContent = `
                        <div class="mb-2">
                            <audio controls class="w-full">
                                <source src="${data.media}" type="audio/${ext}">
                            </audio>
                        </div>
                    `;
                } else {
                    mediaContent = `
                        <div class="mb-2">
                            <a href="${data.media}" download="${data.originalName || data.media.split('/').pop()}" class="flex items-center space-x-2 p-2 border rounded-md hover:bg-gray-50 transition-colors">
                                <svg class="w-6 h-6 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                                </svg>
                                <div>
                                    <p class="text-sm font-medium">${data.originalName || data.media.split('/').pop()}</p>
                                    <p class="text-xs text-gray-500">Document</p>
                                </div>
                            </a>
                        </div>
                    `;
                }
            }
            
            messageDiv.innerHTML = `
                <div class="max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${isOwn ? 'bg-blue-500 text-white' : 'bg-white text-gray-800'} shadow">
                    ${mediaContent}
                    ${data.msg ? `<p class="text-sm">${data.msg}</p>` : ''}
                    <p class="text-xs ${isOwn ? 'text-blue-100' : 'text-gray-500'} mt-1">
                        ${new Date().toLocaleTimeString()}
                    </p>
                </div>
            `;
            
            messagesContainer.appendChild(messageDiv);
        }

        // Media preview functions
        function openMediaPreview(src, type, filename) {
            const modal = document.getElementById('media-preview-modal');
            const modalContent = document.getElementById('modal-content');
            const modalFilename = document.getElementById('modal-filename');
            
            modalFilename.textContent = filename;
            
            if (type === 'image') {
                modalContent.innerHTML = `<img src="${src}" alt="${filename}" class="max-w-full max-h-96 mx-auto">`;
            } else if (type === 'video') {
                modalContent.innerHTML = `
                    <video controls class="max-w-full max-h-96 mx-auto">
                        <source src="${src}" type="video/${src.split('.').pop()}">
                        Your browser does not support the video tag.
                    </video>
                `;
            }
            
            modal.classList.remove('hidden');
        }

        function closeMediaPreview() {
            document.getElementById('media-preview-modal').classList.add('hidden');
        }

        // Call functions
        function initiateCall(type) {
            // Implement call functionality
            console.log(`Initiating ${type} call with ${otherUserId}`);
        }

        // Request notification permission
        if ('Notification' in window && Notification.permission === 'default') {
            Notification.requestPermission().then(function(permission) {
                console.log('Notification permission:', permission);
            });
        }

        // Initialize notifications with socket
        if (window.notificationManager) {
            notificationManager.setSocket(socket, currentUserId);
        }
    </script>
</body>
</html>
