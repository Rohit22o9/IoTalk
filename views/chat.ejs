<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chat with <%= otherUser.username %> - ModernChat</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="/style.css">
  <script>
    tailwind.config = {
      theme: {
        extend: {
          colors: {
            primary: {
              50: '#eff6ff', 100: '#dbeafe',
              500: '#3b82f6', 600: '#2563eb',
              700: '#1d4ed8', 800: '#1e40af', 900: '#1e3a8a',
            },
            secondary: {
              50: '#f8fafc', 100: '#f1f5f9',
              500: '#64748b', 600: '#475569',
              700: '#334155', 800: '#1e293b', 900: '#0f172a',
            }
          }
        }
      }
    }
  </script>
  <style>
    body, html {
      overflow-x: hidden;
    }
    .chat-messages {
      overflow-x: hidden;
      word-wrap: break-word;
      word-break: break-word;
    }

  </style>
</head>

<body class="h-screen bg-gradient-to-br from-secondary-50 via-white to-primary-50 overflow-hidden">
  <div class="h-full flex flex-col relative">
    <!-- Header -->
    <header class="bg-white/90 backdrop-blur-lg border-b border-secondary-200 px-4 py-3 flex-shrink-0">
      <div class="flex items-center space-x-4">
        <form action="/dashboard" method="GET" class="inline">
          <button type="submit" class="p-2 rounded-lg hover:bg-secondary-100 transition-colors duration-200">
            <svg class="h-5 w-5 text-secondary-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
            </svg>
          </button>
        </form>
        <div class="flex items-center space-x-3 flex-1">
          <img src="<%= otherUser.avatar || '/avatars/default-avatar.png' %>"
               alt="<%= otherUser.username %>"
               class="w-10 h-10 rounded-full object-cover border-2 border-white shadow-md">
          <div>
            <h1 class="text-lg font-semibold text-secondary-900"><%= otherUser.username %></h1>
            <p class="text-xs text-gray-500" id="typing-indicator"></p>
          </div>
        </div>
        <div class="flex space-x-2">
          <button onclick="initiateAudioCall()" class="p-3 rounded-xl bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white transition-all duration-200 transform hover:scale-105 active:scale-95 shadow-lg hover:shadow-xl" title="Audio Call">
            <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
              <path d="M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z"></path>
            </svg>
          </button>
          <button onclick="initiateVideoCall()" class="p-3 rounded-xl bg-gradient-to-r from-primary-500 to-primary-600 hover:from-primary-600 hover:to-primary-700 text-white transition-all duration-200 transform hover:scale-105 active:scale-95 shadow-lg hover:shadow-xl" title="Video Call">
            <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
              <path d="M2 6a2 2 0 012-2h6a2 2 0 012 2v6a2 2 0 01-2 2H4a2 2 0 01-2-2V6zM14.553 7.106A1 1 0 0014 8v4a1 1 0 00.553.894l2 1A1 1 0 0018 13V7a1 1 0 00-1.447-.894l-2 1z"></path>
            </svg>
          </button>
        </div>
      </div>
    </header>

    <!-- Messages Container -->
    <main class="flex-1 overflow-y-auto p-4 space-y-4 chat-messages pb-24" id="messages-container">
      <!-- Typing Indicator -->
      <div id="typing-indicator-container" class="hidden flex justify-start">
        <div class="bg-white/80 backdrop-blur-lg px-4 py-2 rounded-2xl rounded-bl-md border border-white/20 shadow-lg">
          <div class="flex items-center space-x-2">
            <div class="flex space-x-1">
              <div class="w-2 h-2 bg-secondary-400 rounded-full animate-bounce"></div>
              <div class="w-2 h-2 bg-secondary-400 rounded-full animate-bounce" style="animation-delay: 0.1s"></div>
              <div class="w-2 h-2 bg-secondary-400 rounded-full animate-bounce" style="animation-delay: 0.2s"></div>
            </div>
            <span class="text-xs text-secondary-500" id="typing-text">Typing...</span>
          </div>
        </div>
      </div>

      <% chats.forEach(chat => { %>
        <% const isOwn = chat.from.toString() === currentUser._id.toString(); %>
        <% const ext = chat.media ? chat.media.split('.').pop().toLowerCase() : ''; %>
        <% const isImage = ['jpg', 'jpeg', 'png', 'gif', 'webp'].includes(ext); %>
        <% const isVideo = ['mp4', 'avi', 'mov', 'wmv', 'flv', 'mkv', 'webm'].includes(ext); %>
        <% const isAudio = ['mp3', 'wav', 'ogg', 'm4a', 'webm'].includes(ext) || (chat.originalName && chat.originalName.startsWith('voice_')) || (chat.media && chat.media.includes('voice_')); %>

        <div class="flex <%= isOwn ? 'justify-end' : 'justify-start' %>">
          <% if (isAudio && chat.media) { %>
            <!-- Voice message container -->
            <div class="max-w-xs lg:max-w-md">
              <div class="voice-message-container relative group">
                <button class="voice-play-btn" data-audio-src="<%= chat.media.startsWith('/') ? chat.media : '/' + chat.media %>">
                  <svg class="play-icon h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.166l-4.5-2.667a.5.5 0 00-.752.433v5.334a.5.5 0 00.752.433L14.752 11.166z"/>
                  </svg>
                  <svg class="pause-icon h-6 w-6 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 9v6m4-6v6"/>
                  </svg>
                </button>
                <div class="voice-progress-bar-container">
                  <div class="voice-progress"></div>
                </div>
                <div class="voice-duration">0:00</div>
                <button onclick="summarizeContent('<%= chat._id %>', 'audio', '<%= chat.media %>')"
                        class="absolute -top-2 -right-2 opacity-0 group-hover:opacity-100 transition-opacity bg-primary-500 text-white text-xs px-2 py-1 rounded-full hover:bg-primary-600 shadow-lg">
                  üìù
                </button>
              </div>
              <div class="flex items-center justify-between mt-1 px-4 pb-3">
                <span class="text-xs <%= isOwn ? 'text-primary-100' : 'text-secondary-500' %>">
                  <%= new Date(chat.created_at).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' }) %>
                </span>
                <% if (chat.moderationResult && chat.moderationResult.flagged) { %>
                  <span class="text-xs text-red-400" title="Message was moderated">‚ö†Ô∏è</span>
                <% } %>
              </div>
            </div>
          <% } else { %>
            <div class="max-w-xs lg:max-w-md px-4 py-3 rounded-2xl
                        <%= isOwn ? 'bg-gradient-to-r from-primary-500 to-primary-600 text-white rounded-br-md' : 'bg-white/80 backdrop-blur-lg text-secondary-900 rounded-bl-md border border-white/20' %> shadow-lg">
          <% } %>

            <% if (chat.media && !isAudio) { %>
              <% 
              // Check if media was flagged by moderation
              const isMediaFlagged = chat.moderationResult && chat.moderationResult.flagged && chat.moderationResult.categories && 
                                   (chat.moderationResult.categories.includes('sexual') || 
                                    chat.moderationResult.categories.includes('violence') || 
                                    chat.moderationResult.categories.includes('harassment'));
              %>
              
              <% if (isMediaFlagged) { %>
                <!-- Show moderation message for flagged media -->
                <div class="mb-2 p-3 bg-yellow-50 border border-yellow-200 rounded-md">
                  <div class="flex items-center space-x-2">
                    <svg class="w-5 h-5 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.5 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                    </svg>
                    <span class="text-sm text-yellow-800">Media content was automatically removed due to policy violations.</span>
                  </div>
                </div>
              <% } else if (isImage) { %>
                <div class="mb-2">
                  <img src="<%= chat.media.startsWith('/') ? chat.media : '/' + chat.media %>"
                       alt="Media"
                       class="rounded-md max-h-60 shadow cursor-pointer hover:opacity-90 transition-opacity"
                       onclick="openMediaPreview(this.src, 'image', '<%= (chat.originalName || chat.media.split('/').pop()).replace(/'/g, '&apos;') %>')"
                       onerror="this.parentElement.innerHTML='<div class=&quot;p-3 bg-red-50 border border-red-200 rounded-md text-sm text-red-600&quot;>Failed to load image</div>'">
                </div>
              <% } else if (isVideo) { %>
                <div class="mb-2 relative group">
                  <div class="relative cursor-pointer"
                       onclick="openMediaPreview('<%= chat.media.startsWith('/') ? chat.media : '/' + chat.media %>', 'video', '<%= (chat.originalName || chat.media.split('/').pop()).replace(/'/g, '&apos;') %>')">
                    <video class="rounded-md max-h-60 shadow w-full" style="max-width: 100%;" preload="metadata"
                           onerror="this.parentElement.parentElement.innerHTML='<div class=&quot;p-3 bg-red-50 border border-red-200 rounded-md text-sm text-red-600&quot;>Failed to load video</div>'">
                      <source src="<%= chat.media.startsWith('/') ? chat.media : '/' + chat.media %>" type="video/<%= ext %>">
                      Your browser does not support the video tag.
                    </video>
                    <div class="absolute inset-0 flex items-center justify-center bg-black bg-opacity-30 opacity-0 group-hover:opacity-100 transition-opacity rounded-md">
                      <div class="bg-white bg-opacity-80 rounded-full p-3">
                        <svg class="h-8 w-8 text-primary-600" fill="currentColor" viewBox="0 0 24 24">
                          <path d="M8 5v14l11-7z"/>
                        </svg>
                      </div>
                    </div>
                  </div>
                  <button onclick="summarizeContent('<%= chat._id %>', 'video', '<%= chat.media %>'); event.stopPropagation();"
                          class="absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-all duration-200 bg-blue-500 hover:bg-blue-600 text-white text-xs px-2 py-1 rounded-full shadow-lg transform hover:scale-105"
                          title="Summarize video">
                    <svg class="w-3 h-3 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                    </svg>
                    Summarize
                  </button>
                </div>
              <% } else { %>
                <% const extColor = ext === 'pdf' ? 'text-red-500' :
                    ['doc','docx'].includes(ext) ? 'text-blue-600' :
                    ['xls','xlsx'].includes(ext) ? 'text-green-600' :
                    ['ppt','pptx'].includes(ext) ? 'text-orange-500' :
                    ['zip','rar'].includes(ext) ? 'text-yellow-500' : 'text-gray-600';
                %>
                <div class="bg-gray-100 rounded-md p-3 mb-2 shadow flex flex-col space-y-2">
                  <div class="flex items-center space-x-3">
                    <svg class="w-6 h-6 <%= extColor %>" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                      <path d="M12 2H6a2 2 0 00-2 2v16a2 2 0 002 2h12a2 2 0 002-2V8z"/>
                      <polyline points="12 2 12 8 18 8"/>
                    </svg>
                    <div>
                      <p class="font-semibold text-gray-800 text-sm truncate max-w-xs">
                        <%= chat.originalName || chat.media.split('/').pop() %>
                      </p>
                      <p class="text-xs text-gray-500 uppercase">DOCUMENT</p>
                    </div>
                  </div>
                  <div class="flex space-x-3 mt-1">
                    <a href="<%= chat.media.startsWith('/') ? chat.media : '/' + chat.media %>" target="_blank"
                       class="text-xs px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600">Open</a>
                    <a href="<%= chat.media.startsWith('/') ? chat.media : '/' + chat.media %>" download="<%= chat.originalName || chat.media.split('/').pop() %>"
                       class="text-xs px-3 py-1 bg-green-500 text-white rounded hover:bg-green-600">Download</a>
                  </div>
                </div>
              <% } %>
            <% } %>

            <% if (chat.msg && !isAudio) { %>
              <div class="relative group">
                <p class="text-sm leading-relaxed"><%= chat.msg %></p>
                <% 
                const hasVideoLink = /(?:https?:\/\/(?:www\.)?(?:youtube\.com\/watch\?v=|youtu\.be\/|vimeo\.com\/video\/|dailymotion\.com\/video\/))/.test(chat.msg);
                const shouldShowSummarizeBtn = chat.msg.length > 200 || hasVideoLink;
                %>
                <% if (shouldShowSummarizeBtn) { %>
                  <button onclick="summarizeContent('<%= chat._id %>', '<%= hasVideoLink ? 'video_link' : 'text' %>', `<%= chat.msg.replace(/'/g, "\\'").replace(/`/g, "\\`").replace(/\n/g, "\\n") %>`)"
                          class="absolute -top-1 -right-1 opacity-0 group-hover:opacity-100 transition-all duration-200 bg-blue-500 hover:bg-blue-600 text-white text-xs px-2 py-1 rounded-full shadow-lg transform hover:scale-105"
                          title="<%= hasVideoLink ? 'Analyze YouTube Video' : 'Summarize content' %>">
                    <% if (hasVideoLink) { %>
                      <svg class="w-3 h-3 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
                      </svg>
                      Analyze Video
                    <% } else { %>
                      <svg class="w-3 h-3 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                      </svg>
                      Summarize
                    <% } %>
                  </button>
                <% } %>
              </div>
            <% } %>

            <% if (!isAudio) { %>
              <div class="flex items-center justify-between mt-2">
                <span class="text-xs <%= isOwn ? 'text-primary-100' : 'text-secondary-500' %>">
                  <%= new Date(chat.created_at).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' }) %>
                </span>
                <% if (chat.moderationResult && chat.moderationResult.flagged) { %>
                  <span class="text-xs text-red-400" title="Message was moderated">‚ö†Ô∏è</span>
                <% } %>
              </div>
            </div>
          <% } %>
        </div>
      <% }); %>
    </main>

    <!-- AI Summary Modal -->
    <div id="ai-summary-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center" onclick="closeAISummaryOnOutsideClick(event)">
      <div class="bg-white rounded-2xl p-6 mx-4 max-w-md w-full max-h-96 overflow-y-auto relative">
        <div class="flex justify-between items-center mb-4">
          <h3 class="text-lg font-semibold text-gray-900">ü§ñ AI Summary</h3>
          <button onclick="closeAISummary()" class="text-gray-400 hover:text-red-600 hover:bg-red-50 rounded-full p-1 transition-colors duration-200">
            <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
        <div id="ai-summary-content" class="text-sm text-gray-700 leading-relaxed mb-4">
          <!-- Summary content will be inserted here -->
        </div>
        <div id="ai-summary-loading" class="text-center py-4">
          <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600 mx-auto"></div>
          <p class="text-sm text-gray-500 mt-2">Generating summary...</p>
        </div>
        <div class="flex justify-center mt-4 pt-4 border-t border-gray-200">
          <button onclick="closeAISummary()" class="px-6 py-2 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-lg transition-colors duration-200 font-medium">
            Close Summary
          </button>
        </div>
      </div>
    </div>

    <!-- Smart Replies Panel -->
    <div id="smart-replies-panel" class="hidden fixed bottom-24 left-0 right-0 z-50 mx-4 mb-2">
      <div class="bg-white/90 backdrop-blur-lg border border-secondary-200 rounded-xl shadow-lg p-3">
        <div class="flex items-center justify-between mb-2">
          <span class="text-xs font-medium text-gray-600">ü§ñ Smart Replies</span>
          <button onclick="hideSmartReplies()" class="text-gray-400 hover:text-gray-600">
            <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
        <div id="smart-replies-content" class="space-y-2">
          <!-- Smart reply buttons will be inserted here -->
        </div>
      </div>
    </div>

    <!-- Media Preview (positioned above the footer) -->
    <div id="filePreview" class="hidden fixed bottom-24 left-0 right-0 z-50 mx-4 mb-2">
      <div class="flex items-center justify-between p-3 bg-white/90 backdrop-blur-lg border border-secondary-200 rounded-xl shadow-lg">
        <div id="previewContent" class="flex items-center space-x-3 flex-1 overflow-hidden"></div>
        <button id="removeFile" type="button" class="ml-3 p-2 rounded-full hover:bg-secondary-100 text-secondary-500 hover:text-red-500 transition-colors flex-shrink-0">
          <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
    </div>

    <!-- Voice Recording Modal -->
    <div id="voice-recording-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
      <div class="bg-white rounded-2xl p-6 mx-4 max-w-sm w-full">
        <div class="text-center">
          <div class="mb-4">
            <div class="w-20 h-20 bg-red-500 rounded-full mx-auto flex items-center justify-center animate-pulse">
              <svg class="h-10 w-10 text-white" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M7 4a3 3 0 016 0v4a3 3 0 11-6 0V4zm4 10.93A7.001 7.001 0 0017 8a1 1 0 10-2 0A5 5 0 015 8a1 1 0 00-2 0 7.001 7.001 0 006 6.93V17H6a1 1 0 100 2h8a1 1 0 100-2h-3v-2.07z" clip-rule="evenodd"></path>
              </svg>
            </div>
          </div>
          <h3 class="text-lg font-semibold text-gray-900 mb-2">Recording Voice Message</h3>
          <p class="text-sm text-gray-500 mb-4">Tap to stop recording</p>
          <div class="flex space-x-3 justify-center">
            <button onclick="stopVoiceRecording()" class="bg-red-500 text-white px-6 py-2 rounded-lg hover:bg-red-600 transition-colors">
              Stop & Send
            </button>
            <button onclick="cancelVoiceRecording()" class="bg-gray-500 text-white px-6 py-2 rounded-lg hover:bg-gray-600 transition-colors">
              Cancel
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Message Input -->
    <footer id="message-footer" class="fixed bottom-0 left-0 right-0 bg-white/90 backdrop-blur-lg border-t border-secondary-200" style="z-index: 1000;">
      <div class="p-4">
        <form id="message-form" enctype="multipart/form-data" class="flex items-center space-x-3">
          <input type="file" id="media-input" name="media" class="hidden" accept="image/*,video/*,audio/*,.pdf,.doc,.docx,.xls,.xlsx,.ppt,.pptx,.zip,.rar">
          <label for="media-input" class="cursor-pointer p-3 rounded-xl bg-secondary-100 hover:bg-secondary-200 transition">
            <svg class="h-5 w-5 text-secondary-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.172 7l-6.586 6.586a2 2 0 102.828 2.828l6.414-6.586a4 4 0 00-5.656-5.656l-6.415 6.585a6 6 0 108.486 8.486L20.5 13"></path>
            </svg>
          </label>

          <!-- Voice Message Button -->
          <button type="button" id="voice-message-btn" onclick="startVoiceRecording()" class="cursor-pointer p-3 rounded-xl bg-secondary-100 hover:bg-secondary-200 transition">
            <svg class="h-5 w-5 text-secondary-600" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M7 4a3 3 0 016 0v4a3 3 0 11-6 0V4zm4 10.93A7.001 7.001 0 0017 8a1 1 0 10-2 0A5 5 0 015 8a1 1 0 00-2 0 7.001 7.001 0 006 6.93V17H6a1 1 0 100 2h8a1 1 0 100-2h-3v-2.07z" clip-rule="evenodd"></path>
            </svg>
          </button>

          <!-- AI Reply Button -->
          <button type="button" id="ai-reply-btn" onclick="generateAIResponse()" class="cursor-pointer p-3 rounded-xl bg-blue-100 hover:bg-blue-200 transition" title="Generate AI Reply">
            <svg class="h-5 w-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path>
            </svg>
          </button>

          <div class="flex-1 relative">
            <textarea name="msg" id="message-input" placeholder="Type your message..."
                   class="w-full px-4 py-3 bg-secondary-50 border border-secondary-200 rounded-2xl focus:ring-2 focus:ring-primary-500 focus:border-transparent transition-all duration-200 pr-12 resize-none"
                   autocomplete="off" rows="1" style="min-height: 48px; overflow-y: hidden;"></textarea>
          </div>

          <button type="submit" class="inline-flex items-center justify-center w-12 h-12 bg-gradient-to-r from-primary-500 to-primary-600 hover:from-primary-600 hover:to-primary-700 text-white rounded-2xl focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-all duration-200 transform hover:scale-105 active:scale-95 shadow-lg hover:shadow-xl">
            <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
            </svg>
          </button>
        </form>
      </div>
    </footer>
  </div>

  <!-- Full-Screen Media Preview Modal -->
  <div id="mediaPreviewModal" class="hidden fixed inset-0 bg-black bg-opacity-90 z-50 flex items-center justify-center">
    <div class="relative max-w-screen-lg max-h-screen-lg w-full h-full flex items-center justify-center p-4">
      <!-- Close Button -->
      <button onclick="closeMediaPreview()"
              class="absolute top-4 right-4 z-60 bg-black bg-opacity-50 text-white p-2 rounded-full hover:bg-opacity-70 transition-colors">
        <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>

      <!-- Media Content Container -->
      <div id="previewMediaContainer" class="flex items-center justify-center w-full h-full">
        <!-- Content will be dynamically inserted here -->
      </div>

      <!-- Download Button -->
      <button id="downloadMediaBtn" onclick="downloadMedia()"
              class="absolute bottom-4 right-4 z-60 bg-primary-500 hover:bg-primary-600 text-white px-4 py-2 rounded-lg transition-colors flex items-center space-x-2">
        <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3M3 17V7a2 2 0 012-2h6l2 2h6a2 2 0 012 2v10a2 2 0 01-2 2H5a2 2 0 01-2-2z"></path>
        </svg>
        <span>Download</span>
      </button>
    </div>
  </div>

  <script src="/socket.io/socket.io.js"></script>
  <script src="/js/notifications.js"></script>
  <script>
    // Voice message playback functionality
    let currentAudio = null;
    let currentPlayButton = null;

    document.addEventListener('DOMContentLoaded', function() {
      // Initialize voice message players
      initializeVoiceMessages();
      
      // Also initialize when new messages are added dynamically
      const observer = new MutationObserver(function(mutations) {
        mutations.forEach(function(mutation) {
          if (mutation.type === 'childList') {
            mutation.addedNodes.forEach(function(node) {
              if (node.nodeType === 1 && node.querySelector) {
                const newVoiceButtons = node.querySelectorAll('.voice-play-btn');
                newVoiceButtons.forEach(button => {
                  if (!button.hasEventListener) {
                    const audioSrc = button.dataset.audioSrc;
                    button.addEventListener('click', function() {
                      toggleVoiceMessage(this, audioSrc);
                    });
                    button.hasEventListener = true;
                  }
                });
              }
            });
          }
        });
      });
      
      observer.observe(document.getElementById('messages-container'), {
        childList: true,
        subtree: true
      });
    });

    function initializeVoiceMessages() {
      const voiceButtons = document.querySelectorAll('.voice-play-btn');
      voiceButtons.forEach(button => {
        button.addEventListener('click', function() {
          const audioSrc = this.dataset.audioSrc;
          toggleVoiceMessage(this, audioSrc);
        });
      });
    }

    function toggleVoiceMessage(button, audioSrc) {
      const container = button.closest('.voice-message-container');
      const progressBar = container.querySelector('.voice-progress');
      const durationElement = container.querySelector('.voice-duration');
      const playIcon = button.querySelector('.play-icon');
      const pauseIcon = button.querySelector('.pause-icon');

      // Stop any currently playing audio
      if (currentAudio && !currentAudio.paused && currentPlayButton !== button) {
        currentAudio.pause();
        resetPreviousButton();
      }

      if (currentAudio && currentPlayButton === button) {
        // Toggle current audio
        if (currentAudio.paused) {
          currentAudio.play().then(() => {
            playIcon.classList.add('hidden');
            pauseIcon.classList.remove('hidden');
          }).catch(error => {
            console.error('Error playing audio:', error);
            showNotification('Failed to play voice message', 'error');
          });
        } else {
          currentAudio.pause();
          playIcon.classList.remove('hidden');
          pauseIcon.classList.add('hidden');
        }
        return;
      }

      // Create new audio element with proper settings
      currentAudio = new Audio();
      currentAudio.src = audioSrc;
      currentAudio.preload = 'auto';
      currentAudio.volume = 1.0;
      currentPlayButton = button;

      // Handle CORS and audio format issues
      currentAudio.crossOrigin = 'anonymous';

      // Set up event listeners
      currentAudio.addEventListener('loadedmetadata', function() {
        const duration = formatTime(currentAudio.duration);
        durationElement.textContent = duration;
      });

      currentAudio.addEventListener('timeupdate', function() {
        if (currentAudio.duration) {
          const progress = (currentAudio.currentTime / currentAudio.duration) * 100;
          progressBar.style.width = progress + '%';
          durationElement.textContent = formatTime(currentAudio.currentTime);
        }
      });

      currentAudio.addEventListener('ended', function() {
        resetAudioPlayer(button, progressBar, durationElement);
      });

      currentAudio.addEventListener('error', function(e) {
        console.error('Audio error:', e);
        showNotification('Failed to load voice message', 'error');
        resetAudioPlayer(button, progressBar, durationElement);
      });

      // Load and play the audio
      currentAudio.load();
      
      // Wait for audio to be ready
      currentAudio.addEventListener('canplaythrough', function() {
        currentAudio.play().then(() => {
          playIcon.classList.add('hidden');
          pauseIcon.classList.remove('hidden');
        }).catch(error => {
          console.error('Error playing audio:', error);
          handleAudioError(error, audioSrc);
        });
      }, { once: true });

      // Add click handler to progress bar for seeking
      const progressBarContainer = container.querySelector('.voice-progress-bar-container');
      progressBarContainer.addEventListener('click', function(e) {
        if (currentAudio && currentAudio.duration) {
          const rect = this.getBoundingClientRect();
          const clickX = e.clientX - rect.left;
          const width = rect.width;
          const seekTime = (clickX / width) * currentAudio.duration;
          currentAudio.currentTime = seekTime;
        }
      });
    }

    function resetPreviousButton() {
      if (currentPlayButton) {
        const playIcon = currentPlayButton.querySelector('.play-icon');
        const pauseIcon = currentPlayButton.querySelector('.pause-icon');
        const container = currentPlayButton.closest('.voice-message-container');
        const progressBar = container.querySelector('.voice-progress');
        const durationElement = container.querySelector('.voice-duration');

        playIcon.classList.remove('hidden');
        pauseIcon.classList.add('hidden');
        progressBar.style.width = '0%';
        if (currentAudio && currentAudio.duration) {
          durationElement.textContent = formatTime(currentAudio.duration);
        }
      }
    }

    function resetAudioPlayer(button, progressBar, durationElement) {
      const playIcon = button.querySelector('.play-icon');
      const pauseIcon = button.querySelector('.pause-icon');
      
      playIcon.classList.remove('hidden');
      pauseIcon.classList.add('hidden');
      progressBar.style.width = '0%';
      
      if (currentAudio && currentAudio.duration) {
        durationElement.textContent = formatTime(currentAudio.duration);
      }
    }

    function formatTime(seconds) {
      if (isNaN(seconds)) return '0:00';
      const mins = Math.floor(seconds / 60);
      const secs = Math.floor(seconds % 60);
      return `${mins}:${secs.toString().padStart(2, '0')}`;
    }

    // Handle audio errors
    function handleAudioError(error, audioSrc) {
      console.error('Audio playback error:', error);
      
      // Try alternative approach with HTML5 audio element
      const tempAudio = document.createElement('audio');
      tempAudio.src = audioSrc;
      tempAudio.controls = true;
      tempAudio.style.display = 'none';
      document.body.appendChild(tempAudio);
      
      tempAudio.play().then(() => {
        document.body.removeChild(tempAudio);
        showNotification('Voice message played successfully', 'success');
      }).catch(() => {
        document.body.removeChild(tempAudio);
        showNotification('Unable to play voice message. Your browser may not support this audio format.', 'error');
      });
    }

    // Show notification function
    function showNotification(message, type = 'info') {
      if (window.ModernChat && window.ModernChat.showNotification) {
        window.ModernChat.showNotification(message, type);
      } else {
        // Create a simple notification
        const notification = document.createElement('div');
        notification.className = `fixed top-4 right-4 z-50 p-4 rounded-lg shadow-lg ${
          type === 'error' ? 'bg-red-500' : type === 'success' ? 'bg-green-500' : 'bg-blue-500'
        } text-white`;
        notification.textContent = message;
        document.body.appendChild(notification);
        
        setTimeout(() => {
          if (notification.parentNode) {
            notification.parentNode.removeChild(notification);
          }
        }, 3000);
      }
    }
  </script>
        // Initialize Socket.IO connection
        const chatSocket = io();

        // Voice recording functionality
        let mediaRecorder = null;
        let recordedChunks = [];
        let isRecording = false;

        // Voice recording functions
        async function startVoiceRecording() {
          try {
            const stream = await navigator.mediaDevices.getUserMedia({ 
              audio: {
                echoCancellation: true,
                noiseSuppression: true,
                autoGainControl: true,
                sampleRate: 44100
              }
            });

            recordedChunks = [];
            mediaRecorder = new MediaRecorder(stream, {
              mimeType: 'audio/webm;codecs=opus'
            });

            mediaRecorder.ondataavailable = function(event) {
              if (event.data.size > 0) {
                recordedChunks.push(event.data);
              }
            };

            mediaRecorder.onstop = function() {
              const blob = new Blob(recordedChunks, { type: 'audio/webm' });
              sendVoiceMessage(blob);
              stream.getTracks().forEach(track => track.stop());
            };

            mediaRecorder.start();
            isRecording = true;
            document.getElementById('voice-recording-modal').classList.remove('hidden');

          } catch (error) {
            console.error('Error starting voice recording:', error);
            alert('Could not access microphone. Please check your permissions.');
          }
        }

        function stopVoiceRecording() {
          if (mediaRecorder && isRecording) {
            mediaRecorder.stop();
            isRecording = false;
            document.getElementById('voice-recording-modal').classList.add('hidden');
          }
        }

        function cancelVoiceRecording() {
          if (mediaRecorder && isRecording) {
            mediaRecorder.stop();
            isRecording = false;
            recordedChunks = [];
            document.getElementById('voice-recording-modal').classList.add('hidden');
            
            // Stop all tracks
            if (mediaRecorder.stream) {
              mediaRecorder.stream.getTracks().forEach(track => track.stop());
            }
          }
        }

        async function sendVoiceMessage(audioBlob) {
          try {
            const formData = new FormData();
            const timestamp = Date.now();
            const filename = `voice_${timestamp}.webm`;
            
            formData.append('media', audioBlob, filename);
            formData.append('msg', ''); // Empty message for voice-only
            formData.append('to', '<%= otherUser._id %>');

            const response = await fetch('/chat/<%= otherUser._id %>', {
              method: 'POST',
              body: formData
            });

            if (response.ok) {
              // Reload the page to show the new voice message
              window.location.reload();
            } else {
              throw new Error('Failed to send voice message');
            }
          } catch (error) {
            console.error('Error sending voice message:', error);
            alert('Failed to send voice message');
          }
        }

        // Expose functions globally
        window.startVoiceRecording = startVoiceRecording;
        window.stopVoiceRecording = stopVoiceRecording;
        window.cancelVoiceRecording = cancelVoiceRecording;

        // Call handling variables
        let localStream = null;
        let remoteStream = null;
        let peerConnection = null;
        let currentCall = null;
        let isCallActive = false;

        // WebRTC configuration
        const rtcConfiguration = {
            iceServers: [
                { urls: 'stun:stun.l.google.com:19302' },
                { urls: 'stun:stun1.l.google.com:19302' },
                { urls: 'stun:stun2.l.google.com:19302' }
            ],
            iceCandidatePoolSize: 10,
            bundlePolicy: 'max-bundle',
            rtcpMuxPolicy: 'require'
        };

        // User online status
        chatSocket.emit('userOnline', '<%= currentUser._id %>');

        // Check for pending call data from dashboard
        const pendingCallData = sessionStorage.getItem('pendingCallData');
        if (pendingCallData) {
            const callData = JSON.parse(pendingCallData);
            sessionStorage.removeItem('pendingCallData');

            if (callData.callAccepted) {
                // Initialize call interface immediately
                setTimeout(() => {
                    initializeCall(callData.callId, callData.type, callData.isReceiver);
                }, 1000);
            }
        }

        async function initializeCall(callId, type, isReceiver = false) {
            try {
                currentCall = { callId, type, isReceiver };
                isCallActive = true;

                // Get user media with proper audio constraints
                const constraints = {
                    audio: {
                        echoCancellation: true,
                        noiseSuppression: true,
                        autoGainControl: true,
                        sampleRate: 44100
                    },
                    video: type === 'video' ? {
                        width: { ideal: 1280 },
                        height: { ideal: 720 },
                        frameRate: { ideal: 30 }
                    } : false
                };

                localStream = await navigator.mediaDevices.getUserMedia(constraints);
                console.log('Local stream tracks:', localStream.getTracks().map(t => `${t.kind}: ${t.enabled}`));
                showCallInterface(type);

                // Set local video
                const localVideo = document.getElementById('local-video');
                if (localVideo) {
                    localVideo.srcObject = localStream;
                }

                // Join the call room for signaling
                chatSocket.emit('join-call-room', callId);

                // Initialize peer connection
                peerConnection = new RTCPeerConnection(rtcConfiguration);

                // Add local stream to peer connection
                localStream.getTracks().forEach(track => {
                    console.log('Adding track:', track.kind, track.enabled);
                    peerConnection.addTrack(track, localStream);
                });

                // Handle remote stream
                peerConnection.ontrack = (event) => {
                    console.log('Received remote track:', event.track.kind);
                    remoteStream = event.streams[0];
                    
                    if (event.track.kind === 'video') {
                        const remoteVideo = document.getElementById('remote-video');
                        if (remoteVideo) {
                            remoteVideo.srcObject = remoteStream;
                            remoteVideo.autoplay = true;
                            remoteVideo.playsInline = true;
                        }
                    } else if (event.track.kind === 'audio') {
                        // Handle audio for both video and audio calls
                        const remoteAudio = document.getElementById('remote-audio') || document.getElementById('remote-video');
                        if (remoteAudio) {
                            remoteAudio.srcObject = remoteStream;
                            remoteAudio.autoplay = true;
                            remoteAudio.volume = 1.0;
                            remoteAudio.muted = false;
                            
                            // Force play for audio
                            remoteAudio.play().catch(e => console.log('Audio play failed:', e));
                        }
                    }
                    
                    // Update call status
                    const statusElement = document.getElementById('call-status') || document.getElementById('audio-call-status');
                    if (statusElement) {
                        statusElement.textContent = 'Connected';
                    }
                };

                // Handle connection state changes
                peerConnection.onconnectionstatechange = () => {
                    const statusElement = document.getElementById('call-status') || document.getElementById('audio-call-status');
                    if (statusElement) {
                        switch(peerConnection.connectionState) {
                            case 'connecting':
                                statusElement.textContent = 'Connecting...';
                                break;
                            case 'connected':
                                statusElement.textContent = 'Connected';
                                break;
                            case 'disconnected':
                                statusElement.textContent = 'Disconnected';
                                break;
                            case 'failed':
                                statusElement.textContent = 'Connection Failed';
                                setTimeout(endCall, 3000);
                                break;
                        }
                    }
                };

                // Handle ICE candidates
                peerConnection.onicecandidate = (event) => {
                    if (event.candidate) {
                        chatSocket.emit('ice-candidate', {
                            callId: callId,
                            candidate: event.candidate
                        });
                    }
                };

                // If this is the caller, create offer
                if (!isReceiver) {
                    const offer = await peerConnection.createOffer();
                    await peerConnection.setLocalDescription(offer);

                    chatSocket.emit('call-offer', {
                        callId: callId,
                        offer: offer
                    });
                } else {
                    // Receiver will wait for offer
                    console.log('Waiting for call offer...');
                }

            } catch (error) {
                console.error('Error initializing call:', error);
                alert('Failed to initialize call: ' + error.message);
                endCall();
            }
        }

        function showCallInterface(type) {
            // Properly hide the main chat interface
            const header = document.querySelector('header');
            const main = document.querySelector('main');
            const footer = document.querySelector('footer');
            
            if (header) {
                header.style.display = 'none';
                header.style.visibility = 'hidden';
            }
            if (main) {
                main.style.display = 'none';
                main.style.visibility = 'hidden';
            }
            if (footer) {
                footer.style.display = 'none';
                footer.style.visibility = 'hidden';
            }

            // Prevent scrolling on body during call
            document.body.style.overflow = 'hidden';
            document.documentElement.style.overflow = 'hidden';

            const callInterface = document.createElement('div');
            callInterface.id = 'call-interface';
            callInterface.className = 'fixed inset-0 bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 z-[9999] flex flex-col';

            callInterface.innerHTML = `
                <!-- Call Header -->
                <div class="bg-black bg-opacity-30 p-4 flex items-center justify-between">
                    <div class="flex items-center space-x-3">
                        <img src="<%= otherUser.avatar || '/avatars/default-avatar.png' %>" 
                             alt="<%= otherUser.username %>" 
                             class="w-12 h-12 rounded-full border-2 border-white shadow-lg">
                        <div>
                            <h3 class="text-white text-lg font-semibold"><%= otherUser.username %></h3>
                            <p class="text-gray-300 text-sm" id="call-status">Connecting...</p>
                        </div>
                    </div>
                    <div class="text-white text-sm" id="call-timer">00:00</div>
                </div>

                <!-- Video Container -->
                <div class="flex-1 flex justify-center items-center p-6 gap-6">
                    ${type === 'video' ? `
                    <!-- Remote Video (Large) -->
                    <div class="relative flex-1 max-w-2xl">
                        <video id="remote-video" autoplay class="w-full h-96 bg-gray-800 rounded-2xl shadow-2xl object-cover"></video>
                        <div class="absolute bottom-4 left-4 bg-black bg-opacity-50 text-white px-3 py-1 rounded-full text-sm font-medium">
                            <%= otherUser.username %>
                        </div>
                        <!-- Local Video (Small overlay) -->
                        <div class="absolute top-4 right-4 w-32 h-24">
                            <video id="local-video" autoplay muted class="w-full h-full bg-gray-700 rounded-lg shadow-lg object-cover"></video>
                            <div class="absolute bottom-1 left-1 bg-black bg-opacity-50 text-white px-2 py-0.5 rounded text-xs">You</div>
                        </div>
                    </div>
                    ` : `
                    <!-- Audio Call Interface -->
                    <div class="flex flex-col items-center space-y-8">
                        <div class="relative">
                            <div class="w-48 h-48 bg-gradient-to-br from-primary-500 to-primary-700 rounded-full flex items-center justify-center shadow-2xl">
                                <img src="<%= otherUser.avatar || '/avatars/default-avatar.png' %>" 
                                     alt="<%= otherUser.username %>" 
                                     class="w-40 h-40 rounded-full object-cover border-4 border-white shadow-lg">
                            </div>
                            <div class="absolute inset-0 w-48 h-48 rounded-full border-4 border-green-400 animate-pulse"></div>
                        </div>
                        <div class="text-center">
                            <h2 class="text-white text-2xl font-bold mb-2"><%= otherUser.username %></h2>
                            <p class="text-gray-300" id="audio-call-status">Audio Call in Progress</p>
                        </div>
                        <!-- Hidden audio/video elements for audio calls -->
                        <video id="local-video" autoplay muted playsinline class="hidden"></video>
                        <video id="remote-video" autoplay playsinline class="hidden" volume="1.0"></video>
                        <audio id="remote-audio" autoplay volume="1.0" class="hidden"></audio>
                    </div>
                    `}
                </div>

                <!-- Call Controls -->
                <div class="bg-black bg-opacity-30 p-6">
                    <div class="flex justify-center space-x-6">
                        <button id="toggle-audio" class="bg-gray-600 hover:bg-gray-700 text-white p-4 rounded-full transition-all duration-200 shadow-lg hover:shadow-xl transform hover:scale-105">
                            <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M7 4a3 3 0 016 0v4a3 3 0 11-6 0V4zm4 10.93A7.001 7.001 0 0017 8a1 1 0 10-2 0A5 5 0 015 8a1 1 0 00-2 0 7.001 7.001 0 006 6.93V17H6a1 1 0 100 2h8a1 1 0 100-2h-3v-2.07z" clip-rule="evenodd"></path>
                            </svg>
                        </button>
                        ${type === 'video' ? `
                        <button id="toggle-video" class="bg-gray-600 hover:bg-gray-700 text-white p-4 rounded-full transition-all duration-200 shadow-lg hover:shadow-xl transform hover:scale-105">
                            <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20">
                                <path d="M2 6a2 2 0 012-2h6a2 2 0 012 2v6a2 2 0 01-2 2H4a2 2 0 01-2-2V6zM14.553 7.106A1 1 0 0014 8v4a1 1 0 00.553.894l2 1A1 1 0 0018 13V7a1 1 0 00-1.447-.894l-2 1z"></path>
                            </svg>
                        </button>
                        ` : ''}
                        <button id="end-call" onclick="endCall()" class="bg-red-500 hover:bg-red-600 text-white p-4 rounded-full transition-all duration-200 shadow-lg hover:shadow-xl transform hover:scale-105">
                            <svg class="w-7 h-7" fill="currentColor" viewBox="0 0 20 20">
                                <path d="M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z"></path>
                            </svg>
                        </button>
                    </div>
                </div>
            `;

            document.body.appendChild(callInterface);

            // Start call timer
            startCallTimer();

            // Add event listeners for controls
            document.getElementById('toggle-audio').addEventListener('click', toggleAudio);
            if (type === 'video') {
                document.getElementById('toggle-video').addEventListener('click', toggleVideo);
            }
        }

        function toggleAudio() {
            if (localStream) {
                const audioTrack = localStream.getAudioTracks()[0];
                if (audioTrack) {
                    audioTrack.enabled = !audioTrack.enabled;
                    const button = document.getElementById('toggle-audio');
                    button.classList.toggle('bg-red-500', !audioTrack.enabled);
                }
            }
        }

        function toggleVideo() {
            if (localStream) {
                const videoTrack = localStream.getVideoTracks()[0];
                if (videoTrack) {
                    videoTrack.enabled = !videoTrack.enabled;
                    const button = document.getElementById('toggle-video');
                    button.classList.toggle('bg-red-500', !videoTrack.enabled);
                }
            }
        }

        let callStartTime = null;
        let callTimerInterval = null;

        function startCallTimer() {
            callStartTime = Date.now();
            callTimerInterval = setInterval(() => {
                const elapsed = Date.now() - callStartTime;
                const minutes = Math.floor(elapsed / 60000);
                const seconds = Math.floor((elapsed % 60000) / 1000);
                const timerElement = document.getElementById('call-timer');
                if (timerElement) {
                    timerElement.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
                }
            }, 1000);
        }

        function endCall() {
            isCallActive = false;

            // Clear call timer
            if (callTimerInterval) {
                clearInterval(callTimerInterval);
                callTimerInterval = null;
            }

            // Stop local stream
            if (localStream) {
                localStream.getTracks().forEach(track => track.stop());
                localStream = null;
            }

            // Close peer connection
            if (peerConnection) {
                peerConnection.close();
                peerConnection = null;
            }

            // Remove call interface
            const callInterface = document.getElementById('call-interface');
            if (callInterface) {
                callInterface.remove();
            }

            // Properly restore main chat interface
            const header = document.querySelector('header');
            const main = document.querySelector('main');
            const footer = document.querySelector('footer');
            
            if (header) {
                header.style.display = '';
                header.style.visibility = 'visible';
            }
            if (main) {
                main.style.display = '';
                main.style.visibility = 'visible';
                main.style.overflow = '';
            }
            if (footer) {
                footer.style.display = '';
                footer.style.visibility = 'visible';
            }

            // Reset body styles
            document.body.style.overflow = '';
            document.documentElement.style.overflow = '';

            // Scroll to bottom of messages
            setTimeout(() => {
                const messagesContainer = document.getElementById('messages-container');
                if (messagesContainer) {
                    messagesContainer.scrollTop = messagesContainer.scrollHeight;
                }
            }, 100);

            // Notify server
            if (currentCall) {
                fetch(`/call/${currentCall.callId}/end`, {
                    method: 'POST'
                }).catch(error => console.error('Error ending call:', error));

                chatSocket.emit('call-ended', { callId: currentCall.callId });
                currentCall = null;
            }
        }

        // Socket event handlers for WebRTC signaling
        chatSocket.on('call-offer', async (data) => {
            if (currentCall && currentCall.callId === data.callId && peerConnection) {
                try {
                    await peerConnection.setRemoteDescription(data.offer);
                    const answer = await peerConnection.createAnswer();
                    await peerConnection.setLocalDescription(answer);

                    chatSocket.emit('call-answer', {
                        callId: data.callId,
                        answer: answer
                    });
                } catch (error) {
                    console.error('Error handling call offer:', error);
                }
            }
        });

        chatSocket.on('call-answer', async (data) => {
            if (currentCall && currentCall.callId === data.callId && peerConnection) {
                try {
                    await peerConnection.setRemoteDescription(data.answer);
                } catch (error) {
                    console.error('Error handling call answer:', error);
                }
            }
        });

        chatSocket.on('ice-candidate', async (data) => {
            if (currentCall && currentCall.callId === data.callId && peerConnection) {
                try {
                    await peerConnection.addIceCandidate(data.candidate);
                } catch (error) {
                    console.error('Error adding ICE candidate:', error);
                }
            }
        });

        chatSocket.on('call-ended', () => {
            endCall();
        });

        // Handle page unload
        window.addEventListener('beforeunload', () => {
            if (isCallActive) {
                endCall();
            }
        });

        // Functions to initiate calls from chat interface
        window.initiateAudioCall = async function() {
            try {
                const response = await fetch('/call/initiate', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        receiverId: '<%= otherUser._id %>',
                        type: 'audio'
                    })
                });

                const result = await response.json();
                if (result.success) {
                    await initializeCall(result.callId, 'audio', false);
                } else {
                    alert(result.error);
                }
            } catch (error) {
                console.error('Error initiating audio call:', error);
                alert('Failed to start audio call');
            }
        };

        window.initiateVideoCall = async function() {
            try {
                const response = await fetch('/call/initiate', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        receiverId: '<%= otherUser._id %>',
                        type: 'video'
                    })
                });

                const result = await response.json();
                if (result.success) {
                    await initializeCall(result.callId, 'video', false);
                } else {
                    alert(result.error);
                }
            } catch (error) {
                console.error('Error initiating video call:', error);
                alert('Failed to start video call');
            }
        };

        // Handle incoming calls on chat page
        chatSocket.on('incoming-call', (data) => {
            if (!isCallActive) {
                // Show incoming call notification
                showIncomingCallNotification(data);
            }
        });

        function showIncomingCallNotification(data) {
            const notification = document.createElement('div');
            notification.id = 'incoming-call-notification';
            notification.className = 'fixed top-4 left-1/2 transform -translate-x-1/2 bg-white p-6 rounded-lg shadow-xl border z-50 max-w-md';
            
            notification.innerHTML = `
                <div class="text-center">
                    <div class="mb-4">
                        <img src="${data.caller.avatar || '/avatars/default-avatar.png'}" alt="${data.caller.username}" class="w-16 h-16 rounded-full mx-auto mb-2">
                        <h3 class="text-lg font-semibold">${data.caller.username}</h3>
                        <p class="text-gray-600">is calling you</p>
                        <p class="text-sm text-gray-500">${data.type.charAt(0).toUpperCase() + data.type.slice(1)} Call</p>
                    </div>
                    <div class="flex justify-center space-x-4">
                        <button onclick="acceptCall('${data.callId}', '${data.type}')" 
                                class="bg-green-500 text-white px-6 py-2 rounded-lg hover:bg-green-600 transition-colors">
                            Accept
                        </button>
                        <button onclick="declineCall('${data.callId}')" 
                                class="bg-red-500 text-white px-6 py-2 rounded-lg hover:bg-red-600 transition-colors">
                            Decline
                        </button>
                    </div>
                </div>
            `;
            
            document.body.appendChild(notification);
        }

        window.acceptCall = async function(callId, type) {
            try {
                const response = await fetch(`/call/${callId}/respond`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ action: 'accept' })
                });

                if (response.ok) {
                    hideCallNotification();
                    await initializeCall(callId, type, true);
                }
            } catch (error) {
                console.error('Error accepting call:', error);
            }
        };

        window.declineCall = async function(callId) {
            try {
                await fetch(`/call/${callId}/respond`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ action: 'decline' })
                });
                hideCallNotification();
            } catch (error) {
                console.error('Error declining call:', error);
            }
        };

        function hideCallNotification() {
            const notification = document.getElementById('incoming-call-notification');
            if (notification) {
                notification.remove();
            }
        }
  </script>
</body>
</html>