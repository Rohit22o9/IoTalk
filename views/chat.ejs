
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chat with <%= otherUser.username %> - ModernChat</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="/style.css">
  <script>
    tailwind.config = {
      theme: {
        extend: {
          colors: {
            primary: {
              50: '#eff6ff', 100: '#dbeafe',
              500: '#3b82f6', 600: '#2563eb',
              700: '#1d4ed8', 800: '#1e40af', 900: '#1e3a8a',
            },
            secondary: {
              50: '#f8fafc', 100: '#f1f5f9',
              500: '#64748b', 600: '#475569',
              700: '#334155', 800: '#1e293b', 900: '#0f172a',
            }
          }
        }
      }
    }
  </script>
  <style>
    body, html {
      overflow-x: hidden;
    }
    .chat-messages {
      overflow-x: hidden;
      word-wrap: break-word;
      word-break: break-word;
    }
    /* Voice message styles */
    .voice-message-container {
      display: flex;
      align-items: center;
      gap: 10px;
      background: rgba(255, 255, 255, 0.8);
      backdrop-filter: blur(5px);
      padding: 8px 12px;
      border-radius: 1rem;
      max-width: 70%;
      word-break: break-word;
    }
    .voice-play-btn {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 40px;
      height: 40px;
      border-radius: 50%;
      background-color: #3b82f6;
      color: white;
      cursor: pointer;
      transition: background-color 0.2s ease;
      flex-shrink: 0;
    }
    .voice-play-btn:hover {
      background-color: #2563eb;
    }
    .voice-progress-bar-container {
      flex-grow: 1;
      height: 6px;
      background-color: rgba(255, 255, 255, 0.5);
      border-radius: 3px;
      cursor: pointer;
      position: relative;
      overflow: hidden;
    }
    .voice-progress {
      height: 100%;
      background-color: #3b82f6;
      border-radius: 3px;
      width: 0%;
    }
    .voice-duration {
      font-size: 0.75rem;
      color: #64748b;
      min-width: 40px;
      text-align: right;
      flex-shrink: 0;
    }
  </style>
</head>

<body class="h-screen bg-gradient-to-br from-secondary-50 via-white to-primary-50 overflow-hidden">
  <div class="h-full flex flex-col">
    <!-- Header -->
    <header class="bg-white/90 backdrop-blur-lg border-b border-secondary-200 px-4 py-3 flex-shrink-0">
      <div class="flex items-center space-x-4">
        <form action="/dashboard" method="GET" class="inline">
          <button type="submit" class="p-2 rounded-lg hover:bg-secondary-100 transition-colors duration-200">
            <svg class="h-5 w-5 text-secondary-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
            </svg>
          </button>
        </form>
        <div class="flex items-center space-x-3">
          <img src="<%= otherUser.avatar || '/avatars/default-avatar.png' %>"
               alt="<%= otherUser.username %>"
               class="w-10 h-10 rounded-full object-cover border-2 border-white shadow-md">
          <div>
            <h1 class="text-lg font-semibold text-secondary-900"><%= otherUser.username %></h1>
            <p class="text-xs text-gray-500" id="typing-indicator"></p>
          </div>
        </div>
        <div class="flex space-x-2 ml-auto">
          <button onclick="initiateCall('audio')" class="p-3 rounded-xl bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white transition-all duration-200 transform hover:scale-105 active:scale-95 shadow-lg hover:shadow-xl" title="Audio Call">
            <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
              <path d="M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z"></path>
            </svg>
          </button>
          <button onclick="initiateCall('video')" class="p-3 rounded-xl bg-gradient-to-r from-primary-500 to-primary-600 hover:from-primary-600 hover:to-primary-700 text-white transition-all duration-200 transform hover:scale-105 active:scale-95 shadow-lg hover:shadow-xl" title="Video Call">
            <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
              <path d="M2 6a2 2 0 012-2h6a2 2 0 012 2v6a2 2 0 01-2 2H4a2 2 0 01-2-2V6zM14.553 7.106A1 1 0 0014 8v4a1 1 0 00.553.894l2 1A1 1 0 0018 13V7a1 1 0 00-1.447-.894l-2 1z"></path>
            </svg>
          </button>
        </div>
      </div>
    </header>

    <!-- Messages Container -->
    <main class="flex-1 overflow-y-auto p-4 space-y-4 chat-messages" id="messages-container">
      <!-- Typing Indicator -->
      <div id="typing-indicator-container" class="hidden flex justify-start">
        <div class="bg-white/80 backdrop-blur-lg px-4 py-2 rounded-2xl rounded-bl-md border border-white/20 shadow-lg">
          <div class="flex items-center space-x-2">
            <div class="flex space-x-1">
              <div class="w-2 h-2 bg-secondary-400 rounded-full animate-bounce"></div>
              <div class="w-2 h-2 bg-secondary-400 rounded-full animate-bounce" style="animation-delay: 0.1s"></div>
              <div class="w-2 h-2 bg-secondary-400 rounded-full animate-bounce" style="animation-delay: 0.2s"></div>
            </div>
            <span class="text-xs text-secondary-500" id="typing-text">Typing...</span>
          </div>
        </div>
      </div>

      <% chats.forEach(chat => { %>
        <% const isOwn = chat.from.toString() === currentUser._id.toString(); %>
        <% const ext = chat.media ? chat.media.split('.').pop().toLowerCase() : ''; %>
        <% const isImage = ['jpg', 'jpeg', 'png', 'gif', 'webp'].includes(ext); %>
        <% const isVideo = ['mp4', 'avi', 'mov', 'wmv', 'flv', 'mkv', 'webm'].includes(ext); %>
        <% const isAudio = ['mp3', 'wav', 'ogg', 'webm', 'm4a'].includes(ext); %>
        
        <div class="flex <%= isOwn ? 'justify-end' : 'justify-start' %>">
          <div class="max-w-xs lg:max-w-md px-4 py-3 rounded-2xl
                      <%= isOwn ? 'bg-gradient-to-r from-primary-500 to-primary-600 text-white rounded-br-md' : 'bg-white/80 backdrop-blur-lg text-secondary-900 rounded-bl-md border border-white/20' %> shadow-lg">
            
            <% if (chat.media) { %>
              <% if (isImage) { %>
                <div class="mb-2">
                  <img src="<%= chat.media.startsWith('/') ? chat.media : '/' + chat.media %>"
                       alt="Media" 
                       class="rounded-md max-h-60 shadow cursor-pointer hover:opacity-90 transition-opacity"
                       onclick="openMediaPreview(this.src, 'image', '<%= (chat.originalName || chat.media.split('/').pop()).replace(/'/g, '&apos;') %>')">
                </div>
              <% } else if (isVideo) { %>
                <div class="mb-2">
                  <div class="relative cursor-pointer group" 
                       onclick="openMediaPreview('<%= chat.media.startsWith('/') ? chat.media : '/' + chat.media %>', 'video', '<%= (chat.originalName || chat.media.split('/').pop()).replace(/'/g, '&apos;') %>')">
                    <video class="rounded-md max-h-60 shadow w-full" style="max-width: 100%;" preload="metadata">
                      <source src="<%= chat.media.startsWith('/') ? chat.media : '/' + chat.media %>" type="video/<%= ext %>">
                      Your browser does not support the video tag.
                    </video>
                    <div class="absolute inset-0 flex items-center justify-center bg-black bg-opacity-30 opacity-0 group-hover:opacity-100 transition-opacity rounded-md">
                      <div class="bg-white bg-opacity-80 rounded-full p-3">
                        <svg class="h-8 w-8 text-primary-600" fill="currentColor" viewBox="0 0 24 24">
                          <path d="M8 5v14l11-7z"/>
                        </svg>
                      </div>
                    </div>
                  </div>
                </div>
              <% } else if (isAudio) { %>
                <div class="voice-message-container">
                  <button class="voice-play-btn" data-audio-src="<%= chat.media.startsWith('/') ? chat.media : '/' + chat.media %>">
                    <svg class="play-icon h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.166a1 1 0 00-1.197-.773 1 1 0 00-.773 1.197l.62 4.361a1 1 0 01-.467 1.062L10 20v-8.752c0-.248.537-.484 1.2-.659l3.493-1.747Z"/>
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19v-6.752c0-.248.537-.484 1.2-.659l3.493-1.747a1 1 0 00.595-.883L14.752 11.166z"/>
                    </svg>
                    <svg class="pause-icon h-6 w-6 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 9v6m4-6v6m7-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
                    </svg>
                  </button>
                  <div class="voice-progress-bar-container">
                    <div class="voice-progress"></div>
                  </div>
                  <div class="voice-duration">0:00</div>
                </div>
              <% } else { %>
                <% const extColor = ext === 'pdf' ? 'text-red-500' :
                    ['doc','docx'].includes(ext) ? 'text-blue-600' :
                    ['xls','xlsx'].includes(ext) ? 'text-green-600' :
                    ['ppt','pptx'].includes(ext) ? 'text-orange-500' :
                    ['zip','rar'].includes(ext) ? 'text-yellow-500' : 'text-gray-600';
                %>
                <div class="bg-gray-100 rounded-md p-3 mb-2 shadow flex flex-col space-y-2">
                  <div class="flex items-center space-x-3">
                    <svg class="w-6 h-6 <%= extColor %>" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                      <path d="M12 2H6a2 2 0 00-2 2v16a2 2 0 002 2h12a2 2 0 002-2V8z"/>
                      <polyline points="12 2 12 8 18 8"/>
                    </svg>
                    <div>
                      <p class="font-semibold text-gray-800 text-sm truncate max-w-xs">
                        <%= chat.originalName || chat.media.split('/').pop() %>
                      </p>
                      <p class="text-xs text-gray-500 uppercase">DOCUMENT</p>
                    </div>
                  </div>
                  <div class="flex space-x-3 mt-1">
                    <a href="<%= chat.media.startsWith('/') ? chat.media : '/' + chat.media %>" target="_blank"
                       class="text-xs px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600">Open</a>
                    <a href="<%= chat.media.startsWith('/') ? chat.media : '/' + chat.media %>" download="<%= chat.originalName || chat.media.split('/').pop() %>"
                       class="text-xs px-3 py-1 bg-green-500 text-white rounded hover:bg-green-600">Download</a>
                  </div>
                </div>
              <% } %>
            <% } %>
            
            <% if (chat.msg) { %>
              <p class="text-sm leading-relaxed"><%= chat.msg %></p>
            <% } %>
            
            <div class="flex items-center justify-between mt-2">
              <span class="text-xs <%= isOwn ? 'text-primary-100' : 'text-secondary-500' %>">
                <%= new Date(chat.created_at).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' }) %>
              </span>
            </div>
          </div>
        </div>
      <% }); %>
    </main>

    <!-- Media Preview (positioned above the footer) -->
    <div id="filePreview" class="hidden fixed bottom-20 left-0 right-0 z-10 mx-4 mb-2">
      <div class="flex items-center justify-between p-3 bg-white/90 backdrop-blur-lg border border-secondary-200 rounded-xl shadow-lg">
        <div id="previewContent" class="flex items-center space-x-3 flex-1 overflow-hidden"></div>
        <button id="removeFile" type="button" class="ml-3 p-2 rounded-full hover:bg-secondary-100 text-secondary-500 hover:text-red-500 transition-colors flex-shrink-0">
          <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
    </div>

    <!-- Voice Recording Modal -->
    <div id="voice-recording-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
      <div class="bg-white rounded-2xl p-6 mx-4 max-w-sm w-full">
        <div class="text-center">
          <div class="mb-4">
            <div class="w-20 h-20 bg-red-500 rounded-full mx-auto flex items-center justify-center animate-pulse">
              <svg class="h-10 w-10 text-white" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M7 4a3 3 0 016 0v4a3 3 0 11-6 0V4zm4 10.93A7.001 7.001 0 0017 8a1 1 0 10-2 0A5 5 0 015 8a1 1 0 00-2 0 7.001 7.001 0 006 6.93V17H6a1 1 0 100 2h8a1 1 0 100-2h-3v-2.07z" clip-rule="evenodd"></path>
              </svg>
            </div>
          </div>
          <h3 class="text-lg font-semibold text-gray-900 mb-2">Recording Voice Message</h3>
          <p class="text-sm text-gray-500 mb-4">Tap to stop recording</p>
          <div class="flex space-x-3 justify-center">
            <button onclick="stopVoiceRecording()" class="bg-red-500 text-white px-6 py-2 rounded-lg hover:bg-red-600 transition-colors">
              Stop & Send
            </button>
            <button onclick="cancelVoiceRecording()" class="bg-gray-500 text-white px-6 py-2 rounded-lg hover:bg-gray-600 transition-colors">
              Cancel
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Message Input -->
    <footer class="fixed bottom-0 left-0 right-0 bg-white/90 backdrop-blur-lg border-t border-secondary-200" style="z-index: 1;">
      <div class="p-4">
        <form id="message-form" enctype="multipart/form-data" class="flex items-center space-x-3">
          <input type="file" id="media-input" name="media" class="hidden" accept="image/*,video/*,audio/*,.pdf,.doc,.docx,.xls,.xlsx,.ppt,.pptx,.zip,.rar">
          <label for="media-input" class="cursor-pointer p-3 rounded-xl bg-secondary-100 hover:bg-secondary-200 transition">
            <svg class="h-5 w-5 text-secondary-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.172 7l-6.586 6.586a2 2 0 102.828 2.828l6.414-6.586a4 4 0 00-5.656-5.656l-6.415 6.585a6 6 0 108.486 8.486L20.5 13"></path>
            </svg>
          </label>
          
          <!-- Voice Message Button -->
          <button type="button" id="voice-message-btn" onclick="startVoiceRecording()" class="cursor-pointer p-3 rounded-xl bg-secondary-100 hover:bg-secondary-200 transition">
            <svg class="h-5 w-5 text-secondary-600" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M7 4a3 3 0 016 0v4a3 3 0 11-6 0V4zm4 10.93A7.001 7.001 0 0017 8a1 1 0 10-2 0A5 5 0 015 8a1 1 0 00-2 0 7.001 7.001 0 006 6.93V17H6a1 1 0 100 2h8a1 1 0 100-2h-3v-2.07z" clip-rule="evenodd"></path>
            </svg>
          </button>
          
          <div class="flex-1 relative">
            <textarea name="msg" id="message-input" placeholder="Type your message..."
                   class="w-full px-4 py-3 bg-secondary-50 border border-secondary-200 rounded-2xl focus:ring-2 focus:ring-primary-500 focus:border-transparent transition-all duration-200 pr-12 resize-none"
                   autocomplete="off" rows="1" style="min-height: 48px; overflow-y: hidden;"></textarea>
          </div>
          
          <button type="submit" class="inline-flex items-center justify-center w-12 h-12 bg-gradient-to-r from-primary-500 to-primary-600 hover:from-primary-600 hover:to-primary-700 text-white rounded-2xl focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-all duration-200 transform hover:scale-105 active:scale-95 shadow-lg hover:shadow-xl">
            <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
            </svg>
          </button>
        </form>
      </div>
    </footer>
  </div>

  <!-- Full-Screen Media Preview Modal -->
  <div id="mediaPreviewModal" class="hidden fixed inset-0 bg-black bg-opacity-90 z-50 flex items-center justify-center">
    <div class="relative max-w-screen-lg max-h-screen-lg w-full h-full flex items-center justify-center p-4">
      <!-- Close Button -->
      <button onclick="closeMediaPreview()" 
              class="absolute top-4 right-4 z-60 bg-black bg-opacity-50 text-white p-2 rounded-full hover:bg-opacity-70 transition-colors">
        <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
      
      <!-- Media Content Container -->
      <div id="previewMediaContainer" class="flex items-center justify-center w-full h-full">
        <!-- Content will be dynamically inserted here -->
      </div>
      
      <!-- Download Button -->
      <button id="downloadMediaBtn" onclick="downloadMedia()" 
              class="absolute bottom-4 right-4 z-60 bg-primary-500 hover:bg-primary-600 text-white px-4 py-2 rounded-lg transition-colors flex items-center space-x-2">
        <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3M3 17V7a2 2 0 012-2h6l2 2h6a2 2 0 012 2v10a2 2 0 01-2 2H5a2 2 0 01-2-2z"></path>
        </svg>
        <span>Download</span>
      </button>
    </div>
  </div>

  <script src="/socket.io/socket.io.js"></script>
  <script src="/js/notifications.js"></script>
  <script>
    const messagesContainer = document.getElementById('messages-container');
    const messageForm = document.getElementById('message-form');
    const msgInput = document.getElementById('message-input');
    const mediaInput = document.getElementById('media-input');
    const typingIndicator = document.getElementById('typing-indicator');
    const typingIndicatorContainer = document.getElementById('typing-indicator-container');
    const typingText = document.getElementById('typing-text');
    const filePreview = document.getElementById('filePreview');
    const previewContent = document.getElementById('previewContent');
    const removeFile = document.getElementById('removeFile');
    
    const socket = io();
    const currentUserId = '<%= currentUser._id %>';
    const otherUserId = '<%= otherUser._id %>';
    const currentUsername = '<%= currentUser.username %>';
    
    let isTyping = false;
    let typingTimer;
    let selectedFile = null;

    // Join the chat room
    socket.emit('join', currentUserId);

    // Initialize notification manager
    if (window.notificationManager) {
        window.notificationManager.setSocket(socket, currentUserId);
    }

    // Request notification permission explicitly
    if ('Notification' in window && Notification.permission === 'default') {
        Notification.requestPermission().then(permission => {
            console.log('Notification permission:', permission);
        });
    }

    // Scroll to bottom
    function scrollToBottom() {
      messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }
    scrollToBottom();

    function escapeHtml(text) {
      if (!text) return '';
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }

    // Format file size utility
    function formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    // Show media preview function
    function showMediaPreview(file) {
        console.log('Showing media preview for:', file.name, file.type);
        
        if (!filePreview || !previewContent) {
            console.error('Preview elements not found');
            return;
        }

        // Clear previous preview
        previewContent.innerHTML = '';

        try {
            if (file.type.startsWith('image/')) {
                const img = document.createElement('img');
                img.src = URL.createObjectURL(file);
                img.className = 'max-h-32 max-w-full rounded object-contain border border-secondary-200';
                img.alt = file.name;
                img.onload = function() {
                    URL.revokeObjectURL(this.src);
                };

                const imgContainer = document.createElement('div');
                imgContainer.className = 'flex items-center space-x-3';
                imgContainer.appendChild(img);

                const textDiv = document.createElement('div');
                textDiv.innerHTML = `
                    <p class="text-sm font-medium text-secondary-900">${escapeHtml(file.name)}</p>
                    <p class="text-xs text-secondary-500">Image • ${formatFileSize(file.size)}</p>
                `;
                imgContainer.appendChild(textDiv);
                previewContent.appendChild(imgContainer);

            } else if (file.type.startsWith('video/')) {
                const video = document.createElement('video');
                video.src = URL.createObjectURL(file);
                video.className = 'max-h-32 max-w-40 rounded border border-secondary-200';
                video.controls = true;
                video.muted = true;
                video.preload = 'metadata';

                const videoContainer = document.createElement('div');
                videoContainer.className = 'flex items-center space-x-3';
                videoContainer.appendChild(video);

                const textDiv = document.createElement('div');
                textDiv.innerHTML = `
                    <p class="text-sm font-medium text-secondary-900">${escapeHtml(file.name)}</p>
                    <p class="text-xs text-secondary-500">Video • ${formatFileSize(file.size)}</p>
                `;
                videoContainer.appendChild(textDiv);
                previewContent.appendChild(videoContainer);

            } else if (file.type.startsWith('audio/')) {
                const audioDiv = document.createElement('div');
                audioDiv.className = 'flex items-center space-x-3 p-2 bg-secondary-50 rounded-lg w-full';
                audioDiv.innerHTML = `
                    <svg class="w-8 h-8 text-green-500 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M9.383 3.076A1 1 0 0110 4v12a1 1 0 01-1.617.793L4.586 14H2a1 1 0 01-1-1V7a1 1 0 011-1h2.586L8.383 3.076zM12 8a1 1 0 012 0v4a1 1 0 11-2 0V8zm4-1a1 1 0 011 1v2a1 1 0 11-2 0V8a1 1 0 011-1z"/>
                    </svg>
                    <div class="flex-1 min-w-0">
                        <p class="text-sm font-medium text-secondary-900 truncate">${escapeHtml(file.name)}</p>
                        <p class="text-xs text-secondary-500">Audio File • ${formatFileSize(file.size)}</p>
                    </div>
                `;
                previewContent.appendChild(audioDiv);

            } else {
                // Document preview
                const docDiv = document.createElement('div');
                docDiv.className = 'flex items-center space-x-3 p-2 bg-secondary-50 rounded-lg w-full';

                let iconColor = "text-blue-500";
                let fileType = "Document";

                // Different icons for different file types
                if (file.type.includes('pdf') || file.name.endsWith('.pdf')) {
                    iconColor = "text-red-500";
                    fileType = "PDF";
                } else if (file.type.includes('word') || file.name.endsWith('.doc') || file.name.endsWith('.docx')) {
                    iconColor = "text-blue-600";
                    fileType = "Word Document";
                } else if (file.type.includes('sheet') || file.name.endsWith('.xls') || file.name.endsWith('.xlsx')) {
                    iconColor = "text-green-600";
                    fileType = "Spreadsheet";
                } else if (file.type.includes('presentation') || file.name.endsWith('.ppt') || file.name.endsWith('.pptx')) {
                    iconColor = "text-orange-500";
                    fileType = "Presentation";
                } else if (file.name.endsWith('.zip') || file.name.endsWith('.rar')) {
                    iconColor = "text-yellow-500";
                    fileType = "Archive";
                }

                docDiv.innerHTML = `
                    <svg class="w-8 h-8 ${iconColor} flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
                    </svg>
                    <div class="flex-1 min-w-0">
                        <p class="text-sm font-medium text-secondary-900 truncate" title="${escapeHtml(file.name)}">${escapeHtml(file.name)}</p>
                        <p class="text-xs text-secondary-500">${fileType} • ${formatFileSize(file.size)}</p>
                    </div>
                `;
                previewContent.appendChild(docDiv);
            }

            filePreview.classList.remove('hidden');
            console.log('Media preview shown successfully');

            // Scroll to show the preview
            setTimeout(() => {
                filePreview.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
            }, 100);

        } catch (error) {
            console.error('Error creating media preview:', error);
            hideMediaPreview();
        }
    }

    // Hide media preview function
    function hideMediaPreview() {
        if (filePreview) {
            filePreview.classList.add('hidden');
        }

        if (previewContent) {
            // Clean up object URLs to prevent memory leaks
            const images = previewContent.querySelectorAll('img');
            const videos = previewContent.querySelectorAll('video');

            images.forEach(img => {
                if (img.src.startsWith('blob:')) {
                    URL.revokeObjectURL(img.src);
                }
            });

            videos.forEach(video => {
                if (video.src.startsWith('blob:')) {
                    URL.revokeObjectURL(video.src);
                }
            });

            previewContent.innerHTML = '';
        }
    }

    // File input change
    mediaInput.addEventListener('change', (e) => {
        const file = e.target.files[0];
        if (file) {
            selectedFile = file;
            showMediaPreview(file);
        } else {
            hideMediaPreview();
        }
    });

    // Remove file preview
    removeFile.addEventListener('click', () => {
        selectedFile = null;
        hideMediaPreview();
        mediaInput.value = '';
    });

    // Typing detection
    msgInput.addEventListener('input', () => {
        if (!isTyping) {
            isTyping = true;
            socket.emit('typing start', {
                to: otherUserId,
                from: currentUserId,
                username: currentUsername
            });
        }
        
        clearTimeout(typingTimer);
        typingTimer = setTimeout(() => {
            isTyping = false;
            socket.emit('typing stop', {
                to: otherUserId,
                from: currentUserId,
                username: currentUsername
            });
        }, 3000);
    });

    // Enter key handling
    msgInput.addEventListener('keydown', (e) => {
      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        messageForm.dispatchEvent(new Event('submit'));
      }
    });

    // Message form submission
    messageForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const message = msgInput.value.trim();
        if (!message && !selectedFile) return;

        const formData = new FormData();
        if (message) formData.append('msg', message);
        if (selectedFile) formData.append('media', selectedFile);

        try {
            const response = await fetch(`/chat/${otherUserId}`, {
                method: 'POST',
                body: formData
            });

            if (response.ok) {
                msgInput.value = '';
                selectedFile = null;
                hideMediaPreview();
                
                // Stop typing indicator
                socket.emit('typing stop', {
                    to: otherUserId,
                    from: currentUserId,
                    username: currentUsername
                });
                isTyping = false;

                // Reset input height
                msgInput.style.height = 'auto';
            } else {
                alert('Failed to send message');
            }
        } catch (error) {
            console.error('Error sending message:', error);
            alert('Failed to send message');
        }
    });

    // Socket event listeners
    socket.on('chat message', (data) => {
        if (data.to._id === currentUserId || data.from._id === currentUserId) {
            addMessageToChat(data);
            scrollToBottom();
        }
    });

    socket.on('user typing', (data) => {
        if (data.isTyping && data.userId !== currentUserId) {
            typingIndicator.textContent = `${data.username} is typing...`;
            typingText.textContent = `${data.username} is typing...`;
            typingIndicatorContainer.classList.remove('hidden');
            scrollToBottom();
        } else {
            typingIndicator.textContent = '';
            typingIndicatorContainer.classList.add('hidden');
        }
    });

    // Add message to chat
    function addMessageToChat(data) {
        const isOwn = data.from._id === currentUserId;
        const messageDiv = document.createElement('div');
        messageDiv.className = `flex ${isOwn ? 'justify-end' : 'justify-start'}`;
        
        let mediaContent = '';
        if (data.media) {
            const ext = data.media.split('.').pop().toLowerCase();
            const isImage = ['jpg', 'jpeg', 'png', 'gif', 'webp'].includes(ext);
            const isVideo = ['mp4', 'avi', 'mov', 'wmv', 'flv', 'mkv', 'webm'].includes(ext);
            const isAudio = ['mp3', 'wav', 'ogg', 'webm', 'm4a'].includes(ext);
            
            if (isImage) {
                mediaContent = `
                    <div class="mb-2">
                        <img src="${data.media}" alt="Media" class="rounded-md max-h-60 shadow cursor-pointer hover:opacity-90 transition-opacity" onclick="openMediaPreview('${data.media}', 'image', '${data.originalName || data.media.split('/').pop()}')">
                    </div>
                `;
            } else if (isVideo) {
                mediaContent = `
                    <div class="mb-2">
                        <div class="relative cursor-pointer group" onclick="openMediaPreview('${data.media}', 'video', '${data.originalName || data.media.split('/').pop()}')">
                            <video class="rounded-md max-h-60 shadow w-full" preload="metadata">
                                <source src="${data.media}" type="video/${ext}">
                            </video>
                            <div class="absolute inset-0 flex items-center justify-center bg-black bg-opacity-30 group-hover:bg-opacity-50 transition-all rounded-md">
                                <div class="bg-white bg-opacity-80 rounded-full p-3">
                                    <svg class="h-8 w-8 text-primary-600" fill="currentColor" viewBox="0 0 24 24">
                                        <path d="M8 5v14l11-7z"/>
                                    </svg>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            } else if (isAudio) {
                mediaContent = `
                    <div class="voice-message-container">
                        <button class="voice-play-btn" data-audio-src="${data.media}">
                            <svg class="play-icon h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.166a1 1 0 00-1.197-.773 1 1 0 00-.773 1.197l.62 4.361a1 1 0 01-.467 1.062L10 20v-8.752c0-.248.537-.484 1.2-.659l3.493-1.747Z"/>
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19v-6.752c0-.248.537-.484 1.2-.659l3.493-1.747a1 1 0 00.595-.883L14.752 11.166z"/>
                            </svg>
                            <svg class="pause-icon h-6 w-6 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 9v6m4-6v6m7-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
                            </svg>
                        </button>
                        <div class="voice-progress-bar-container">
                            <div class="voice-progress"></div>
                        </div>
                        <div class="voice-duration">0:00</div>
                    </div>
                `;
            } else {
                const extColor = ext === 'pdf' ? 'text-red-500' :
                    ['doc','docx'].includes(ext) ? 'text-blue-600' :
                    ['xls','xlsx'].includes(ext) ? 'text-green-600' :
                    ['ppt','pptx'].includes(ext) ? 'text-orange-500' :
                    ['zip','rar'].includes(ext) ? 'text-yellow-500' : 'text-gray-600';

                mediaContent = `
                    <div class="bg-gray-100 rounded-md p-3 mb-2 shadow flex flex-col space-y-2">
                        <div class="flex items-center space-x-3">
                            <svg class="w-6 h-6 ${extColor}" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                                <path d="M12 2H6a2 2 0 00-2 2v16a2 2 0 002 2h12a2 2 0 002-2V8z"/>
                                <polyline points="12 2 12 8 18 8"/>
                            </svg>
                            <div>
                                <p class="font-semibold text-gray-800 text-sm truncate max-w-xs">${data.originalName || data.media.split('/').pop()}</p>
                                <p class="text-xs text-gray-500 uppercase">DOCUMENT</p>
                            </div>
                        </div>
                        <div class="flex space-x-3 mt-1">
                            <a href="${data.media}" target="_blank" class="text-xs px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600">Open</a>
                            <a href="${data.media}" download="${data.originalName || data.media.split('/').pop()}" class="text-xs px-3 py-1 bg-green-500 text-white rounded hover:bg-green-600">Download</a>
                        </div>
                    </div>
                `;
            }
        }
        
        messageDiv.innerHTML = `
            <div class="max-w-xs lg:max-w-md px-4 py-3 rounded-2xl ${isOwn ? 'bg-gradient-to-r from-primary-500 to-primary-600 text-white rounded-br-md' : 'bg-white/80 backdrop-blur-lg text-secondary-900 rounded-bl-md border border-white/20'} shadow-lg">
                ${mediaContent}
                ${data.msg ? `<p class="text-sm leading-relaxed">${escapeHtml(data.msg)}</p>` : ''}
                <div class="flex items-center justify-between mt-2">
                    <span class="text-xs ${isOwn ? 'text-primary-100' : 'text-secondary-500'}">
                        ${new Date().toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}
                    </span>
                </div>
            </div>
        `;
        
        messagesContainer.appendChild(messageDiv);
        scrollToBottom();
    }

    // Voice message playback
    document.addEventListener('click', (e) => {
        if (e.target.closest('.voice-play-btn')) {
            const btn = e.target.closest('.voice-play-btn');
            toggleVoicePlayback(btn);
        }
    });

    function toggleVoicePlayback(button) {
        const audioSrc = button.dataset.audioSrc;
        const playIcon = button.querySelector('.play-icon');
        const pauseIcon = button.querySelector('.pause-icon');
        const progressBar = button.closest('.voice-message-container').querySelector('.voice-progress');
        const durationElement = button.closest('.voice-message-container').querySelector('.voice-duration');

        let audioElement = button.closest('.voice-message-container').querySelector('audio');
        if (!audioElement) {
            audioElement = document.createElement('audio');
            audioElement.src = audioSrc;
            button.closest('.voice-message-container').appendChild(audioElement);
        }

        if (audioElement.paused) {
            // Pause any other playing audio messages
            document.querySelectorAll('.voice-play-btn').forEach(btn => {
                const otherAudioElement = btn.closest('.voice-message-container').querySelector('audio');
                if (otherAudioElement && otherAudioElement !== audioElement && !otherAudioElement.paused) {
                    otherAudioElement.pause();
                    const otherPlayIcon = btn.querySelector('.play-icon');
                    const otherPauseIcon = btn.querySelector('.pause-icon');
                    if (otherPlayIcon) otherPlayIcon.classList.remove('hidden');
                    if (otherPauseIcon) otherPauseIcon.classList.add('hidden');
                    btn.classList.add('bg-primary-500');
                    btn.classList.remove('bg-gray-600');
                    btn.setAttribute('title', 'Play');
                }
            });

            audioElement.play();
            if (playIcon) playIcon.classList.add('hidden');
            if (pauseIcon) pauseIcon.classList.remove('hidden');
            button.classList.add('bg-gray-600');
            button.classList.remove('bg-primary-500');
            button.setAttribute('title', 'Pause');

            audioElement.ontimeupdate = () => {
                const progressWidth = (audioElement.currentTime / audioElement.duration) * 100;
                progressBar.style.width = `${progressWidth}%`;
                const currentTimeMinutes = Math.floor(audioElement.currentTime / 60);
                const currentTimeSeconds = Math.floor(audioElement.currentTime % 60);
                durationElement.textContent = `${currentTimeMinutes}:${currentTimeSeconds < 10 ? '0' : ''}${currentTimeSeconds}`;
            };

            audioElement.onended = () => {
                if (playIcon) playIcon.classList.remove('hidden');
                if (pauseIcon) pauseIcon.classList.add('hidden');
                button.classList.add('bg-primary-500');
                button.classList.remove('bg-gray-600');
                button.setAttribute('title', 'Play');
                progressBar.style.width = '0%';
                durationElement.textContent = '0:00';
            };
        } else {
            audioElement.pause();
            if (playIcon) playIcon.classList.remove('hidden');
            if (pauseIcon) pauseIcon.classList.add('hidden');
            button.classList.add('bg-primary-500');
            button.classList.remove('bg-gray-600');
            button.setAttribute('title', 'Play');
        }
    }

    // Media Preview Functions
    let currentMediaSrc = '';
    let currentMediaName = '';

    function openMediaPreview(src, type, name) {
        const modal = document.getElementById('mediaPreviewModal');
        const container = document.getElementById('previewMediaContainer');
        
        currentMediaSrc = src;
        currentMediaName = name || 'media';
        
        container.innerHTML = '';
        
        if (type === 'image') {
            const img = document.createElement('img');
            img.src = src;
            img.className = 'max-w-full max-h-full object-contain rounded-lg shadow-2xl';
            img.alt = name;
            container.appendChild(img);
        } else if (type === 'video') {
            const video = document.createElement('video');
            video.src = src;
            video.className = 'max-w-full max-h-full rounded-lg shadow-2xl';
            video.controls = true;
            video.autoplay = true;
            video.preload = 'metadata';
            container.appendChild(video);
        }
        
        modal.classList.remove('hidden');
        document.body.style.overflow = 'hidden';
    }

    function closeMediaPreview() {
        const modal = document.getElementById('mediaPreviewModal');
        const container = document.getElementById('previewMediaContainer');
        
        const video = container.querySelector('video');
        if (video) {
            video.pause();
            video.currentTime = 0;
        }
        
        modal.classList.add('hidden');
        document.body.style.overflow = 'auto';
        container.innerHTML = '';
        currentMediaSrc = '';
        currentMediaName = '';
    }

    function downloadMedia() {
        if (currentMediaSrc) {
            const link = document.createElement('a');
            link.href = currentMediaSrc;
            link.download = currentMediaName;
            link.target = '_blank';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }
    }

    // Close modal when clicking outside the media or pressing Escape
    document.getElementById('mediaPreviewModal').addEventListener('click', function(e) {
        if (e.target === this) {
            closeMediaPreview();
        }
    });

    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
            closeMediaPreview();
        }
    });

    // Voice Recording Functions
    let mediaRecorder = null;
    let audioChunks = [];
    let voiceStream = null;

    async function startVoiceRecording() {
        try {
            voiceStream = await navigator.mediaDevices.getUserMedia({ audio: true });
            mediaRecorder = new MediaRecorder(voiceStream);
            audioChunks = [];

            mediaRecorder.ondataavailable = (event) => {
                if (event.data.size > 0) {
                    audioChunks.push(event.data);
                }
            };

            mediaRecorder.onstop = async () => {
                const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
                const audioFile = new File([audioBlob], `voice_${Date.now()}.webm`, { type: 'audio/webm' });
                
                // Show preview and send
                selectedFile = audioFile;
                showMediaPreview(audioFile);
                
                // Auto-send voice message
                setTimeout(() => {
                    messageForm.dispatchEvent(new Event('submit'));
                }, 500);
            };

            mediaRecorder.start();
            document.getElementById('voice-recording-modal').classList.remove('hidden');
            document.body.style.overflow = 'hidden';

        } catch (error) {
            console.error('Error starting voice recording:', error);
            alert('Could not access microphone. Please check permissions.');
        }
    }

    function stopVoiceRecording() {
        if (mediaRecorder && mediaRecorder.state === 'recording') {
            mediaRecorder.stop();
        }
        
        if (voiceStream) {
            voiceStream.getTracks().forEach(track => track.stop());
            voiceStream = null;
        }
        
        document.getElementById('voice-recording-modal').classList.add('hidden');
        document.body.style.overflow = 'auto';
    }

    function cancelVoiceRecording() {
        if (mediaRecorder && mediaRecorder.state === 'recording') {
            mediaRecorder.stop();
        }
        
        if (voiceStream) {
            voiceStream.getTracks().forEach(track => track.stop());
            voiceStream = null;
        }
        
        audioChunks = [];
        document.getElementById('voice-recording-modal').classList.add('hidden');
        document.body.style.overflow = 'auto';
    }

    // Call functions
    function initiateCall(type) {
        console.log(`Initiating ${type} call with ${otherUserId}`);
        // Implement call functionality
    }
  </script>
</body>
</html>
